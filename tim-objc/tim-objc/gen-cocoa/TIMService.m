/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"


#import "TIMService.h"

@implementation TimError

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrCode: (int32_t) errCode errMsg: (NSString *) errMsg
{
  self = [super init];
  __errCode = errCode;
  __errCode_isset = YES;
  __errMsg = [errMsg retain_stub];
  __errMsg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errCode"])
  {
    __errCode = [decoder decodeInt32ForKey: @"errCode"];
    __errCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"errMsg"])
  {
    __errMsg = [[decoder decodeObjectForKey: @"errMsg"] retain_stub];
    __errMsg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errCode_isset)
  {
    [encoder encodeInt32: __errCode forKey: @"errCode"];
  }
  if (__errMsg_isset)
  {
    [encoder encodeObject: __errMsg forKey: @"errMsg"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errCode_isset ? 2654435761 : 0;
  if (__errCode_isset)
  {
    hash = (hash * 31) ^ [@(__errCode) hash];
  }
  hash = (hash * 31) ^ __errMsg_isset ? 2654435761 : 0;
  if (__errMsg_isset)
  {
    hash = (hash * 31) ^ [__errMsg hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimError class]]) {
    return NO;
  }
  TimError *other = (TimError *)anObject;
  if ((__errCode_isset != other->__errCode_isset) ||
      (__errCode_isset && (__errCode != other->__errCode))) {
    return NO;
  }
  if ((__errMsg_isset != other->__errMsg_isset) ||
      (__errMsg_isset && ((__errMsg || other->__errMsg) && ![__errMsg isEqual:other->__errMsg]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__errMsg release_stub];
  [super dealloc_stub];
}

- (int32_t) errCode {
  return __errCode;
}

- (void) setErrCode: (int32_t) errCode {
  __errCode = errCode;
  __errCode_isset = YES;
}

- (BOOL) errCodeIsSet {
  return __errCode_isset;
}

- (void) unsetErrCode {
  __errCode_isset = NO;
}

- (NSString *) errMsg {
  return [[__errMsg retain_stub] autorelease_stub];
}

- (void) setErrMsg: (NSString *) errMsg {
  [errMsg retain_stub];
  [__errMsg release_stub];
  __errMsg = errMsg;
  __errMsg_isset = YES;
}

- (BOOL) errMsgIsSet {
  return __errMsg_isset;
}

- (void) unsetErrMsg {
  [__errMsg release_stub];
  __errMsg = nil;
  __errMsg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setErrMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimError"];
  if (__errCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errCode];
    [outProtocol writeFieldEnd];
  }
  if (__errMsg_isset) {
    if (__errMsg != nil) {
      [outProtocol writeFieldBeginWithName: @"errMsg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __errMsg];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimError("];
  [ms appendString: @"errCode:"];
  [ms appendFormat: @"%i", __errCode];
  [ms appendString: @",errMsg:"];
  [ms appendFormat: @"\"%@\"", __errMsg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimNode

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithKey: (NSString *) key value: (NSString *) value
{
  self = [super init];
  __key = [key retain_stub];
  __key_isset = YES;
  __value = [value retain_stub];
  __value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"key"])
  {
    __key = [[decoder decodeObjectForKey: @"key"] retain_stub];
    __key_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain_stub];
    __value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__key_isset)
  {
    [encoder encodeObject: __key forKey: @"key"];
  }
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __key_isset ? 2654435761 : 0;
  if (__key_isset)
  {
    hash = (hash * 31) ^ [__key hash];
  }
  hash = (hash * 31) ^ __value_isset ? 2654435761 : 0;
  if (__value_isset)
  {
    hash = (hash * 31) ^ [__value hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimNode class]]) {
    return NO;
  }
  TimNode *other = (TimNode *)anObject;
  if ((__key_isset != other->__key_isset) ||
      (__key_isset && ((__key || other->__key) && ![__key isEqual:other->__key]))) {
    return NO;
  }
  if ((__value_isset != other->__value_isset) ||
      (__value_isset && ((__value || other->__value) && ![__value isEqual:other->__value]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__key release_stub];
  [__value release_stub];
  [super dealloc_stub];
}

- (NSString *) key {
  return [[__key retain_stub] autorelease_stub];
}

- (void) setKey: (NSString *) key {
  [key retain_stub];
  [__key release_stub];
  __key = key;
  __key_isset = YES;
}

- (BOOL) keyIsSet {
  return __key_isset;
}

- (void) unsetKey {
  [__key release_stub];
  __key = nil;
  __key_isset = NO;
}

- (NSString *) value {
  return [[__value retain_stub] autorelease_stub];
}

- (void) setValue: (NSString *) value {
  [value retain_stub];
  [__value release_stub];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release_stub];
  __value = nil;
  __value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimNode"];
  if (__key_isset) {
    if (__key != nil) {
      [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __key];
      [outProtocol writeFieldEnd];
    }
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimNode("];
  [ms appendString: @"key:"];
  [ms appendFormat: @"\"%@\"", __key];
  [ms appendString: @",value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimAckBean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id ackType: (NSString *) ackType ackStatus: (NSString *) ackStatus extraList: (NSMutableArray *) extraList err: (TimError *) err extraMap: (NSMutableDictionary *) extraMap
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __ackType = [ackType retain_stub];
  __ackType_isset = YES;
  __ackStatus = [ackStatus retain_stub];
  __ackStatus_isset = YES;
  __extraList = [extraList retain_stub];
  __extraList_isset = YES;
  __err = [err retain_stub];
  __err_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"ackType"])
  {
    __ackType = [[decoder decodeObjectForKey: @"ackType"] retain_stub];
    __ackType_isset = YES;
  }
  if ([decoder containsValueForKey: @"ackStatus"])
  {
    __ackStatus = [[decoder decodeObjectForKey: @"ackStatus"] retain_stub];
    __ackStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraList"])
  {
    __extraList = [[decoder decodeObjectForKey: @"extraList"] retain_stub];
    __extraList_isset = YES;
  }
  if ([decoder containsValueForKey: @"err"])
  {
    __err = [[decoder decodeObjectForKey: @"err"] retain_stub];
    __err_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__ackType_isset)
  {
    [encoder encodeObject: __ackType forKey: @"ackType"];
  }
  if (__ackStatus_isset)
  {
    [encoder encodeObject: __ackStatus forKey: @"ackStatus"];
  }
  if (__extraList_isset)
  {
    [encoder encodeObject: __extraList forKey: @"extraList"];
  }
  if (__err_isset)
  {
    [encoder encodeObject: __err forKey: @"err"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __id_isset ? 2654435761 : 0;
  if (__id_isset)
  {
    hash = (hash * 31) ^ [__id hash];
  }
  hash = (hash * 31) ^ __ackType_isset ? 2654435761 : 0;
  if (__ackType_isset)
  {
    hash = (hash * 31) ^ [__ackType hash];
  }
  hash = (hash * 31) ^ __ackStatus_isset ? 2654435761 : 0;
  if (__ackStatus_isset)
  {
    hash = (hash * 31) ^ [__ackStatus hash];
  }
  hash = (hash * 31) ^ __extraList_isset ? 2654435761 : 0;
  if (__extraList_isset)
  {
    hash = (hash * 31) ^ [__extraList hash];
  }
  hash = (hash * 31) ^ __err_isset ? 2654435761 : 0;
  if (__err_isset)
  {
    hash = (hash * 31) ^ [__err hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimAckBean class]]) {
    return NO;
  }
  TimAckBean *other = (TimAckBean *)anObject;
  if ((__id_isset != other->__id_isset) ||
      (__id_isset && ((__id || other->__id) && ![__id isEqual:other->__id]))) {
    return NO;
  }
  if ((__ackType_isset != other->__ackType_isset) ||
      (__ackType_isset && ((__ackType || other->__ackType) && ![__ackType isEqual:other->__ackType]))) {
    return NO;
  }
  if ((__ackStatus_isset != other->__ackStatus_isset) ||
      (__ackStatus_isset && ((__ackStatus || other->__ackStatus) && ![__ackStatus isEqual:other->__ackStatus]))) {
    return NO;
  }
  if ((__extraList_isset != other->__extraList_isset) ||
      (__extraList_isset && ((__extraList || other->__extraList) && ![__extraList isEqual:other->__extraList]))) {
    return NO;
  }
  if ((__err_isset != other->__err_isset) ||
      (__err_isset && ((__err || other->__err) && ![__err isEqual:other->__err]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__id release_stub];
  [__ackType release_stub];
  [__ackStatus release_stub];
  [__extraList release_stub];
  [__err release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) ackType {
  return [[__ackType retain_stub] autorelease_stub];
}

- (void) setAckType: (NSString *) ackType {
  [ackType retain_stub];
  [__ackType release_stub];
  __ackType = ackType;
  __ackType_isset = YES;
}

- (BOOL) ackTypeIsSet {
  return __ackType_isset;
}

- (void) unsetAckType {
  [__ackType release_stub];
  __ackType = nil;
  __ackType_isset = NO;
}

- (NSString *) ackStatus {
  return [[__ackStatus retain_stub] autorelease_stub];
}

- (void) setAckStatus: (NSString *) ackStatus {
  [ackStatus retain_stub];
  [__ackStatus release_stub];
  __ackStatus = ackStatus;
  __ackStatus_isset = YES;
}

- (BOOL) ackStatusIsSet {
  return __ackStatus_isset;
}

- (void) unsetAckStatus {
  [__ackStatus release_stub];
  __ackStatus = nil;
  __ackStatus_isset = NO;
}

- (NSMutableArray *) extraList {
  return [[__extraList retain_stub] autorelease_stub];
}

- (void) setExtraList: (NSMutableArray *) extraList {
  [extraList retain_stub];
  [__extraList release_stub];
  __extraList = extraList;
  __extraList_isset = YES;
}

- (BOOL) extraListIsSet {
  return __extraList_isset;
}

- (void) unsetExtraList {
  [__extraList release_stub];
  __extraList = nil;
  __extraList_isset = NO;
}

- (TimError *) err {
  return [[__err retain_stub] autorelease_stub];
}

- (void) setErr: (TimError *) err {
  [err retain_stub];
  [__err release_stub];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release_stub];
  __err = nil;
  __err_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAckType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAckStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            TimNode *_elem2 = [[TimNode alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setExtraList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          TimError *fieldValue = [[TimError alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_MAP) {
          int _size3;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size3];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size3];
          int _i4;
          for (_i4 = 0; _i4 < _size3; ++_i4)
          {
            NSString * _key5 = [inProtocol readString];
            NSString * _val6 = [inProtocol readString];
            [fieldValue setObject: _val6 forKey: _key5];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimAckBean"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ackType_isset) {
    if (__ackType != nil) {
      [outProtocol writeFieldBeginWithName: @"ackType" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __ackType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ackStatus_isset) {
    if (__ackStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"ackStatus" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __ackStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraList_isset) {
    if (__extraList != nil) {
      [outProtocol writeFieldBeginWithName: @"extraList" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__extraList count]];
        int idx8;
        for (idx8 = 0; idx8 < [__extraList count]; idx8++)
        {
          [[__extraList objectAtIndex: idx8] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 5];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 6];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter9 = [__extraMap keyEnumerator];
        id key10;
        while ((key10 = [_iter9 nextObject]))
        {
          [outProtocol writeString: key10];
          [outProtocol writeString: [__extraMap objectForKey: key10]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimAckBean("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",ackType:"];
  [ms appendFormat: @"\"%@\"", __ackType];
  [ms appendString: @",ackStatus:"];
  [ms appendFormat: @"\"%@\"", __ackStatus];
  [ms appendString: @",extraList:"];
  [ms appendFormat: @"%@", __extraList];
  [ms appendString: @",err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimHBean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithChl: (int32_t) chl platform: (int32_t) platform version: (int16_t) version
{
  self = [super init];
  __chl = chl;
  __chl_isset = YES;
  __platform = platform;
  __platform_isset = YES;
  __version = version;
  __version_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"chl"])
  {
    __chl = [decoder decodeInt32ForKey: @"chl"];
    __chl_isset = YES;
  }
  if ([decoder containsValueForKey: @"platform"])
  {
    __platform = [decoder decodeInt32ForKey: @"platform"];
    __platform_isset = YES;
  }
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [decoder decodeIntForKey: @"version"];
    __version_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__chl_isset)
  {
    [encoder encodeInt32: __chl forKey: @"chl"];
  }
  if (__platform_isset)
  {
    [encoder encodeInt32: __platform forKey: @"platform"];
  }
  if (__version_isset)
  {
    [encoder encodeInt: __version forKey: @"version"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __chl_isset ? 2654435761 : 0;
  if (__chl_isset)
  {
    hash = (hash * 31) ^ [@(__chl) hash];
  }
  hash = (hash * 31) ^ __platform_isset ? 2654435761 : 0;
  if (__platform_isset)
  {
    hash = (hash * 31) ^ [@(__platform) hash];
  }
  hash = (hash * 31) ^ __version_isset ? 2654435761 : 0;
  if (__version_isset)
  {
    hash = (hash * 31) ^ [@(__version) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimHBean class]]) {
    return NO;
  }
  TimHBean *other = (TimHBean *)anObject;
  if ((__chl_isset != other->__chl_isset) ||
      (__chl_isset && (__chl != other->__chl))) {
    return NO;
  }
  if ((__platform_isset != other->__platform_isset) ||
      (__platform_isset && (__platform != other->__platform))) {
    return NO;
  }
  if ((__version_isset != other->__version_isset) ||
      (__version_isset && (__version != other->__version))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) chl {
  return __chl;
}

- (void) setChl: (int32_t) chl {
  __chl = chl;
  __chl_isset = YES;
}

- (BOOL) chlIsSet {
  return __chl_isset;
}

- (void) unsetChl {
  __chl_isset = NO;
}

- (int32_t) platform {
  return __platform;
}

- (void) setPlatform: (int32_t) platform {
  __platform = platform;
  __platform_isset = YES;
}

- (BOOL) platformIsSet {
  return __platform_isset;
}

- (void) unsetPlatform {
  __platform_isset = NO;
}

- (int16_t) version {
  return __version;
}

- (void) setVersion: (int16_t) version {
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  __version_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setChl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlatform: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimHBean"];
  if (__chl_isset) {
    [outProtocol writeFieldBeginWithName: @"chl" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __chl];
    [outProtocol writeFieldEnd];
  }
  if (__platform_isset) {
    [outProtocol writeFieldBeginWithName: @"platform" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __platform];
    [outProtocol writeFieldEnd];
  }
  if (__version_isset) {
    [outProtocol writeFieldBeginWithName: @"version" type: TType_I16 fieldID: 3];
    [outProtocol writeI16: __version];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__chl_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'chl' is not set."];
  }
  if (!__version_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'version' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimHBean("];
  [ms appendString: @"chl:"];
  [ms appendFormat: @"%i", __chl];
  [ms appendString: @",platform:"];
  [ms appendFormat: @"%i", __platform];
  [ms appendString: @",version:"];
  [ms appendFormat: @"%hi", __version];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimParam

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTimestamp: (NSString *) timestamp version: (int16_t) version lang: (NSString *) lang extraList: (NSMutableArray *) extraList extraMap: (NSMutableDictionary *) extraMap interflow: (NSString *) interflow tls: (NSString *) tls
{
  self = [super init];
  __timestamp = [timestamp retain_stub];
  __timestamp_isset = YES;
  __version = version;
  __version_isset = YES;
  __lang = [lang retain_stub];
  __lang_isset = YES;
  __extraList = [extraList retain_stub];
  __extraList_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  __interflow = [interflow retain_stub];
  __interflow_isset = YES;
  __tls = [tls retain_stub];
  __tls_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"timestamp"])
  {
    __timestamp = [[decoder decodeObjectForKey: @"timestamp"] retain_stub];
    __timestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [decoder decodeIntForKey: @"version"];
    __version_isset = YES;
  }
  if ([decoder containsValueForKey: @"lang"])
  {
    __lang = [[decoder decodeObjectForKey: @"lang"] retain_stub];
    __lang_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraList"])
  {
    __extraList = [[decoder decodeObjectForKey: @"extraList"] retain_stub];
    __extraList_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  if ([decoder containsValueForKey: @"interflow"])
  {
    __interflow = [[decoder decodeObjectForKey: @"interflow"] retain_stub];
    __interflow_isset = YES;
  }
  if ([decoder containsValueForKey: @"tls"])
  {
    __tls = [[decoder decodeObjectForKey: @"tls"] retain_stub];
    __tls_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__timestamp_isset)
  {
    [encoder encodeObject: __timestamp forKey: @"timestamp"];
  }
  if (__version_isset)
  {
    [encoder encodeInt: __version forKey: @"version"];
  }
  if (__lang_isset)
  {
    [encoder encodeObject: __lang forKey: @"lang"];
  }
  if (__extraList_isset)
  {
    [encoder encodeObject: __extraList forKey: @"extraList"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
  if (__interflow_isset)
  {
    [encoder encodeObject: __interflow forKey: @"interflow"];
  }
  if (__tls_isset)
  {
    [encoder encodeObject: __tls forKey: @"tls"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __timestamp_isset ? 2654435761 : 0;
  if (__timestamp_isset)
  {
    hash = (hash * 31) ^ [__timestamp hash];
  }
  hash = (hash * 31) ^ __version_isset ? 2654435761 : 0;
  if (__version_isset)
  {
    hash = (hash * 31) ^ [@(__version) hash];
  }
  hash = (hash * 31) ^ __lang_isset ? 2654435761 : 0;
  if (__lang_isset)
  {
    hash = (hash * 31) ^ [__lang hash];
  }
  hash = (hash * 31) ^ __extraList_isset ? 2654435761 : 0;
  if (__extraList_isset)
  {
    hash = (hash * 31) ^ [__extraList hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  hash = (hash * 31) ^ __interflow_isset ? 2654435761 : 0;
  if (__interflow_isset)
  {
    hash = (hash * 31) ^ [__interflow hash];
  }
  hash = (hash * 31) ^ __tls_isset ? 2654435761 : 0;
  if (__tls_isset)
  {
    hash = (hash * 31) ^ [__tls hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimParam class]]) {
    return NO;
  }
  TimParam *other = (TimParam *)anObject;
  if ((__timestamp_isset != other->__timestamp_isset) ||
      (__timestamp_isset && ((__timestamp || other->__timestamp) && ![__timestamp isEqual:other->__timestamp]))) {
    return NO;
  }
  if ((__version_isset != other->__version_isset) ||
      (__version_isset && (__version != other->__version))) {
    return NO;
  }
  if ((__lang_isset != other->__lang_isset) ||
      (__lang_isset && ((__lang || other->__lang) && ![__lang isEqual:other->__lang]))) {
    return NO;
  }
  if ((__extraList_isset != other->__extraList_isset) ||
      (__extraList_isset && ((__extraList || other->__extraList) && ![__extraList isEqual:other->__extraList]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  if ((__interflow_isset != other->__interflow_isset) ||
      (__interflow_isset && ((__interflow || other->__interflow) && ![__interflow isEqual:other->__interflow]))) {
    return NO;
  }
  if ((__tls_isset != other->__tls_isset) ||
      (__tls_isset && ((__tls || other->__tls) && ![__tls isEqual:other->__tls]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__timestamp release_stub];
  [__lang release_stub];
  [__extraList release_stub];
  [__extraMap release_stub];
  [__interflow release_stub];
  [__tls release_stub];
  [super dealloc_stub];
}

- (NSString *) timestamp {
  return [[__timestamp retain_stub] autorelease_stub];
}

- (void) setTimestamp: (NSString *) timestamp {
  [timestamp retain_stub];
  [__timestamp release_stub];
  __timestamp = timestamp;
  __timestamp_isset = YES;
}

- (BOOL) timestampIsSet {
  return __timestamp_isset;
}

- (void) unsetTimestamp {
  [__timestamp release_stub];
  __timestamp = nil;
  __timestamp_isset = NO;
}

- (int16_t) version {
  return __version;
}

- (void) setVersion: (int16_t) version {
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  __version_isset = NO;
}

- (NSString *) lang {
  return [[__lang retain_stub] autorelease_stub];
}

- (void) setLang: (NSString *) lang {
  [lang retain_stub];
  [__lang release_stub];
  __lang = lang;
  __lang_isset = YES;
}

- (BOOL) langIsSet {
  return __lang_isset;
}

- (void) unsetLang {
  [__lang release_stub];
  __lang = nil;
  __lang_isset = NO;
}

- (NSMutableArray *) extraList {
  return [[__extraList retain_stub] autorelease_stub];
}

- (void) setExtraList: (NSMutableArray *) extraList {
  [extraList retain_stub];
  [__extraList release_stub];
  __extraList = extraList;
  __extraList_isset = YES;
}

- (BOOL) extraListIsSet {
  return __extraList_isset;
}

- (void) unsetExtraList {
  [__extraList release_stub];
  __extraList = nil;
  __extraList_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (NSString *) interflow {
  return [[__interflow retain_stub] autorelease_stub];
}

- (void) setInterflow: (NSString *) interflow {
  [interflow retain_stub];
  [__interflow release_stub];
  __interflow = interflow;
  __interflow_isset = YES;
}

- (BOOL) interflowIsSet {
  return __interflow_isset;
}

- (void) unsetInterflow {
  [__interflow release_stub];
  __interflow = nil;
  __interflow_isset = NO;
}

- (NSString *) tls {
  return [[__tls retain_stub] autorelease_stub];
}

- (void) setTls: (NSString *) tls {
  [tls retain_stub];
  [__tls release_stub];
  __tls = tls;
  __tls_isset = YES;
}

- (BOOL) tlsIsSet {
  return __tls_isset;
}

- (void) unsetTls {
  [__tls release_stub];
  __tls = nil;
  __tls_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLang: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size11;
          [inProtocol readListBeginReturningElementType: NULL size: &_size11];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size11];
          int _i12;
          for (_i12 = 0; _i12 < _size11; ++_i12)
          {
            TimNode *_elem13 = [[TimNode alloc] init];
            [_elem13 read: inProtocol];
            [fieldValue addObject: _elem13];
            [_elem13 release_stub];
          }
          [inProtocol readListEnd];
          [self setExtraList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_MAP) {
          int _size14;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size14];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size14];
          int _i15;
          for (_i15 = 0; _i15 < _size14; ++_i15)
          {
            NSString * _key16 = [inProtocol readString];
            NSString * _val17 = [inProtocol readString];
            [fieldValue setObject: _val17 forKey: _key16];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInterflow: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTls: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimParam"];
  if (__timestamp_isset) {
    if (__timestamp != nil) {
      [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __timestamp];
      [outProtocol writeFieldEnd];
    }
  }
  if (__version_isset) {
    [outProtocol writeFieldBeginWithName: @"version" type: TType_I16 fieldID: 2];
    [outProtocol writeI16: __version];
    [outProtocol writeFieldEnd];
  }
  if (__lang_isset) {
    if (__lang != nil) {
      [outProtocol writeFieldBeginWithName: @"lang" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __lang];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraList_isset) {
    if (__extraList != nil) {
      [outProtocol writeFieldBeginWithName: @"extraList" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__extraList count]];
        int idx19;
        for (idx19 = 0; idx19 < [__extraList count]; idx19++)
        {
          [[__extraList objectAtIndex: idx19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 5];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter20 = [__extraMap keyEnumerator];
        id key21;
        while ((key21 = [_iter20 nextObject]))
        {
          [outProtocol writeString: key21];
          [outProtocol writeString: [__extraMap objectForKey: key21]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__interflow_isset) {
    if (__interflow != nil) {
      [outProtocol writeFieldBeginWithName: @"interflow" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __interflow];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tls_isset) {
    if (__tls != nil) {
      [outProtocol writeFieldBeginWithName: @"tls" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __tls];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimParam("];
  [ms appendString: @"timestamp:"];
  [ms appendFormat: @"\"%@\"", __timestamp];
  [ms appendString: @",version:"];
  [ms appendFormat: @"%hi", __version];
  [ms appendString: @",lang:"];
  [ms appendFormat: @"\"%@\"", __lang];
  [ms appendString: @",extraList:"];
  [ms appendFormat: @"%@", __extraList];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @",interflow:"];
  [ms appendFormat: @"\"%@\"", __interflow];
  [ms appendString: @",tls:"];
  [ms appendFormat: @"\"%@\"", __tls];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimTime

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTimestamp: (NSString *) timestamp formattime: (NSString *) formattime
{
  self = [super init];
  __timestamp = [timestamp retain_stub];
  __timestamp_isset = YES;
  __formattime = [formattime retain_stub];
  __formattime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"timestamp"])
  {
    __timestamp = [[decoder decodeObjectForKey: @"timestamp"] retain_stub];
    __timestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"formattime"])
  {
    __formattime = [[decoder decodeObjectForKey: @"formattime"] retain_stub];
    __formattime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__timestamp_isset)
  {
    [encoder encodeObject: __timestamp forKey: @"timestamp"];
  }
  if (__formattime_isset)
  {
    [encoder encodeObject: __formattime forKey: @"formattime"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __timestamp_isset ? 2654435761 : 0;
  if (__timestamp_isset)
  {
    hash = (hash * 31) ^ [__timestamp hash];
  }
  hash = (hash * 31) ^ __formattime_isset ? 2654435761 : 0;
  if (__formattime_isset)
  {
    hash = (hash * 31) ^ [__formattime hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimTime class]]) {
    return NO;
  }
  TimTime *other = (TimTime *)anObject;
  if ((__timestamp_isset != other->__timestamp_isset) ||
      (__timestamp_isset && ((__timestamp || other->__timestamp) && ![__timestamp isEqual:other->__timestamp]))) {
    return NO;
  }
  if ((__formattime_isset != other->__formattime_isset) ||
      (__formattime_isset && ((__formattime || other->__formattime) && ![__formattime isEqual:other->__formattime]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__timestamp release_stub];
  [__formattime release_stub];
  [super dealloc_stub];
}

- (NSString *) timestamp {
  return [[__timestamp retain_stub] autorelease_stub];
}

- (void) setTimestamp: (NSString *) timestamp {
  [timestamp retain_stub];
  [__timestamp release_stub];
  __timestamp = timestamp;
  __timestamp_isset = YES;
}

- (BOOL) timestampIsSet {
  return __timestamp_isset;
}

- (void) unsetTimestamp {
  [__timestamp release_stub];
  __timestamp = nil;
  __timestamp_isset = NO;
}

- (NSString *) formattime {
  return [[__formattime retain_stub] autorelease_stub];
}

- (void) setFormattime: (NSString *) formattime {
  [formattime retain_stub];
  [__formattime release_stub];
  __formattime = formattime;
  __formattime_isset = YES;
}

- (BOOL) formattimeIsSet {
  return __formattime_isset;
}

- (void) unsetFormattime {
  [__formattime release_stub];
  __formattime = nil;
  __formattime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFormattime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimTime"];
  if (__timestamp_isset) {
    if (__timestamp != nil) {
      [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __timestamp];
      [outProtocol writeFieldEnd];
    }
  }
  if (__formattime_isset) {
    if (__formattime != nil) {
      [outProtocol writeFieldBeginWithName: @"formattime" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __formattime];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimTime("];
  [ms appendString: @"timestamp:"];
  [ms appendFormat: @"\"%@\"", __timestamp];
  [ms appendString: @",formattime:"];
  [ms appendFormat: @"\"%@\"", __formattime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimArea

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCountry: (NSString *) country province: (NSString *) province city: (NSString *) city extraList: (NSMutableArray *) extraList extraMap: (NSMutableDictionary *) extraMap
{
  self = [super init];
  __country = [country retain_stub];
  __country_isset = YES;
  __province = [province retain_stub];
  __province_isset = YES;
  __city = [city retain_stub];
  __city_isset = YES;
  __extraList = [extraList retain_stub];
  __extraList_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"country"])
  {
    __country = [[decoder decodeObjectForKey: @"country"] retain_stub];
    __country_isset = YES;
  }
  if ([decoder containsValueForKey: @"province"])
  {
    __province = [[decoder decodeObjectForKey: @"province"] retain_stub];
    __province_isset = YES;
  }
  if ([decoder containsValueForKey: @"city"])
  {
    __city = [[decoder decodeObjectForKey: @"city"] retain_stub];
    __city_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraList"])
  {
    __extraList = [[decoder decodeObjectForKey: @"extraList"] retain_stub];
    __extraList_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__country_isset)
  {
    [encoder encodeObject: __country forKey: @"country"];
  }
  if (__province_isset)
  {
    [encoder encodeObject: __province forKey: @"province"];
  }
  if (__city_isset)
  {
    [encoder encodeObject: __city forKey: @"city"];
  }
  if (__extraList_isset)
  {
    [encoder encodeObject: __extraList forKey: @"extraList"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __country_isset ? 2654435761 : 0;
  if (__country_isset)
  {
    hash = (hash * 31) ^ [__country hash];
  }
  hash = (hash * 31) ^ __province_isset ? 2654435761 : 0;
  if (__province_isset)
  {
    hash = (hash * 31) ^ [__province hash];
  }
  hash = (hash * 31) ^ __city_isset ? 2654435761 : 0;
  if (__city_isset)
  {
    hash = (hash * 31) ^ [__city hash];
  }
  hash = (hash * 31) ^ __extraList_isset ? 2654435761 : 0;
  if (__extraList_isset)
  {
    hash = (hash * 31) ^ [__extraList hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimArea class]]) {
    return NO;
  }
  TimArea *other = (TimArea *)anObject;
  if ((__country_isset != other->__country_isset) ||
      (__country_isset && ((__country || other->__country) && ![__country isEqual:other->__country]))) {
    return NO;
  }
  if ((__province_isset != other->__province_isset) ||
      (__province_isset && ((__province || other->__province) && ![__province isEqual:other->__province]))) {
    return NO;
  }
  if ((__city_isset != other->__city_isset) ||
      (__city_isset && ((__city || other->__city) && ![__city isEqual:other->__city]))) {
    return NO;
  }
  if ((__extraList_isset != other->__extraList_isset) ||
      (__extraList_isset && ((__extraList || other->__extraList) && ![__extraList isEqual:other->__extraList]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__country release_stub];
  [__province release_stub];
  [__city release_stub];
  [__extraList release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (NSString *) country {
  return [[__country retain_stub] autorelease_stub];
}

- (void) setCountry: (NSString *) country {
  [country retain_stub];
  [__country release_stub];
  __country = country;
  __country_isset = YES;
}

- (BOOL) countryIsSet {
  return __country_isset;
}

- (void) unsetCountry {
  [__country release_stub];
  __country = nil;
  __country_isset = NO;
}

- (NSString *) province {
  return [[__province retain_stub] autorelease_stub];
}

- (void) setProvince: (NSString *) province {
  [province retain_stub];
  [__province release_stub];
  __province = province;
  __province_isset = YES;
}

- (BOOL) provinceIsSet {
  return __province_isset;
}

- (void) unsetProvince {
  [__province release_stub];
  __province = nil;
  __province_isset = NO;
}

- (NSString *) city {
  return [[__city retain_stub] autorelease_stub];
}

- (void) setCity: (NSString *) city {
  [city retain_stub];
  [__city release_stub];
  __city = city;
  __city_isset = YES;
}

- (BOOL) cityIsSet {
  return __city_isset;
}

- (void) unsetCity {
  [__city release_stub];
  __city = nil;
  __city_isset = NO;
}

- (NSMutableArray *) extraList {
  return [[__extraList retain_stub] autorelease_stub];
}

- (void) setExtraList: (NSMutableArray *) extraList {
  [extraList retain_stub];
  [__extraList release_stub];
  __extraList = extraList;
  __extraList_isset = YES;
}

- (BOOL) extraListIsSet {
  return __extraList_isset;
}

- (void) unsetExtraList {
  [__extraList release_stub];
  __extraList = nil;
  __extraList_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCountry: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProvince: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size22;
          [inProtocol readListBeginReturningElementType: NULL size: &_size22];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size22];
          int _i23;
          for (_i23 = 0; _i23 < _size22; ++_i23)
          {
            TimNode *_elem24 = [[TimNode alloc] init];
            [_elem24 read: inProtocol];
            [fieldValue addObject: _elem24];
            [_elem24 release_stub];
          }
          [inProtocol readListEnd];
          [self setExtraList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_MAP) {
          int _size25;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size25];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            NSString * _key27 = [inProtocol readString];
            NSString * _val28 = [inProtocol readString];
            [fieldValue setObject: _val28 forKey: _key27];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimArea"];
  if (__country_isset) {
    if (__country != nil) {
      [outProtocol writeFieldBeginWithName: @"country" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __country];
      [outProtocol writeFieldEnd];
    }
  }
  if (__province_isset) {
    if (__province != nil) {
      [outProtocol writeFieldBeginWithName: @"province" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __province];
      [outProtocol writeFieldEnd];
    }
  }
  if (__city_isset) {
    if (__city != nil) {
      [outProtocol writeFieldBeginWithName: @"city" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __city];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraList_isset) {
    if (__extraList != nil) {
      [outProtocol writeFieldBeginWithName: @"extraList" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__extraList count]];
        int idx30;
        for (idx30 = 0; idx30 < [__extraList count]; idx30++)
        {
          [[__extraList objectAtIndex: idx30] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 5];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter31 = [__extraMap keyEnumerator];
        id key32;
        while ((key32 = [_iter31 nextObject]))
        {
          [outProtocol writeString: key32];
          [outProtocol writeString: [__extraMap objectForKey: key32]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimArea("];
  [ms appendString: @"country:"];
  [ms appendFormat: @"\"%@\"", __country];
  [ms appendString: @",province:"];
  [ms appendFormat: @"\"%@\"", __province];
  [ms appendString: @",city:"];
  [ms appendFormat: @"\"%@\"", __city];
  [ms appendString: @",extraList:"];
  [ms appendFormat: @"%@", __extraList];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Tid

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name domain: (NSString *) domain resource: (NSString *) resource type: (NSString *) type extraList: (NSMutableArray *) extraList extraMap: (NSMutableDictionary *) extraMap
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __domain = [domain retain_stub];
  __domain_isset = YES;
  __resource = [resource retain_stub];
  __resource_isset = YES;
  __type = [type retain_stub];
  __type_isset = YES;
  __extraList = [extraList retain_stub];
  __extraList_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"domain"])
  {
    __domain = [[decoder decodeObjectForKey: @"domain"] retain_stub];
    __domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"resource"])
  {
    __resource = [[decoder decodeObjectForKey: @"resource"] retain_stub];
    __resource_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain_stub];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraList"])
  {
    __extraList = [[decoder decodeObjectForKey: @"extraList"] retain_stub];
    __extraList_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__domain_isset)
  {
    [encoder encodeObject: __domain forKey: @"domain"];
  }
  if (__resource_isset)
  {
    [encoder encodeObject: __resource forKey: @"resource"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__extraList_isset)
  {
    [encoder encodeObject: __extraList forKey: @"extraList"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __domain_isset ? 2654435761 : 0;
  if (__domain_isset)
  {
    hash = (hash * 31) ^ [__domain hash];
  }
  hash = (hash * 31) ^ __resource_isset ? 2654435761 : 0;
  if (__resource_isset)
  {
    hash = (hash * 31) ^ [__resource hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [__type hash];
  }
  hash = (hash * 31) ^ __extraList_isset ? 2654435761 : 0;
  if (__extraList_isset)
  {
    hash = (hash * 31) ^ [__extraList hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Tid class]]) {
    return NO;
  }
  Tid *other = (Tid *)anObject;
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__domain_isset != other->__domain_isset) ||
      (__domain_isset && ((__domain || other->__domain) && ![__domain isEqual:other->__domain]))) {
    return NO;
  }
  if ((__resource_isset != other->__resource_isset) ||
      (__resource_isset && ((__resource || other->__resource) && ![__resource isEqual:other->__resource]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && ((__type || other->__type) && ![__type isEqual:other->__type]))) {
    return NO;
  }
  if ((__extraList_isset != other->__extraList_isset) ||
      (__extraList_isset && ((__extraList || other->__extraList) && ![__extraList isEqual:other->__extraList]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__name release_stub];
  [__domain release_stub];
  [__resource release_stub];
  [__type release_stub];
  [__extraList release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) domain {
  return [[__domain retain_stub] autorelease_stub];
}

- (void) setDomain: (NSString *) domain {
  [domain retain_stub];
  [__domain release_stub];
  __domain = domain;
  __domain_isset = YES;
}

- (BOOL) domainIsSet {
  return __domain_isset;
}

- (void) unsetDomain {
  [__domain release_stub];
  __domain = nil;
  __domain_isset = NO;
}

- (NSString *) resource {
  return [[__resource retain_stub] autorelease_stub];
}

- (void) setResource: (NSString *) resource {
  [resource retain_stub];
  [__resource release_stub];
  __resource = resource;
  __resource_isset = YES;
}

- (BOOL) resourceIsSet {
  return __resource_isset;
}

- (void) unsetResource {
  [__resource release_stub];
  __resource = nil;
  __resource_isset = NO;
}

- (NSString *) type {
  return [[__type retain_stub] autorelease_stub];
}

- (void) setType: (NSString *) type {
  [type retain_stub];
  [__type release_stub];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release_stub];
  __type = nil;
  __type_isset = NO;
}

- (NSMutableArray *) extraList {
  return [[__extraList retain_stub] autorelease_stub];
}

- (void) setExtraList: (NSMutableArray *) extraList {
  [extraList retain_stub];
  [__extraList release_stub];
  __extraList = extraList;
  __extraList_isset = YES;
}

- (BOOL) extraListIsSet {
  return __extraList_isset;
}

- (void) unsetExtraList {
  [__extraList release_stub];
  __extraList = nil;
  __extraList_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDomain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setResource: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size33;
          [inProtocol readListBeginReturningElementType: NULL size: &_size33];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size33];
          int _i34;
          for (_i34 = 0; _i34 < _size33; ++_i34)
          {
            TimNode *_elem35 = [[TimNode alloc] init];
            [_elem35 read: inProtocol];
            [fieldValue addObject: _elem35];
            [_elem35 release_stub];
          }
          [inProtocol readListEnd];
          [self setExtraList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_MAP) {
          int _size36;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size36];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size36];
          int _i37;
          for (_i37 = 0; _i37 < _size36; ++_i37)
          {
            NSString * _key38 = [inProtocol readString];
            NSString * _val39 = [inProtocol readString];
            [fieldValue setObject: _val39 forKey: _key38];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Tid"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__domain_isset) {
    if (__domain != nil) {
      [outProtocol writeFieldBeginWithName: @"domain" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__resource_isset) {
    if (__resource != nil) {
      [outProtocol writeFieldBeginWithName: @"resource" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __resource];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraList_isset) {
    if (__extraList != nil) {
      [outProtocol writeFieldBeginWithName: @"extraList" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__extraList count]];
        int idx41;
        for (idx41 = 0; idx41 < [__extraList count]; idx41++)
        {
          [[__extraList objectAtIndex: idx41] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 6];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter42 = [__extraMap keyEnumerator];
        id key43;
        while ((key43 = [_iter42 nextObject]))
        {
          [outProtocol writeString: key43];
          [outProtocol writeString: [__extraMap objectForKey: key43]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Tid("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",domain:"];
  [ms appendFormat: @"\"%@\"", __domain];
  [ms appendString: @",resource:"];
  [ms appendFormat: @"\"%@\"", __resource];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",extraList:"];
  [ms appendFormat: @"%@", __extraList];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimUserBean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTid: (Tid *) tid nickname: (NSString *) nickname remarkname: (NSString *) remarkname brithday: (NSString *) brithday gender: (int16_t) gender headurl: (NSString *) headurl area: (TimArea *) area headbyte: (NSData *) headbyte photoBytes: (NSMutableArray *) photoBytes extraList: (NSMutableArray *) extraList extraMap: (NSMutableDictionary *) extraMap
{
  self = [super init];
  __tid = [tid retain_stub];
  __tid_isset = YES;
  __nickname = [nickname retain_stub];
  __nickname_isset = YES;
  __remarkname = [remarkname retain_stub];
  __remarkname_isset = YES;
  __brithday = [brithday retain_stub];
  __brithday_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __headurl = [headurl retain_stub];
  __headurl_isset = YES;
  __area = [area retain_stub];
  __area_isset = YES;
  __headbyte = [headbyte retain_stub];
  __headbyte_isset = YES;
  __photoBytes = [photoBytes retain_stub];
  __photoBytes_isset = YES;
  __extraList = [extraList retain_stub];
  __extraList_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tid"])
  {
    __tid = [[decoder decodeObjectForKey: @"tid"] retain_stub];
    __tid_isset = YES;
  }
  if ([decoder containsValueForKey: @"nickname"])
  {
    __nickname = [[decoder decodeObjectForKey: @"nickname"] retain_stub];
    __nickname_isset = YES;
  }
  if ([decoder containsValueForKey: @"remarkname"])
  {
    __remarkname = [[decoder decodeObjectForKey: @"remarkname"] retain_stub];
    __remarkname_isset = YES;
  }
  if ([decoder containsValueForKey: @"brithday"])
  {
    __brithday = [[decoder decodeObjectForKey: @"brithday"] retain_stub];
    __brithday_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeIntForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"headurl"])
  {
    __headurl = [[decoder decodeObjectForKey: @"headurl"] retain_stub];
    __headurl_isset = YES;
  }
  if ([decoder containsValueForKey: @"area"])
  {
    __area = [[decoder decodeObjectForKey: @"area"] retain_stub];
    __area_isset = YES;
  }
  if ([decoder containsValueForKey: @"headbyte"])
  {
    __headbyte = [[decoder decodeObjectForKey: @"headbyte"] retain_stub];
    __headbyte_isset = YES;
  }
  if ([decoder containsValueForKey: @"photoBytes"])
  {
    __photoBytes = [[decoder decodeObjectForKey: @"photoBytes"] retain_stub];
    __photoBytes_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraList"])
  {
    __extraList = [[decoder decodeObjectForKey: @"extraList"] retain_stub];
    __extraList_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tid_isset)
  {
    [encoder encodeObject: __tid forKey: @"tid"];
  }
  if (__nickname_isset)
  {
    [encoder encodeObject: __nickname forKey: @"nickname"];
  }
  if (__remarkname_isset)
  {
    [encoder encodeObject: __remarkname forKey: @"remarkname"];
  }
  if (__brithday_isset)
  {
    [encoder encodeObject: __brithday forKey: @"brithday"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt: __gender forKey: @"gender"];
  }
  if (__headurl_isset)
  {
    [encoder encodeObject: __headurl forKey: @"headurl"];
  }
  if (__area_isset)
  {
    [encoder encodeObject: __area forKey: @"area"];
  }
  if (__headbyte_isset)
  {
    [encoder encodeObject: __headbyte forKey: @"headbyte"];
  }
  if (__photoBytes_isset)
  {
    [encoder encodeObject: __photoBytes forKey: @"photoBytes"];
  }
  if (__extraList_isset)
  {
    [encoder encodeObject: __extraList forKey: @"extraList"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __tid_isset ? 2654435761 : 0;
  if (__tid_isset)
  {
    hash = (hash * 31) ^ [__tid hash];
  }
  hash = (hash * 31) ^ __nickname_isset ? 2654435761 : 0;
  if (__nickname_isset)
  {
    hash = (hash * 31) ^ [__nickname hash];
  }
  hash = (hash * 31) ^ __remarkname_isset ? 2654435761 : 0;
  if (__remarkname_isset)
  {
    hash = (hash * 31) ^ [__remarkname hash];
  }
  hash = (hash * 31) ^ __brithday_isset ? 2654435761 : 0;
  if (__brithday_isset)
  {
    hash = (hash * 31) ^ [__brithday hash];
  }
  hash = (hash * 31) ^ __gender_isset ? 2654435761 : 0;
  if (__gender_isset)
  {
    hash = (hash * 31) ^ [@(__gender) hash];
  }
  hash = (hash * 31) ^ __headurl_isset ? 2654435761 : 0;
  if (__headurl_isset)
  {
    hash = (hash * 31) ^ [__headurl hash];
  }
  hash = (hash * 31) ^ __area_isset ? 2654435761 : 0;
  if (__area_isset)
  {
    hash = (hash * 31) ^ [__area hash];
  }
  hash = (hash * 31) ^ __headbyte_isset ? 2654435761 : 0;
  if (__headbyte_isset)
  {
    hash = (hash * 31) ^ [__headbyte hash];
  }
  hash = (hash * 31) ^ __photoBytes_isset ? 2654435761 : 0;
  if (__photoBytes_isset)
  {
    hash = (hash * 31) ^ [__photoBytes hash];
  }
  hash = (hash * 31) ^ __extraList_isset ? 2654435761 : 0;
  if (__extraList_isset)
  {
    hash = (hash * 31) ^ [__extraList hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimUserBean class]]) {
    return NO;
  }
  TimUserBean *other = (TimUserBean *)anObject;
  if ((__tid_isset != other->__tid_isset) ||
      (__tid_isset && ((__tid || other->__tid) && ![__tid isEqual:other->__tid]))) {
    return NO;
  }
  if ((__nickname_isset != other->__nickname_isset) ||
      (__nickname_isset && ((__nickname || other->__nickname) && ![__nickname isEqual:other->__nickname]))) {
    return NO;
  }
  if ((__remarkname_isset != other->__remarkname_isset) ||
      (__remarkname_isset && ((__remarkname || other->__remarkname) && ![__remarkname isEqual:other->__remarkname]))) {
    return NO;
  }
  if ((__brithday_isset != other->__brithday_isset) ||
      (__brithday_isset && ((__brithday || other->__brithday) && ![__brithday isEqual:other->__brithday]))) {
    return NO;
  }
  if ((__gender_isset != other->__gender_isset) ||
      (__gender_isset && (__gender != other->__gender))) {
    return NO;
  }
  if ((__headurl_isset != other->__headurl_isset) ||
      (__headurl_isset && ((__headurl || other->__headurl) && ![__headurl isEqual:other->__headurl]))) {
    return NO;
  }
  if ((__area_isset != other->__area_isset) ||
      (__area_isset && ((__area || other->__area) && ![__area isEqual:other->__area]))) {
    return NO;
  }
  if ((__headbyte_isset != other->__headbyte_isset) ||
      (__headbyte_isset && ((__headbyte || other->__headbyte) && ![__headbyte isEqual:other->__headbyte]))) {
    return NO;
  }
  if ((__photoBytes_isset != other->__photoBytes_isset) ||
      (__photoBytes_isset && ((__photoBytes || other->__photoBytes) && ![__photoBytes isEqual:other->__photoBytes]))) {
    return NO;
  }
  if ((__extraList_isset != other->__extraList_isset) ||
      (__extraList_isset && ((__extraList || other->__extraList) && ![__extraList isEqual:other->__extraList]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__tid release_stub];
  [__nickname release_stub];
  [__remarkname release_stub];
  [__brithday release_stub];
  [__headurl release_stub];
  [__area release_stub];
  [__headbyte release_stub];
  [__photoBytes release_stub];
  [__extraList release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (Tid *) tid {
  return [[__tid retain_stub] autorelease_stub];
}

- (void) setTid: (Tid *) tid {
  [tid retain_stub];
  [__tid release_stub];
  __tid = tid;
  __tid_isset = YES;
}

- (BOOL) tidIsSet {
  return __tid_isset;
}

- (void) unsetTid {
  [__tid release_stub];
  __tid = nil;
  __tid_isset = NO;
}

- (NSString *) nickname {
  return [[__nickname retain_stub] autorelease_stub];
}

- (void) setNickname: (NSString *) nickname {
  [nickname retain_stub];
  [__nickname release_stub];
  __nickname = nickname;
  __nickname_isset = YES;
}

- (BOOL) nicknameIsSet {
  return __nickname_isset;
}

- (void) unsetNickname {
  [__nickname release_stub];
  __nickname = nil;
  __nickname_isset = NO;
}

- (NSString *) remarkname {
  return [[__remarkname retain_stub] autorelease_stub];
}

- (void) setRemarkname: (NSString *) remarkname {
  [remarkname retain_stub];
  [__remarkname release_stub];
  __remarkname = remarkname;
  __remarkname_isset = YES;
}

- (BOOL) remarknameIsSet {
  return __remarkname_isset;
}

- (void) unsetRemarkname {
  [__remarkname release_stub];
  __remarkname = nil;
  __remarkname_isset = NO;
}

- (NSString *) brithday {
  return [[__brithday retain_stub] autorelease_stub];
}

- (void) setBrithday: (NSString *) brithday {
  [brithday retain_stub];
  [__brithday release_stub];
  __brithday = brithday;
  __brithday_isset = YES;
}

- (BOOL) brithdayIsSet {
  return __brithday_isset;
}

- (void) unsetBrithday {
  [__brithday release_stub];
  __brithday = nil;
  __brithday_isset = NO;
}

- (int16_t) gender {
  return __gender;
}

- (void) setGender: (int16_t) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (NSString *) headurl {
  return [[__headurl retain_stub] autorelease_stub];
}

- (void) setHeadurl: (NSString *) headurl {
  [headurl retain_stub];
  [__headurl release_stub];
  __headurl = headurl;
  __headurl_isset = YES;
}

- (BOOL) headurlIsSet {
  return __headurl_isset;
}

- (void) unsetHeadurl {
  [__headurl release_stub];
  __headurl = nil;
  __headurl_isset = NO;
}

- (TimArea *) area {
  return [[__area retain_stub] autorelease_stub];
}

- (void) setArea: (TimArea *) area {
  [area retain_stub];
  [__area release_stub];
  __area = area;
  __area_isset = YES;
}

- (BOOL) areaIsSet {
  return __area_isset;
}

- (void) unsetArea {
  [__area release_stub];
  __area = nil;
  __area_isset = NO;
}

- (NSData *) headbyte {
  return [[__headbyte retain_stub] autorelease_stub];
}

- (void) setHeadbyte: (NSData *) headbyte {
  [headbyte retain_stub];
  [__headbyte release_stub];
  __headbyte = headbyte;
  __headbyte_isset = YES;
}

- (BOOL) headbyteIsSet {
  return __headbyte_isset;
}

- (void) unsetHeadbyte {
  [__headbyte release_stub];
  __headbyte = nil;
  __headbyte_isset = NO;
}

- (NSMutableArray *) photoBytes {
  return [[__photoBytes retain_stub] autorelease_stub];
}

- (void) setPhotoBytes: (NSMutableArray *) photoBytes {
  [photoBytes retain_stub];
  [__photoBytes release_stub];
  __photoBytes = photoBytes;
  __photoBytes_isset = YES;
}

- (BOOL) photoBytesIsSet {
  return __photoBytes_isset;
}

- (void) unsetPhotoBytes {
  [__photoBytes release_stub];
  __photoBytes = nil;
  __photoBytes_isset = NO;
}

- (NSMutableArray *) extraList {
  return [[__extraList retain_stub] autorelease_stub];
}

- (void) setExtraList: (NSMutableArray *) extraList {
  [extraList retain_stub];
  [__extraList release_stub];
  __extraList = extraList;
  __extraList_isset = YES;
}

- (BOOL) extraListIsSet {
  return __extraList_isset;
}

- (void) unsetExtraList {
  [__extraList release_stub];
  __extraList = nil;
  __extraList_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNickname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemarkname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBrithday: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHeadurl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          TimArea *fieldValue = [[TimArea alloc] init];
          [fieldValue read: inProtocol];
          [self setArea: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setHeadbyte: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_LIST) {
          int _size44;
          [inProtocol readListBeginReturningElementType: NULL size: &_size44];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size44];
          int _i45;
          for (_i45 = 0; _i45 < _size44; ++_i45)
          {
            NSData * _elem46 = [inProtocol readBinary];
            [fieldValue addObject: _elem46];
          }
          [inProtocol readListEnd];
          [self setPhotoBytes: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_LIST) {
          int _size47;
          [inProtocol readListBeginReturningElementType: NULL size: &_size47];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size47];
          int _i48;
          for (_i48 = 0; _i48 < _size47; ++_i48)
          {
            TimNode *_elem49 = [[TimNode alloc] init];
            [_elem49 read: inProtocol];
            [fieldValue addObject: _elem49];
            [_elem49 release_stub];
          }
          [inProtocol readListEnd];
          [self setExtraList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_MAP) {
          int _size50;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size50];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size50];
          int _i51;
          for (_i51 = 0; _i51 < _size50; ++_i51)
          {
            NSString * _key52 = [inProtocol readString];
            NSString * _val53 = [inProtocol readString];
            [fieldValue setObject: _val53 forKey: _key52];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimUserBean"];
  if (__tid_isset) {
    if (__tid != nil) {
      [outProtocol writeFieldBeginWithName: @"tid" type: TType_STRUCT fieldID: 1];
      [__tid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__nickname_isset) {
    if (__nickname != nil) {
      [outProtocol writeFieldBeginWithName: @"nickname" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __nickname];
      [outProtocol writeFieldEnd];
    }
  }
  if (__remarkname_isset) {
    if (__remarkname != nil) {
      [outProtocol writeFieldBeginWithName: @"remarkname" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __remarkname];
      [outProtocol writeFieldEnd];
    }
  }
  if (__brithday_isset) {
    if (__brithday != nil) {
      [outProtocol writeFieldBeginWithName: @"brithday" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __brithday];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I16 fieldID: 5];
    [outProtocol writeI16: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__headurl_isset) {
    if (__headurl != nil) {
      [outProtocol writeFieldBeginWithName: @"headurl" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __headurl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__area_isset) {
    if (__area != nil) {
      [outProtocol writeFieldBeginWithName: @"area" type: TType_STRUCT fieldID: 7];
      [__area write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__headbyte_isset) {
    if (__headbyte != nil) {
      [outProtocol writeFieldBeginWithName: @"headbyte" type: TType_STRING fieldID: 8];
      [outProtocol writeBinary: __headbyte];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photoBytes_isset) {
    if (__photoBytes != nil) {
      [outProtocol writeFieldBeginWithName: @"photoBytes" type: TType_LIST fieldID: 9];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__photoBytes count]];
        int idx55;
        for (idx55 = 0; idx55 < [__photoBytes count]; idx55++)
        {
          [outProtocol writeBinary: [__photoBytes objectAtIndex: idx55]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraList_isset) {
    if (__extraList != nil) {
      [outProtocol writeFieldBeginWithName: @"extraList" type: TType_LIST fieldID: 10];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__extraList count]];
        int idx57;
        for (idx57 = 0; idx57 < [__extraList count]; idx57++)
        {
          [[__extraList objectAtIndex: idx57] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 11];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter58 = [__extraMap keyEnumerator];
        id key59;
        while ((key59 = [_iter58 nextObject]))
        {
          [outProtocol writeString: key59];
          [outProtocol writeString: [__extraMap objectForKey: key59]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimUserBean("];
  [ms appendString: @"tid:"];
  [ms appendFormat: @"%@", __tid];
  [ms appendString: @",nickname:"];
  [ms appendFormat: @"\"%@\"", __nickname];
  [ms appendString: @",remarkname:"];
  [ms appendFormat: @"\"%@\"", __remarkname];
  [ms appendString: @",brithday:"];
  [ms appendFormat: @"\"%@\"", __brithday];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%hi", __gender];
  [ms appendString: @",headurl:"];
  [ms appendFormat: @"\"%@\"", __headurl];
  [ms appendString: @",area:"];
  [ms appendFormat: @"%@", __area];
  [ms appendString: @",headbyte:"];
  [ms appendFormat: @"\"%@\"", __headbyte];
  [ms appendString: @",photoBytes:"];
  [ms appendFormat: @"%@", __photoBytes];
  [ms appendString: @",extraList:"];
  [ms appendFormat: @"%@", __extraList];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimRoom

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTid: (Tid *) tid founderTid: (Tid *) founderTid HostsTid: (NSMutableArray *) HostsTid membersTid: (NSMutableArray *) membersTid headurl: (NSString *) headurl roomName: (NSString *) roomName desc: (NSString *) desc createTime: (TimTime *) createTime extraList: (NSMutableArray *) extraList extraMap: (NSMutableDictionary *) extraMap
{
  self = [super init];
  __tid = [tid retain_stub];
  __tid_isset = YES;
  __founderTid = [founderTid retain_stub];
  __founderTid_isset = YES;
  __HostsTid = [HostsTid retain_stub];
  __HostsTid_isset = YES;
  __membersTid = [membersTid retain_stub];
  __membersTid_isset = YES;
  __headurl = [headurl retain_stub];
  __headurl_isset = YES;
  __roomName = [roomName retain_stub];
  __roomName_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __createTime = [createTime retain_stub];
  __createTime_isset = YES;
  __extraList = [extraList retain_stub];
  __extraList_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tid"])
  {
    __tid = [[decoder decodeObjectForKey: @"tid"] retain_stub];
    __tid_isset = YES;
  }
  if ([decoder containsValueForKey: @"founderTid"])
  {
    __founderTid = [[decoder decodeObjectForKey: @"founderTid"] retain_stub];
    __founderTid_isset = YES;
  }
  if ([decoder containsValueForKey: @"HostsTid"])
  {
    __HostsTid = [[decoder decodeObjectForKey: @"HostsTid"] retain_stub];
    __HostsTid_isset = YES;
  }
  if ([decoder containsValueForKey: @"membersTid"])
  {
    __membersTid = [[decoder decodeObjectForKey: @"membersTid"] retain_stub];
    __membersTid_isset = YES;
  }
  if ([decoder containsValueForKey: @"headurl"])
  {
    __headurl = [[decoder decodeObjectForKey: @"headurl"] retain_stub];
    __headurl_isset = YES;
  }
  if ([decoder containsValueForKey: @"roomName"])
  {
    __roomName = [[decoder decodeObjectForKey: @"roomName"] retain_stub];
    __roomName_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"createTime"])
  {
    __createTime = [[decoder decodeObjectForKey: @"createTime"] retain_stub];
    __createTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraList"])
  {
    __extraList = [[decoder decodeObjectForKey: @"extraList"] retain_stub];
    __extraList_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tid_isset)
  {
    [encoder encodeObject: __tid forKey: @"tid"];
  }
  if (__founderTid_isset)
  {
    [encoder encodeObject: __founderTid forKey: @"founderTid"];
  }
  if (__HostsTid_isset)
  {
    [encoder encodeObject: __HostsTid forKey: @"HostsTid"];
  }
  if (__membersTid_isset)
  {
    [encoder encodeObject: __membersTid forKey: @"membersTid"];
  }
  if (__headurl_isset)
  {
    [encoder encodeObject: __headurl forKey: @"headurl"];
  }
  if (__roomName_isset)
  {
    [encoder encodeObject: __roomName forKey: @"roomName"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__createTime_isset)
  {
    [encoder encodeObject: __createTime forKey: @"createTime"];
  }
  if (__extraList_isset)
  {
    [encoder encodeObject: __extraList forKey: @"extraList"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __tid_isset ? 2654435761 : 0;
  if (__tid_isset)
  {
    hash = (hash * 31) ^ [__tid hash];
  }
  hash = (hash * 31) ^ __founderTid_isset ? 2654435761 : 0;
  if (__founderTid_isset)
  {
    hash = (hash * 31) ^ [__founderTid hash];
  }
  hash = (hash * 31) ^ __HostsTid_isset ? 2654435761 : 0;
  if (__HostsTid_isset)
  {
    hash = (hash * 31) ^ [__HostsTid hash];
  }
  hash = (hash * 31) ^ __membersTid_isset ? 2654435761 : 0;
  if (__membersTid_isset)
  {
    hash = (hash * 31) ^ [__membersTid hash];
  }
  hash = (hash * 31) ^ __headurl_isset ? 2654435761 : 0;
  if (__headurl_isset)
  {
    hash = (hash * 31) ^ [__headurl hash];
  }
  hash = (hash * 31) ^ __roomName_isset ? 2654435761 : 0;
  if (__roomName_isset)
  {
    hash = (hash * 31) ^ [__roomName hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  hash = (hash * 31) ^ __createTime_isset ? 2654435761 : 0;
  if (__createTime_isset)
  {
    hash = (hash * 31) ^ [__createTime hash];
  }
  hash = (hash * 31) ^ __extraList_isset ? 2654435761 : 0;
  if (__extraList_isset)
  {
    hash = (hash * 31) ^ [__extraList hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimRoom class]]) {
    return NO;
  }
  TimRoom *other = (TimRoom *)anObject;
  if ((__tid_isset != other->__tid_isset) ||
      (__tid_isset && ((__tid || other->__tid) && ![__tid isEqual:other->__tid]))) {
    return NO;
  }
  if ((__founderTid_isset != other->__founderTid_isset) ||
      (__founderTid_isset && ((__founderTid || other->__founderTid) && ![__founderTid isEqual:other->__founderTid]))) {
    return NO;
  }
  if ((__HostsTid_isset != other->__HostsTid_isset) ||
      (__HostsTid_isset && ((__HostsTid || other->__HostsTid) && ![__HostsTid isEqual:other->__HostsTid]))) {
    return NO;
  }
  if ((__membersTid_isset != other->__membersTid_isset) ||
      (__membersTid_isset && ((__membersTid || other->__membersTid) && ![__membersTid isEqual:other->__membersTid]))) {
    return NO;
  }
  if ((__headurl_isset != other->__headurl_isset) ||
      (__headurl_isset && ((__headurl || other->__headurl) && ![__headurl isEqual:other->__headurl]))) {
    return NO;
  }
  if ((__roomName_isset != other->__roomName_isset) ||
      (__roomName_isset && ((__roomName || other->__roomName) && ![__roomName isEqual:other->__roomName]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  if ((__createTime_isset != other->__createTime_isset) ||
      (__createTime_isset && ((__createTime || other->__createTime) && ![__createTime isEqual:other->__createTime]))) {
    return NO;
  }
  if ((__extraList_isset != other->__extraList_isset) ||
      (__extraList_isset && ((__extraList || other->__extraList) && ![__extraList isEqual:other->__extraList]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__tid release_stub];
  [__founderTid release_stub];
  [__HostsTid release_stub];
  [__membersTid release_stub];
  [__headurl release_stub];
  [__roomName release_stub];
  [__desc release_stub];
  [__createTime release_stub];
  [__extraList release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (Tid *) tid {
  return [[__tid retain_stub] autorelease_stub];
}

- (void) setTid: (Tid *) tid {
  [tid retain_stub];
  [__tid release_stub];
  __tid = tid;
  __tid_isset = YES;
}

- (BOOL) tidIsSet {
  return __tid_isset;
}

- (void) unsetTid {
  [__tid release_stub];
  __tid = nil;
  __tid_isset = NO;
}

- (Tid *) founderTid {
  return [[__founderTid retain_stub] autorelease_stub];
}

- (void) setFounderTid: (Tid *) founderTid {
  [founderTid retain_stub];
  [__founderTid release_stub];
  __founderTid = founderTid;
  __founderTid_isset = YES;
}

- (BOOL) founderTidIsSet {
  return __founderTid_isset;
}

- (void) unsetFounderTid {
  [__founderTid release_stub];
  __founderTid = nil;
  __founderTid_isset = NO;
}

- (NSMutableArray *) HostsTid {
  return [[__HostsTid retain_stub] autorelease_stub];
}

- (void) setHostsTid: (NSMutableArray *) HostsTid {
  [HostsTid retain_stub];
  [__HostsTid release_stub];
  __HostsTid = HostsTid;
  __HostsTid_isset = YES;
}

- (BOOL) HostsTidIsSet {
  return __HostsTid_isset;
}

- (void) unsetHostsTid {
  [__HostsTid release_stub];
  __HostsTid = nil;
  __HostsTid_isset = NO;
}

- (NSMutableArray *) membersTid {
  return [[__membersTid retain_stub] autorelease_stub];
}

- (void) setMembersTid: (NSMutableArray *) membersTid {
  [membersTid retain_stub];
  [__membersTid release_stub];
  __membersTid = membersTid;
  __membersTid_isset = YES;
}

- (BOOL) membersTidIsSet {
  return __membersTid_isset;
}

- (void) unsetMembersTid {
  [__membersTid release_stub];
  __membersTid = nil;
  __membersTid_isset = NO;
}

- (NSString *) headurl {
  return [[__headurl retain_stub] autorelease_stub];
}

- (void) setHeadurl: (NSString *) headurl {
  [headurl retain_stub];
  [__headurl release_stub];
  __headurl = headurl;
  __headurl_isset = YES;
}

- (BOOL) headurlIsSet {
  return __headurl_isset;
}

- (void) unsetHeadurl {
  [__headurl release_stub];
  __headurl = nil;
  __headurl_isset = NO;
}

- (NSString *) roomName {
  return [[__roomName retain_stub] autorelease_stub];
}

- (void) setRoomName: (NSString *) roomName {
  [roomName retain_stub];
  [__roomName release_stub];
  __roomName = roomName;
  __roomName_isset = YES;
}

- (BOOL) roomNameIsSet {
  return __roomName_isset;
}

- (void) unsetRoomName {
  [__roomName release_stub];
  __roomName = nil;
  __roomName_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (TimTime *) createTime {
  return [[__createTime retain_stub] autorelease_stub];
}

- (void) setCreateTime: (TimTime *) createTime {
  [createTime retain_stub];
  [__createTime release_stub];
  __createTime = createTime;
  __createTime_isset = YES;
}

- (BOOL) createTimeIsSet {
  return __createTime_isset;
}

- (void) unsetCreateTime {
  [__createTime release_stub];
  __createTime = nil;
  __createTime_isset = NO;
}

- (NSMutableArray *) extraList {
  return [[__extraList retain_stub] autorelease_stub];
}

- (void) setExtraList: (NSMutableArray *) extraList {
  [extraList retain_stub];
  [__extraList release_stub];
  __extraList = extraList;
  __extraList_isset = YES;
}

- (BOOL) extraListIsSet {
  return __extraList_isset;
}

- (void) unsetExtraList {
  [__extraList release_stub];
  __extraList = nil;
  __extraList_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setFounderTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size60;
          [inProtocol readListBeginReturningElementType: NULL size: &_size60];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size60];
          int _i61;
          for (_i61 = 0; _i61 < _size60; ++_i61)
          {
            Tid *_elem62 = [[Tid alloc] init];
            [_elem62 read: inProtocol];
            [fieldValue addObject: _elem62];
            [_elem62 release_stub];
          }
          [inProtocol readListEnd];
          [self setHostsTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size63;
          [inProtocol readListBeginReturningElementType: NULL size: &_size63];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size63];
          int _i64;
          for (_i64 = 0; _i64 < _size63; ++_i64)
          {
            Tid *_elem65 = [[Tid alloc] init];
            [_elem65 read: inProtocol];
            [fieldValue addObject: _elem65];
            [_elem65 release_stub];
          }
          [inProtocol readListEnd];
          [self setMembersTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHeadurl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRoomName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRUCT) {
          TimTime *fieldValue = [[TimTime alloc] init];
          [fieldValue read: inProtocol];
          [self setCreateTime: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_LIST) {
          int _size66;
          [inProtocol readListBeginReturningElementType: NULL size: &_size66];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size66];
          int _i67;
          for (_i67 = 0; _i67 < _size66; ++_i67)
          {
            TimNode *_elem68 = [[TimNode alloc] init];
            [_elem68 read: inProtocol];
            [fieldValue addObject: _elem68];
            [_elem68 release_stub];
          }
          [inProtocol readListEnd];
          [self setExtraList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_MAP) {
          int _size69;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size69];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size69];
          int _i70;
          for (_i70 = 0; _i70 < _size69; ++_i70)
          {
            NSString * _key71 = [inProtocol readString];
            NSString * _val72 = [inProtocol readString];
            [fieldValue setObject: _val72 forKey: _key71];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimRoom"];
  if (__tid_isset) {
    if (__tid != nil) {
      [outProtocol writeFieldBeginWithName: @"tid" type: TType_STRUCT fieldID: 1];
      [__tid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__founderTid_isset) {
    if (__founderTid != nil) {
      [outProtocol writeFieldBeginWithName: @"founderTid" type: TType_STRUCT fieldID: 2];
      [__founderTid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__HostsTid_isset) {
    if (__HostsTid != nil) {
      [outProtocol writeFieldBeginWithName: @"HostsTid" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__HostsTid count]];
        int idx74;
        for (idx74 = 0; idx74 < [__HostsTid count]; idx74++)
        {
          [[__HostsTid objectAtIndex: idx74] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__membersTid_isset) {
    if (__membersTid != nil) {
      [outProtocol writeFieldBeginWithName: @"membersTid" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__membersTid count]];
        int idx76;
        for (idx76 = 0; idx76 < [__membersTid count]; idx76++)
        {
          [[__membersTid objectAtIndex: idx76] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__headurl_isset) {
    if (__headurl != nil) {
      [outProtocol writeFieldBeginWithName: @"headurl" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __headurl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__roomName_isset) {
    if (__roomName != nil) {
      [outProtocol writeFieldBeginWithName: @"roomName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __roomName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__createTime_isset) {
    if (__createTime != nil) {
      [outProtocol writeFieldBeginWithName: @"createTime" type: TType_STRUCT fieldID: 8];
      [__createTime write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraList_isset) {
    if (__extraList != nil) {
      [outProtocol writeFieldBeginWithName: @"extraList" type: TType_LIST fieldID: 9];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__extraList count]];
        int idx78;
        for (idx78 = 0; idx78 < [__extraList count]; idx78++)
        {
          [[__extraList objectAtIndex: idx78] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 10];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter79 = [__extraMap keyEnumerator];
        id key80;
        while ((key80 = [_iter79 nextObject]))
        {
          [outProtocol writeString: key80];
          [outProtocol writeString: [__extraMap objectForKey: key80]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimRoom("];
  [ms appendString: @"tid:"];
  [ms appendFormat: @"%@", __tid];
  [ms appendString: @",founderTid:"];
  [ms appendFormat: @"%@", __founderTid];
  [ms appendString: @",HostsTid:"];
  [ms appendFormat: @"%@", __HostsTid];
  [ms appendString: @",membersTid:"];
  [ms appendFormat: @"%@", __membersTid];
  [ms appendString: @",headurl:"];
  [ms appendFormat: @"\"%@\"", __headurl];
  [ms appendString: @",roomName:"];
  [ms appendFormat: @"\"%@\"", __roomName];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",createTime:"];
  [ms appendFormat: @"%@", __createTime];
  [ms appendString: @",extraList:"];
  [ms appendFormat: @"%@", __extraList];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimPBean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThreadId: (NSString *) threadId fromTid: (Tid *) fromTid toTid: (Tid *) toTid status: (NSString *) status type: (NSString *) type priority: (int32_t) priority show: (NSString *) show leaguerTid: (Tid *) leaguerTid extraList: (NSMutableArray *) extraList error: (TimError *) error extraMap: (NSMutableDictionary *) extraMap
{
  self = [super init];
  __threadId = [threadId retain_stub];
  __threadId_isset = YES;
  __fromTid = [fromTid retain_stub];
  __fromTid_isset = YES;
  __toTid = [toTid retain_stub];
  __toTid_isset = YES;
  __status = [status retain_stub];
  __status_isset = YES;
  __type = [type retain_stub];
  __type_isset = YES;
  __priority = priority;
  __priority_isset = YES;
  __show = [show retain_stub];
  __show_isset = YES;
  __leaguerTid = [leaguerTid retain_stub];
  __leaguerTid_isset = YES;
  __extraList = [extraList retain_stub];
  __extraList_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"threadId"])
  {
    __threadId = [[decoder decodeObjectForKey: @"threadId"] retain_stub];
    __threadId_isset = YES;
  }
  if ([decoder containsValueForKey: @"fromTid"])
  {
    __fromTid = [[decoder decodeObjectForKey: @"fromTid"] retain_stub];
    __fromTid_isset = YES;
  }
  if ([decoder containsValueForKey: @"toTid"])
  {
    __toTid = [[decoder decodeObjectForKey: @"toTid"] retain_stub];
    __toTid_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [[decoder decodeObjectForKey: @"status"] retain_stub];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain_stub];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"priority"])
  {
    __priority = [decoder decodeInt32ForKey: @"priority"];
    __priority_isset = YES;
  }
  if ([decoder containsValueForKey: @"show"])
  {
    __show = [[decoder decodeObjectForKey: @"show"] retain_stub];
    __show_isset = YES;
  }
  if ([decoder containsValueForKey: @"leaguerTid"])
  {
    __leaguerTid = [[decoder decodeObjectForKey: @"leaguerTid"] retain_stub];
    __leaguerTid_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraList"])
  {
    __extraList = [[decoder decodeObjectForKey: @"extraList"] retain_stub];
    __extraList_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__threadId_isset)
  {
    [encoder encodeObject: __threadId forKey: @"threadId"];
  }
  if (__fromTid_isset)
  {
    [encoder encodeObject: __fromTid forKey: @"fromTid"];
  }
  if (__toTid_isset)
  {
    [encoder encodeObject: __toTid forKey: @"toTid"];
  }
  if (__status_isset)
  {
    [encoder encodeObject: __status forKey: @"status"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__priority_isset)
  {
    [encoder encodeInt32: __priority forKey: @"priority"];
  }
  if (__show_isset)
  {
    [encoder encodeObject: __show forKey: @"show"];
  }
  if (__leaguerTid_isset)
  {
    [encoder encodeObject: __leaguerTid forKey: @"leaguerTid"];
  }
  if (__extraList_isset)
  {
    [encoder encodeObject: __extraList forKey: @"extraList"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __threadId_isset ? 2654435761 : 0;
  if (__threadId_isset)
  {
    hash = (hash * 31) ^ [__threadId hash];
  }
  hash = (hash * 31) ^ __fromTid_isset ? 2654435761 : 0;
  if (__fromTid_isset)
  {
    hash = (hash * 31) ^ [__fromTid hash];
  }
  hash = (hash * 31) ^ __toTid_isset ? 2654435761 : 0;
  if (__toTid_isset)
  {
    hash = (hash * 31) ^ [__toTid hash];
  }
  hash = (hash * 31) ^ __status_isset ? 2654435761 : 0;
  if (__status_isset)
  {
    hash = (hash * 31) ^ [__status hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [__type hash];
  }
  hash = (hash * 31) ^ __priority_isset ? 2654435761 : 0;
  if (__priority_isset)
  {
    hash = (hash * 31) ^ [@(__priority) hash];
  }
  hash = (hash * 31) ^ __show_isset ? 2654435761 : 0;
  if (__show_isset)
  {
    hash = (hash * 31) ^ [__show hash];
  }
  hash = (hash * 31) ^ __leaguerTid_isset ? 2654435761 : 0;
  if (__leaguerTid_isset)
  {
    hash = (hash * 31) ^ [__leaguerTid hash];
  }
  hash = (hash * 31) ^ __extraList_isset ? 2654435761 : 0;
  if (__extraList_isset)
  {
    hash = (hash * 31) ^ [__extraList hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimPBean class]]) {
    return NO;
  }
  TimPBean *other = (TimPBean *)anObject;
  if ((__threadId_isset != other->__threadId_isset) ||
      (__threadId_isset && ((__threadId || other->__threadId) && ![__threadId isEqual:other->__threadId]))) {
    return NO;
  }
  if ((__fromTid_isset != other->__fromTid_isset) ||
      (__fromTid_isset && ((__fromTid || other->__fromTid) && ![__fromTid isEqual:other->__fromTid]))) {
    return NO;
  }
  if ((__toTid_isset != other->__toTid_isset) ||
      (__toTid_isset && ((__toTid || other->__toTid) && ![__toTid isEqual:other->__toTid]))) {
    return NO;
  }
  if ((__status_isset != other->__status_isset) ||
      (__status_isset && ((__status || other->__status) && ![__status isEqual:other->__status]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && ((__type || other->__type) && ![__type isEqual:other->__type]))) {
    return NO;
  }
  if ((__priority_isset != other->__priority_isset) ||
      (__priority_isset && (__priority != other->__priority))) {
    return NO;
  }
  if ((__show_isset != other->__show_isset) ||
      (__show_isset && ((__show || other->__show) && ![__show isEqual:other->__show]))) {
    return NO;
  }
  if ((__leaguerTid_isset != other->__leaguerTid_isset) ||
      (__leaguerTid_isset && ((__leaguerTid || other->__leaguerTid) && ![__leaguerTid isEqual:other->__leaguerTid]))) {
    return NO;
  }
  if ((__extraList_isset != other->__extraList_isset) ||
      (__extraList_isset && ((__extraList || other->__extraList) && ![__extraList isEqual:other->__extraList]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__threadId release_stub];
  [__fromTid release_stub];
  [__toTid release_stub];
  [__status release_stub];
  [__type release_stub];
  [__show release_stub];
  [__leaguerTid release_stub];
  [__extraList release_stub];
  [__error release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (NSString *) threadId {
  return [[__threadId retain_stub] autorelease_stub];
}

- (void) setThreadId: (NSString *) threadId {
  [threadId retain_stub];
  [__threadId release_stub];
  __threadId = threadId;
  __threadId_isset = YES;
}

- (BOOL) threadIdIsSet {
  return __threadId_isset;
}

- (void) unsetThreadId {
  [__threadId release_stub];
  __threadId = nil;
  __threadId_isset = NO;
}

- (Tid *) fromTid {
  return [[__fromTid retain_stub] autorelease_stub];
}

- (void) setFromTid: (Tid *) fromTid {
  [fromTid retain_stub];
  [__fromTid release_stub];
  __fromTid = fromTid;
  __fromTid_isset = YES;
}

- (BOOL) fromTidIsSet {
  return __fromTid_isset;
}

- (void) unsetFromTid {
  [__fromTid release_stub];
  __fromTid = nil;
  __fromTid_isset = NO;
}

- (Tid *) toTid {
  return [[__toTid retain_stub] autorelease_stub];
}

- (void) setToTid: (Tid *) toTid {
  [toTid retain_stub];
  [__toTid release_stub];
  __toTid = toTid;
  __toTid_isset = YES;
}

- (BOOL) toTidIsSet {
  return __toTid_isset;
}

- (void) unsetToTid {
  [__toTid release_stub];
  __toTid = nil;
  __toTid_isset = NO;
}

- (NSString *) status {
  return [[__status retain_stub] autorelease_stub];
}

- (void) setStatus: (NSString *) status {
  [status retain_stub];
  [__status release_stub];
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  [__status release_stub];
  __status = nil;
  __status_isset = NO;
}

- (NSString *) type {
  return [[__type retain_stub] autorelease_stub];
}

- (void) setType: (NSString *) type {
  [type retain_stub];
  [__type release_stub];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release_stub];
  __type = nil;
  __type_isset = NO;
}

- (int32_t) priority {
  return __priority;
}

- (void) setPriority: (int32_t) priority {
  __priority = priority;
  __priority_isset = YES;
}

- (BOOL) priorityIsSet {
  return __priority_isset;
}

- (void) unsetPriority {
  __priority_isset = NO;
}

- (NSString *) show {
  return [[__show retain_stub] autorelease_stub];
}

- (void) setShow: (NSString *) show {
  [show retain_stub];
  [__show release_stub];
  __show = show;
  __show_isset = YES;
}

- (BOOL) showIsSet {
  return __show_isset;
}

- (void) unsetShow {
  [__show release_stub];
  __show = nil;
  __show_isset = NO;
}

- (Tid *) leaguerTid {
  return [[__leaguerTid retain_stub] autorelease_stub];
}

- (void) setLeaguerTid: (Tid *) leaguerTid {
  [leaguerTid retain_stub];
  [__leaguerTid release_stub];
  __leaguerTid = leaguerTid;
  __leaguerTid_isset = YES;
}

- (BOOL) leaguerTidIsSet {
  return __leaguerTid_isset;
}

- (void) unsetLeaguerTid {
  [__leaguerTid release_stub];
  __leaguerTid = nil;
  __leaguerTid_isset = NO;
}

- (NSMutableArray *) extraList {
  return [[__extraList retain_stub] autorelease_stub];
}

- (void) setExtraList: (NSMutableArray *) extraList {
  [extraList retain_stub];
  [__extraList release_stub];
  __extraList = extraList;
  __extraList_isset = YES;
}

- (BOOL) extraListIsSet {
  return __extraList_isset;
}

- (void) unsetExtraList {
  [__extraList release_stub];
  __extraList = nil;
  __extraList_isset = NO;
}

- (TimError *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (TimError *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setThreadId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setFromTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setToTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPriority: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setShow: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setLeaguerTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_LIST) {
          int _size81;
          [inProtocol readListBeginReturningElementType: NULL size: &_size81];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size81];
          int _i82;
          for (_i82 = 0; _i82 < _size81; ++_i82)
          {
            TimNode *_elem83 = [[TimNode alloc] init];
            [_elem83 read: inProtocol];
            [fieldValue addObject: _elem83];
            [_elem83 release_stub];
          }
          [inProtocol readListEnd];
          [self setExtraList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRUCT) {
          TimError *fieldValue = [[TimError alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_MAP) {
          int _size84;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size84];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size84];
          int _i85;
          for (_i85 = 0; _i85 < _size84; ++_i85)
          {
            NSString * _key86 = [inProtocol readString];
            NSString * _val87 = [inProtocol readString];
            [fieldValue setObject: _val87 forKey: _key86];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimPBean"];
  if (__threadId_isset) {
    if (__threadId != nil) {
      [outProtocol writeFieldBeginWithName: @"threadId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __threadId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fromTid_isset) {
    if (__fromTid != nil) {
      [outProtocol writeFieldBeginWithName: @"fromTid" type: TType_STRUCT fieldID: 2];
      [__fromTid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__toTid_isset) {
    if (__toTid != nil) {
      [outProtocol writeFieldBeginWithName: @"toTid" type: TType_STRUCT fieldID: 3];
      [__toTid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__status_isset) {
    if (__status != nil) {
      [outProtocol writeFieldBeginWithName: @"status" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __status];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__priority_isset) {
    [outProtocol writeFieldBeginWithName: @"priority" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __priority];
    [outProtocol writeFieldEnd];
  }
  if (__show_isset) {
    if (__show != nil) {
      [outProtocol writeFieldBeginWithName: @"show" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __show];
      [outProtocol writeFieldEnd];
    }
  }
  if (__leaguerTid_isset) {
    if (__leaguerTid != nil) {
      [outProtocol writeFieldBeginWithName: @"leaguerTid" type: TType_STRUCT fieldID: 8];
      [__leaguerTid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraList_isset) {
    if (__extraList != nil) {
      [outProtocol writeFieldBeginWithName: @"extraList" type: TType_LIST fieldID: 9];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__extraList count]];
        int idx89;
        for (idx89 = 0; idx89 < [__extraList count]; idx89++)
        {
          [[__extraList objectAtIndex: idx89] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 10];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 11];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter90 = [__extraMap keyEnumerator];
        id key91;
        while ((key91 = [_iter90 nextObject]))
        {
          [outProtocol writeString: key91];
          [outProtocol writeString: [__extraMap objectForKey: key91]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__threadId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'threadId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimPBean("];
  [ms appendString: @"threadId:"];
  [ms appendFormat: @"\"%@\"", __threadId];
  [ms appendString: @",fromTid:"];
  [ms appendFormat: @"%@", __fromTid];
  [ms appendString: @",toTid:"];
  [ms appendFormat: @"%@", __toTid];
  [ms appendString: @",status:"];
  [ms appendFormat: @"\"%@\"", __status];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",priority:"];
  [ms appendFormat: @"%i", __priority];
  [ms appendString: @",show:"];
  [ms appendFormat: @"\"%@\"", __show];
  [ms appendString: @",leaguerTid:"];
  [ms appendFormat: @"%@", __leaguerTid];
  [ms appendString: @",extraList:"];
  [ms appendFormat: @"%@", __extraList];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimMBean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThreadId: (NSString *) threadId mid: (NSString *) mid fromTid: (Tid *) fromTid toTid: (Tid *) toTid body: (NSString *) body type: (NSString *) type msgType: (int16_t) msgType offline: (TimTime *) offline leaguerTid: (Tid *) leaguerTid extraList: (NSMutableArray *) extraList timestamp: (NSString *) timestamp error: (TimError *) error extraMap: (NSMutableDictionary *) extraMap readstatus: (int16_t) readstatus
{
  self = [super init];
  __threadId = [threadId retain_stub];
  __threadId_isset = YES;
  __mid = [mid retain_stub];
  __mid_isset = YES;
  __fromTid = [fromTid retain_stub];
  __fromTid_isset = YES;
  __toTid = [toTid retain_stub];
  __toTid_isset = YES;
  __body = [body retain_stub];
  __body_isset = YES;
  __type = [type retain_stub];
  __type_isset = YES;
  __msgType = msgType;
  __msgType_isset = YES;
  __offline = [offline retain_stub];
  __offline_isset = YES;
  __leaguerTid = [leaguerTid retain_stub];
  __leaguerTid_isset = YES;
  __extraList = [extraList retain_stub];
  __extraList_isset = YES;
  __timestamp = [timestamp retain_stub];
  __timestamp_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  __readstatus = readstatus;
  __readstatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"threadId"])
  {
    __threadId = [[decoder decodeObjectForKey: @"threadId"] retain_stub];
    __threadId_isset = YES;
  }
  if ([decoder containsValueForKey: @"mid"])
  {
    __mid = [[decoder decodeObjectForKey: @"mid"] retain_stub];
    __mid_isset = YES;
  }
  if ([decoder containsValueForKey: @"fromTid"])
  {
    __fromTid = [[decoder decodeObjectForKey: @"fromTid"] retain_stub];
    __fromTid_isset = YES;
  }
  if ([decoder containsValueForKey: @"toTid"])
  {
    __toTid = [[decoder decodeObjectForKey: @"toTid"] retain_stub];
    __toTid_isset = YES;
  }
  if ([decoder containsValueForKey: @"body"])
  {
    __body = [[decoder decodeObjectForKey: @"body"] retain_stub];
    __body_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain_stub];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"msgType"])
  {
    __msgType = [decoder decodeIntForKey: @"msgType"];
    __msgType_isset = YES;
  }
  if ([decoder containsValueForKey: @"offline"])
  {
    __offline = [[decoder decodeObjectForKey: @"offline"] retain_stub];
    __offline_isset = YES;
  }
  if ([decoder containsValueForKey: @"leaguerTid"])
  {
    __leaguerTid = [[decoder decodeObjectForKey: @"leaguerTid"] retain_stub];
    __leaguerTid_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraList"])
  {
    __extraList = [[decoder decodeObjectForKey: @"extraList"] retain_stub];
    __extraList_isset = YES;
  }
  if ([decoder containsValueForKey: @"timestamp"])
  {
    __timestamp = [[decoder decodeObjectForKey: @"timestamp"] retain_stub];
    __timestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  if ([decoder containsValueForKey: @"readstatus"])
  {
    __readstatus = [decoder decodeIntForKey: @"readstatus"];
    __readstatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__threadId_isset)
  {
    [encoder encodeObject: __threadId forKey: @"threadId"];
  }
  if (__mid_isset)
  {
    [encoder encodeObject: __mid forKey: @"mid"];
  }
  if (__fromTid_isset)
  {
    [encoder encodeObject: __fromTid forKey: @"fromTid"];
  }
  if (__toTid_isset)
  {
    [encoder encodeObject: __toTid forKey: @"toTid"];
  }
  if (__body_isset)
  {
    [encoder encodeObject: __body forKey: @"body"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__msgType_isset)
  {
    [encoder encodeInt: __msgType forKey: @"msgType"];
  }
  if (__offline_isset)
  {
    [encoder encodeObject: __offline forKey: @"offline"];
  }
  if (__leaguerTid_isset)
  {
    [encoder encodeObject: __leaguerTid forKey: @"leaguerTid"];
  }
  if (__extraList_isset)
  {
    [encoder encodeObject: __extraList forKey: @"extraList"];
  }
  if (__timestamp_isset)
  {
    [encoder encodeObject: __timestamp forKey: @"timestamp"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
  if (__readstatus_isset)
  {
    [encoder encodeInt: __readstatus forKey: @"readstatus"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __threadId_isset ? 2654435761 : 0;
  if (__threadId_isset)
  {
    hash = (hash * 31) ^ [__threadId hash];
  }
  hash = (hash * 31) ^ __mid_isset ? 2654435761 : 0;
  if (__mid_isset)
  {
    hash = (hash * 31) ^ [__mid hash];
  }
  hash = (hash * 31) ^ __fromTid_isset ? 2654435761 : 0;
  if (__fromTid_isset)
  {
    hash = (hash * 31) ^ [__fromTid hash];
  }
  hash = (hash * 31) ^ __toTid_isset ? 2654435761 : 0;
  if (__toTid_isset)
  {
    hash = (hash * 31) ^ [__toTid hash];
  }
  hash = (hash * 31) ^ __body_isset ? 2654435761 : 0;
  if (__body_isset)
  {
    hash = (hash * 31) ^ [__body hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [__type hash];
  }
  hash = (hash * 31) ^ __msgType_isset ? 2654435761 : 0;
  if (__msgType_isset)
  {
    hash = (hash * 31) ^ [@(__msgType) hash];
  }
  hash = (hash * 31) ^ __offline_isset ? 2654435761 : 0;
  if (__offline_isset)
  {
    hash = (hash * 31) ^ [__offline hash];
  }
  hash = (hash * 31) ^ __leaguerTid_isset ? 2654435761 : 0;
  if (__leaguerTid_isset)
  {
    hash = (hash * 31) ^ [__leaguerTid hash];
  }
  hash = (hash * 31) ^ __extraList_isset ? 2654435761 : 0;
  if (__extraList_isset)
  {
    hash = (hash * 31) ^ [__extraList hash];
  }
  hash = (hash * 31) ^ __timestamp_isset ? 2654435761 : 0;
  if (__timestamp_isset)
  {
    hash = (hash * 31) ^ [__timestamp hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  hash = (hash * 31) ^ __readstatus_isset ? 2654435761 : 0;
  if (__readstatus_isset)
  {
    hash = (hash * 31) ^ [@(__readstatus) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimMBean class]]) {
    return NO;
  }
  TimMBean *other = (TimMBean *)anObject;
  if ((__threadId_isset != other->__threadId_isset) ||
      (__threadId_isset && ((__threadId || other->__threadId) && ![__threadId isEqual:other->__threadId]))) {
    return NO;
  }
  if ((__mid_isset != other->__mid_isset) ||
      (__mid_isset && ((__mid || other->__mid) && ![__mid isEqual:other->__mid]))) {
    return NO;
  }
  if ((__fromTid_isset != other->__fromTid_isset) ||
      (__fromTid_isset && ((__fromTid || other->__fromTid) && ![__fromTid isEqual:other->__fromTid]))) {
    return NO;
  }
  if ((__toTid_isset != other->__toTid_isset) ||
      (__toTid_isset && ((__toTid || other->__toTid) && ![__toTid isEqual:other->__toTid]))) {
    return NO;
  }
  if ((__body_isset != other->__body_isset) ||
      (__body_isset && ((__body || other->__body) && ![__body isEqual:other->__body]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && ((__type || other->__type) && ![__type isEqual:other->__type]))) {
    return NO;
  }
  if ((__msgType_isset != other->__msgType_isset) ||
      (__msgType_isset && (__msgType != other->__msgType))) {
    return NO;
  }
  if ((__offline_isset != other->__offline_isset) ||
      (__offline_isset && ((__offline || other->__offline) && ![__offline isEqual:other->__offline]))) {
    return NO;
  }
  if ((__leaguerTid_isset != other->__leaguerTid_isset) ||
      (__leaguerTid_isset && ((__leaguerTid || other->__leaguerTid) && ![__leaguerTid isEqual:other->__leaguerTid]))) {
    return NO;
  }
  if ((__extraList_isset != other->__extraList_isset) ||
      (__extraList_isset && ((__extraList || other->__extraList) && ![__extraList isEqual:other->__extraList]))) {
    return NO;
  }
  if ((__timestamp_isset != other->__timestamp_isset) ||
      (__timestamp_isset && ((__timestamp || other->__timestamp) && ![__timestamp isEqual:other->__timestamp]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  if ((__readstatus_isset != other->__readstatus_isset) ||
      (__readstatus_isset && (__readstatus != other->__readstatus))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__threadId release_stub];
  [__mid release_stub];
  [__fromTid release_stub];
  [__toTid release_stub];
  [__body release_stub];
  [__type release_stub];
  [__offline release_stub];
  [__leaguerTid release_stub];
  [__extraList release_stub];
  [__timestamp release_stub];
  [__error release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (NSString *) threadId {
  return [[__threadId retain_stub] autorelease_stub];
}

- (void) setThreadId: (NSString *) threadId {
  [threadId retain_stub];
  [__threadId release_stub];
  __threadId = threadId;
  __threadId_isset = YES;
}

- (BOOL) threadIdIsSet {
  return __threadId_isset;
}

- (void) unsetThreadId {
  [__threadId release_stub];
  __threadId = nil;
  __threadId_isset = NO;
}

- (NSString *) mid {
  return [[__mid retain_stub] autorelease_stub];
}

- (void) setMid: (NSString *) mid {
  [mid retain_stub];
  [__mid release_stub];
  __mid = mid;
  __mid_isset = YES;
}

- (BOOL) midIsSet {
  return __mid_isset;
}

- (void) unsetMid {
  [__mid release_stub];
  __mid = nil;
  __mid_isset = NO;
}

- (Tid *) fromTid {
  return [[__fromTid retain_stub] autorelease_stub];
}

- (void) setFromTid: (Tid *) fromTid {
  [fromTid retain_stub];
  [__fromTid release_stub];
  __fromTid = fromTid;
  __fromTid_isset = YES;
}

- (BOOL) fromTidIsSet {
  return __fromTid_isset;
}

- (void) unsetFromTid {
  [__fromTid release_stub];
  __fromTid = nil;
  __fromTid_isset = NO;
}

- (Tid *) toTid {
  return [[__toTid retain_stub] autorelease_stub];
}

- (void) setToTid: (Tid *) toTid {
  [toTid retain_stub];
  [__toTid release_stub];
  __toTid = toTid;
  __toTid_isset = YES;
}

- (BOOL) toTidIsSet {
  return __toTid_isset;
}

- (void) unsetToTid {
  [__toTid release_stub];
  __toTid = nil;
  __toTid_isset = NO;
}

- (NSString *) body {
  return [[__body retain_stub] autorelease_stub];
}

- (void) setBody: (NSString *) body {
  [body retain_stub];
  [__body release_stub];
  __body = body;
  __body_isset = YES;
}

- (BOOL) bodyIsSet {
  return __body_isset;
}

- (void) unsetBody {
  [__body release_stub];
  __body = nil;
  __body_isset = NO;
}

- (NSString *) type {
  return [[__type retain_stub] autorelease_stub];
}

- (void) setType: (NSString *) type {
  [type retain_stub];
  [__type release_stub];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release_stub];
  __type = nil;
  __type_isset = NO;
}

- (int16_t) msgType {
  return __msgType;
}

- (void) setMsgType: (int16_t) msgType {
  __msgType = msgType;
  __msgType_isset = YES;
}

- (BOOL) msgTypeIsSet {
  return __msgType_isset;
}

- (void) unsetMsgType {
  __msgType_isset = NO;
}

- (TimTime *) offline {
  return [[__offline retain_stub] autorelease_stub];
}

- (void) setOffline: (TimTime *) offline {
  [offline retain_stub];
  [__offline release_stub];
  __offline = offline;
  __offline_isset = YES;
}

- (BOOL) offlineIsSet {
  return __offline_isset;
}

- (void) unsetOffline {
  [__offline release_stub];
  __offline = nil;
  __offline_isset = NO;
}

- (Tid *) leaguerTid {
  return [[__leaguerTid retain_stub] autorelease_stub];
}

- (void) setLeaguerTid: (Tid *) leaguerTid {
  [leaguerTid retain_stub];
  [__leaguerTid release_stub];
  __leaguerTid = leaguerTid;
  __leaguerTid_isset = YES;
}

- (BOOL) leaguerTidIsSet {
  return __leaguerTid_isset;
}

- (void) unsetLeaguerTid {
  [__leaguerTid release_stub];
  __leaguerTid = nil;
  __leaguerTid_isset = NO;
}

- (NSMutableArray *) extraList {
  return [[__extraList retain_stub] autorelease_stub];
}

- (void) setExtraList: (NSMutableArray *) extraList {
  [extraList retain_stub];
  [__extraList release_stub];
  __extraList = extraList;
  __extraList_isset = YES;
}

- (BOOL) extraListIsSet {
  return __extraList_isset;
}

- (void) unsetExtraList {
  [__extraList release_stub];
  __extraList = nil;
  __extraList_isset = NO;
}

- (NSString *) timestamp {
  return [[__timestamp retain_stub] autorelease_stub];
}

- (void) setTimestamp: (NSString *) timestamp {
  [timestamp retain_stub];
  [__timestamp release_stub];
  __timestamp = timestamp;
  __timestamp_isset = YES;
}

- (BOOL) timestampIsSet {
  return __timestamp_isset;
}

- (void) unsetTimestamp {
  [__timestamp release_stub];
  __timestamp = nil;
  __timestamp_isset = NO;
}

- (TimError *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (TimError *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (int16_t) readstatus {
  return __readstatus;
}

- (void) setReadstatus: (int16_t) readstatus {
  __readstatus = readstatus;
  __readstatus_isset = YES;
}

- (BOOL) readstatusIsSet {
  return __readstatus_isset;
}

- (void) unsetReadstatus {
  __readstatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setThreadId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setFromTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setToTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setMsgType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRUCT) {
          TimTime *fieldValue = [[TimTime alloc] init];
          [fieldValue read: inProtocol];
          [self setOffline: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setLeaguerTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_LIST) {
          int _size92;
          [inProtocol readListBeginReturningElementType: NULL size: &_size92];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size92];
          int _i93;
          for (_i93 = 0; _i93 < _size92; ++_i93)
          {
            TimNode *_elem94 = [[TimNode alloc] init];
            [_elem94 read: inProtocol];
            [fieldValue addObject: _elem94];
            [_elem94 release_stub];
          }
          [inProtocol readListEnd];
          [self setExtraList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRUCT) {
          TimError *fieldValue = [[TimError alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_MAP) {
          int _size95;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size95];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size95];
          int _i96;
          for (_i96 = 0; _i96 < _size95; ++_i96)
          {
            NSString * _key97 = [inProtocol readString];
            NSString * _val98 = [inProtocol readString];
            [fieldValue setObject: _val98 forKey: _key97];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setReadstatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimMBean"];
  if (__threadId_isset) {
    if (__threadId != nil) {
      [outProtocol writeFieldBeginWithName: @"threadId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __threadId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mid_isset) {
    if (__mid != nil) {
      [outProtocol writeFieldBeginWithName: @"mid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __mid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fromTid_isset) {
    if (__fromTid != nil) {
      [outProtocol writeFieldBeginWithName: @"fromTid" type: TType_STRUCT fieldID: 3];
      [__fromTid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__toTid_isset) {
    if (__toTid != nil) {
      [outProtocol writeFieldBeginWithName: @"toTid" type: TType_STRUCT fieldID: 4];
      [__toTid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__body_isset) {
    if (__body != nil) {
      [outProtocol writeFieldBeginWithName: @"body" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __body];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__msgType_isset) {
    [outProtocol writeFieldBeginWithName: @"msgType" type: TType_I16 fieldID: 7];
    [outProtocol writeI16: __msgType];
    [outProtocol writeFieldEnd];
  }
  if (__offline_isset) {
    if (__offline != nil) {
      [outProtocol writeFieldBeginWithName: @"offline" type: TType_STRUCT fieldID: 8];
      [__offline write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__leaguerTid_isset) {
    if (__leaguerTid != nil) {
      [outProtocol writeFieldBeginWithName: @"leaguerTid" type: TType_STRUCT fieldID: 9];
      [__leaguerTid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraList_isset) {
    if (__extraList != nil) {
      [outProtocol writeFieldBeginWithName: @"extraList" type: TType_LIST fieldID: 10];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__extraList count]];
        int idx100;
        for (idx100 = 0; idx100 < [__extraList count]; idx100++)
        {
          [[__extraList objectAtIndex: idx100] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__timestamp_isset) {
    if (__timestamp != nil) {
      [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __timestamp];
      [outProtocol writeFieldEnd];
    }
  }
  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 12];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 13];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter101 = [__extraMap keyEnumerator];
        id key102;
        while ((key102 = [_iter101 nextObject]))
        {
          [outProtocol writeString: key102];
          [outProtocol writeString: [__extraMap objectForKey: key102]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__readstatus_isset) {
    [outProtocol writeFieldBeginWithName: @"readstatus" type: TType_I16 fieldID: 14];
    [outProtocol writeI16: __readstatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__threadId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'threadId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimMBean("];
  [ms appendString: @"threadId:"];
  [ms appendFormat: @"\"%@\"", __threadId];
  [ms appendString: @",mid:"];
  [ms appendFormat: @"\"%@\"", __mid];
  [ms appendString: @",fromTid:"];
  [ms appendFormat: @"%@", __fromTid];
  [ms appendString: @",toTid:"];
  [ms appendFormat: @"%@", __toTid];
  [ms appendString: @",body:"];
  [ms appendFormat: @"\"%@\"", __body];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",msgType:"];
  [ms appendFormat: @"%hi", __msgType];
  [ms appendString: @",offline:"];
  [ms appendFormat: @"%@", __offline];
  [ms appendString: @",leaguerTid:"];
  [ms appendFormat: @"%@", __leaguerTid];
  [ms appendString: @",extraList:"];
  [ms appendFormat: @"%@", __extraList];
  [ms appendString: @",timestamp:"];
  [ms appendFormat: @"\"%@\"", __timestamp];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @",readstatus:"];
  [ms appendFormat: @"%hi", __readstatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimIqBean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThreadId: (NSString *) threadId fromTid: (Tid *) fromTid toTid: (Tid *) toTid type: (NSString *) type extraList: (NSMutableArray *) extraList error: (TimError *) error extraMap: (NSMutableDictionary *) extraMap
{
  self = [super init];
  __threadId = [threadId retain_stub];
  __threadId_isset = YES;
  __fromTid = [fromTid retain_stub];
  __fromTid_isset = YES;
  __toTid = [toTid retain_stub];
  __toTid_isset = YES;
  __type = [type retain_stub];
  __type_isset = YES;
  __extraList = [extraList retain_stub];
  __extraList_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"threadId"])
  {
    __threadId = [[decoder decodeObjectForKey: @"threadId"] retain_stub];
    __threadId_isset = YES;
  }
  if ([decoder containsValueForKey: @"fromTid"])
  {
    __fromTid = [[decoder decodeObjectForKey: @"fromTid"] retain_stub];
    __fromTid_isset = YES;
  }
  if ([decoder containsValueForKey: @"toTid"])
  {
    __toTid = [[decoder decodeObjectForKey: @"toTid"] retain_stub];
    __toTid_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain_stub];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraList"])
  {
    __extraList = [[decoder decodeObjectForKey: @"extraList"] retain_stub];
    __extraList_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__threadId_isset)
  {
    [encoder encodeObject: __threadId forKey: @"threadId"];
  }
  if (__fromTid_isset)
  {
    [encoder encodeObject: __fromTid forKey: @"fromTid"];
  }
  if (__toTid_isset)
  {
    [encoder encodeObject: __toTid forKey: @"toTid"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__extraList_isset)
  {
    [encoder encodeObject: __extraList forKey: @"extraList"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __threadId_isset ? 2654435761 : 0;
  if (__threadId_isset)
  {
    hash = (hash * 31) ^ [__threadId hash];
  }
  hash = (hash * 31) ^ __fromTid_isset ? 2654435761 : 0;
  if (__fromTid_isset)
  {
    hash = (hash * 31) ^ [__fromTid hash];
  }
  hash = (hash * 31) ^ __toTid_isset ? 2654435761 : 0;
  if (__toTid_isset)
  {
    hash = (hash * 31) ^ [__toTid hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [__type hash];
  }
  hash = (hash * 31) ^ __extraList_isset ? 2654435761 : 0;
  if (__extraList_isset)
  {
    hash = (hash * 31) ^ [__extraList hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimIqBean class]]) {
    return NO;
  }
  TimIqBean *other = (TimIqBean *)anObject;
  if ((__threadId_isset != other->__threadId_isset) ||
      (__threadId_isset && ((__threadId || other->__threadId) && ![__threadId isEqual:other->__threadId]))) {
    return NO;
  }
  if ((__fromTid_isset != other->__fromTid_isset) ||
      (__fromTid_isset && ((__fromTid || other->__fromTid) && ![__fromTid isEqual:other->__fromTid]))) {
    return NO;
  }
  if ((__toTid_isset != other->__toTid_isset) ||
      (__toTid_isset && ((__toTid || other->__toTid) && ![__toTid isEqual:other->__toTid]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && ((__type || other->__type) && ![__type isEqual:other->__type]))) {
    return NO;
  }
  if ((__extraList_isset != other->__extraList_isset) ||
      (__extraList_isset && ((__extraList || other->__extraList) && ![__extraList isEqual:other->__extraList]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__threadId release_stub];
  [__fromTid release_stub];
  [__toTid release_stub];
  [__type release_stub];
  [__extraList release_stub];
  [__error release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (NSString *) threadId {
  return [[__threadId retain_stub] autorelease_stub];
}

- (void) setThreadId: (NSString *) threadId {
  [threadId retain_stub];
  [__threadId release_stub];
  __threadId = threadId;
  __threadId_isset = YES;
}

- (BOOL) threadIdIsSet {
  return __threadId_isset;
}

- (void) unsetThreadId {
  [__threadId release_stub];
  __threadId = nil;
  __threadId_isset = NO;
}

- (Tid *) fromTid {
  return [[__fromTid retain_stub] autorelease_stub];
}

- (void) setFromTid: (Tid *) fromTid {
  [fromTid retain_stub];
  [__fromTid release_stub];
  __fromTid = fromTid;
  __fromTid_isset = YES;
}

- (BOOL) fromTidIsSet {
  return __fromTid_isset;
}

- (void) unsetFromTid {
  [__fromTid release_stub];
  __fromTid = nil;
  __fromTid_isset = NO;
}

- (Tid *) toTid {
  return [[__toTid retain_stub] autorelease_stub];
}

- (void) setToTid: (Tid *) toTid {
  [toTid retain_stub];
  [__toTid release_stub];
  __toTid = toTid;
  __toTid_isset = YES;
}

- (BOOL) toTidIsSet {
  return __toTid_isset;
}

- (void) unsetToTid {
  [__toTid release_stub];
  __toTid = nil;
  __toTid_isset = NO;
}

- (NSString *) type {
  return [[__type retain_stub] autorelease_stub];
}

- (void) setType: (NSString *) type {
  [type retain_stub];
  [__type release_stub];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release_stub];
  __type = nil;
  __type_isset = NO;
}

- (NSMutableArray *) extraList {
  return [[__extraList retain_stub] autorelease_stub];
}

- (void) setExtraList: (NSMutableArray *) extraList {
  [extraList retain_stub];
  [__extraList release_stub];
  __extraList = extraList;
  __extraList_isset = YES;
}

- (BOOL) extraListIsSet {
  return __extraList_isset;
}

- (void) unsetExtraList {
  [__extraList release_stub];
  __extraList = nil;
  __extraList_isset = NO;
}

- (TimError *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (TimError *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setThreadId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setFromTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setToTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size103;
          [inProtocol readListBeginReturningElementType: NULL size: &_size103];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size103];
          int _i104;
          for (_i104 = 0; _i104 < _size103; ++_i104)
          {
            TimNode *_elem105 = [[TimNode alloc] init];
            [_elem105 read: inProtocol];
            [fieldValue addObject: _elem105];
            [_elem105 release_stub];
          }
          [inProtocol readListEnd];
          [self setExtraList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          TimError *fieldValue = [[TimError alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_MAP) {
          int _size106;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size106];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size106];
          int _i107;
          for (_i107 = 0; _i107 < _size106; ++_i107)
          {
            NSString * _key108 = [inProtocol readString];
            NSString * _val109 = [inProtocol readString];
            [fieldValue setObject: _val109 forKey: _key108];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimIqBean"];
  if (__threadId_isset) {
    if (__threadId != nil) {
      [outProtocol writeFieldBeginWithName: @"threadId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __threadId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fromTid_isset) {
    if (__fromTid != nil) {
      [outProtocol writeFieldBeginWithName: @"fromTid" type: TType_STRUCT fieldID: 2];
      [__fromTid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__toTid_isset) {
    if (__toTid != nil) {
      [outProtocol writeFieldBeginWithName: @"toTid" type: TType_STRUCT fieldID: 3];
      [__toTid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraList_isset) {
    if (__extraList != nil) {
      [outProtocol writeFieldBeginWithName: @"extraList" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__extraList count]];
        int idx111;
        for (idx111 = 0; idx111 < [__extraList count]; idx111++)
        {
          [[__extraList objectAtIndex: idx111] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 6];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 7];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter112 = [__extraMap keyEnumerator];
        id key113;
        while ((key113 = [_iter112 nextObject]))
        {
          [outProtocol writeString: key113];
          [outProtocol writeString: [__extraMap objectForKey: key113]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__threadId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'threadId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimIqBean("];
  [ms appendString: @"threadId:"];
  [ms appendFormat: @"\"%@\"", __threadId];
  [ms appendString: @",fromTid:"];
  [ms appendFormat: @"%@", __fromTid];
  [ms appendString: @",toTid:"];
  [ms appendFormat: @"%@", __toTid];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",extraList:"];
  [ms appendFormat: @"%@", __extraList];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimRoster

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSubscription: (NSString *) subscription tid: (Tid *) tid name: (NSString *) name extraMap: (NSMutableDictionary *) extraMap
{
  self = [super init];
  __subscription = [subscription retain_stub];
  __subscription_isset = YES;
  __tid = [tid retain_stub];
  __tid_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"subscription"])
  {
    __subscription = [[decoder decodeObjectForKey: @"subscription"] retain_stub];
    __subscription_isset = YES;
  }
  if ([decoder containsValueForKey: @"tid"])
  {
    __tid = [[decoder decodeObjectForKey: @"tid"] retain_stub];
    __tid_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__subscription_isset)
  {
    [encoder encodeObject: __subscription forKey: @"subscription"];
  }
  if (__tid_isset)
  {
    [encoder encodeObject: __tid forKey: @"tid"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __subscription_isset ? 2654435761 : 0;
  if (__subscription_isset)
  {
    hash = (hash * 31) ^ [__subscription hash];
  }
  hash = (hash * 31) ^ __tid_isset ? 2654435761 : 0;
  if (__tid_isset)
  {
    hash = (hash * 31) ^ [__tid hash];
  }
  hash = (hash * 31) ^ __name_isset ? 2654435761 : 0;
  if (__name_isset)
  {
    hash = (hash * 31) ^ [__name hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimRoster class]]) {
    return NO;
  }
  TimRoster *other = (TimRoster *)anObject;
  if ((__subscription_isset != other->__subscription_isset) ||
      (__subscription_isset && ((__subscription || other->__subscription) && ![__subscription isEqual:other->__subscription]))) {
    return NO;
  }
  if ((__tid_isset != other->__tid_isset) ||
      (__tid_isset && ((__tid || other->__tid) && ![__tid isEqual:other->__tid]))) {
    return NO;
  }
  if ((__name_isset != other->__name_isset) ||
      (__name_isset && ((__name || other->__name) && ![__name isEqual:other->__name]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__subscription release_stub];
  [__tid release_stub];
  [__name release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (NSString *) subscription {
  return [[__subscription retain_stub] autorelease_stub];
}

- (void) setSubscription: (NSString *) subscription {
  [subscription retain_stub];
  [__subscription release_stub];
  __subscription = subscription;
  __subscription_isset = YES;
}

- (BOOL) subscriptionIsSet {
  return __subscription_isset;
}

- (void) unsetSubscription {
  [__subscription release_stub];
  __subscription = nil;
  __subscription_isset = NO;
}

- (Tid *) tid {
  return [[__tid retain_stub] autorelease_stub];
}

- (void) setTid: (Tid *) tid {
  [tid retain_stub];
  [__tid release_stub];
  __tid = tid;
  __tid_isset = YES;
}

- (BOOL) tidIsSet {
  return __tid_isset;
}

- (void) unsetTid {
  [__tid release_stub];
  __tid = nil;
  __tid_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSubscription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_MAP) {
          int _size114;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size114];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size114];
          int _i115;
          for (_i115 = 0; _i115 < _size114; ++_i115)
          {
            NSString * _key116 = [inProtocol readString];
            NSString * _val117 = [inProtocol readString];
            [fieldValue setObject: _val117 forKey: _key116];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimRoster"];
  if (__subscription_isset) {
    if (__subscription != nil) {
      [outProtocol writeFieldBeginWithName: @"subscription" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __subscription];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tid_isset) {
    if (__tid != nil) {
      [outProtocol writeFieldBeginWithName: @"tid" type: TType_STRUCT fieldID: 2];
      [__tid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 4];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter118 = [__extraMap keyEnumerator];
        id key119;
        while ((key119 = [_iter118 nextObject]))
        {
          [outProtocol writeString: key119];
          [outProtocol writeString: [__extraMap objectForKey: key119]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__subscription_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'subscription' is not set."];
  }
  if (!__tid_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'tid' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimRoster("];
  [ms appendString: @"subscription:"];
  [ms appendFormat: @"\"%@\"", __subscription];
  [ms appendString: @",tid:"];
  [ms appendFormat: @"%@", __tid];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimRemoteUserBean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithError: (TimError *) error ub: (TimUserBean *) ub extraMap: (NSMutableDictionary *) extraMap
{
  self = [super init];
  __error = [error retain_stub];
  __error_isset = YES;
  __ub = [ub retain_stub];
  __ub_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  if ([decoder containsValueForKey: @"ub"])
  {
    __ub = [[decoder decodeObjectForKey: @"ub"] retain_stub];
    __ub_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
  if (__ub_isset)
  {
    [encoder encodeObject: __ub forKey: @"ub"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  hash = (hash * 31) ^ __ub_isset ? 2654435761 : 0;
  if (__ub_isset)
  {
    hash = (hash * 31) ^ [__ub hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimRemoteUserBean class]]) {
    return NO;
  }
  TimRemoteUserBean *other = (TimRemoteUserBean *)anObject;
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  if ((__ub_isset != other->__ub_isset) ||
      (__ub_isset && ((__ub || other->__ub) && ![__ub isEqual:other->__ub]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__error release_stub];
  [__ub release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (TimError *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (TimError *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (TimUserBean *) ub {
  return [[__ub retain_stub] autorelease_stub];
}

- (void) setUb: (TimUserBean *) ub {
  [ub retain_stub];
  [__ub release_stub];
  __ub = ub;
  __ub_isset = YES;
}

- (BOOL) ubIsSet {
  return __ub_isset;
}

- (void) unsetUb {
  [__ub release_stub];
  __ub = nil;
  __ub_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimError *fieldValue = [[TimError alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TimUserBean *fieldValue = [[TimUserBean alloc] init];
          [fieldValue read: inProtocol];
          [self setUb: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size120;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size120];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size120];
          int _i121;
          for (_i121 = 0; _i121 < _size120; ++_i121)
          {
            NSString * _key122 = [inProtocol readString];
            NSString * _val123 = [inProtocol readString];
            [fieldValue setObject: _val123 forKey: _key122];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimRemoteUserBean"];
  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ub_isset) {
    if (__ub != nil) {
      [outProtocol writeFieldBeginWithName: @"ub" type: TType_STRUCT fieldID: 2];
      [__ub write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter124 = [__extraMap keyEnumerator];
        id key125;
        while ((key125 = [_iter124 nextObject]))
        {
          [outProtocol writeString: key125];
          [outProtocol writeString: [__extraMap objectForKey: key125]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimRemoteUserBean("];
  [ms appendString: @"error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @",ub:"];
  [ms appendFormat: @"%@", __ub];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimRemoteRoom

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithError: (TimError *) error room: (TimRoom *) room extraMap: (NSMutableDictionary *) extraMap
{
  self = [super init];
  __error = [error retain_stub];
  __error_isset = YES;
  __room = [room retain_stub];
  __room_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  if ([decoder containsValueForKey: @"room"])
  {
    __room = [[decoder decodeObjectForKey: @"room"] retain_stub];
    __room_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
  if (__room_isset)
  {
    [encoder encodeObject: __room forKey: @"room"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  hash = (hash * 31) ^ __room_isset ? 2654435761 : 0;
  if (__room_isset)
  {
    hash = (hash * 31) ^ [__room hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimRemoteRoom class]]) {
    return NO;
  }
  TimRemoteRoom *other = (TimRemoteRoom *)anObject;
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  if ((__room_isset != other->__room_isset) ||
      (__room_isset && ((__room || other->__room) && ![__room isEqual:other->__room]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__error release_stub];
  [__room release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (TimError *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (TimError *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (TimRoom *) room {
  return [[__room retain_stub] autorelease_stub];
}

- (void) setRoom: (TimRoom *) room {
  [room retain_stub];
  [__room release_stub];
  __room = room;
  __room_isset = YES;
}

- (BOOL) roomIsSet {
  return __room_isset;
}

- (void) unsetRoom {
  [__room release_stub];
  __room = nil;
  __room_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimError *fieldValue = [[TimError alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TimRoom *fieldValue = [[TimRoom alloc] init];
          [fieldValue read: inProtocol];
          [self setRoom: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size126;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size126];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size126];
          int _i127;
          for (_i127 = 0; _i127 < _size126; ++_i127)
          {
            NSString * _key128 = [inProtocol readString];
            NSString * _val129 = [inProtocol readString];
            [fieldValue setObject: _val129 forKey: _key128];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimRemoteRoom"];
  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__room_isset) {
    if (__room != nil) {
      [outProtocol writeFieldBeginWithName: @"room" type: TType_STRUCT fieldID: 2];
      [__room write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter130 = [__extraMap keyEnumerator];
        id key131;
        while ((key131 = [_iter130 nextObject]))
        {
          [outProtocol writeString: key131];
          [outProtocol writeString: [__extraMap objectForKey: key131]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimRemoteRoom("];
  [ms appendString: @"error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @",room:"];
  [ms appendFormat: @"%@", __room];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimResponseBean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThreadId: (NSString *) threadId error: (TimError *) error extraList: (NSMutableArray *) extraList extraMap: (NSMutableDictionary *) extraMap
{
  self = [super init];
  __threadId = [threadId retain_stub];
  __threadId_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  __extraList = [extraList retain_stub];
  __extraList_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"threadId"])
  {
    __threadId = [[decoder decodeObjectForKey: @"threadId"] retain_stub];
    __threadId_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraList"])
  {
    __extraList = [[decoder decodeObjectForKey: @"extraList"] retain_stub];
    __extraList_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__threadId_isset)
  {
    [encoder encodeObject: __threadId forKey: @"threadId"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
  if (__extraList_isset)
  {
    [encoder encodeObject: __extraList forKey: @"extraList"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __threadId_isset ? 2654435761 : 0;
  if (__threadId_isset)
  {
    hash = (hash * 31) ^ [__threadId hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [__error hash];
  }
  hash = (hash * 31) ^ __extraList_isset ? 2654435761 : 0;
  if (__extraList_isset)
  {
    hash = (hash * 31) ^ [__extraList hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimResponseBean class]]) {
    return NO;
  }
  TimResponseBean *other = (TimResponseBean *)anObject;
  if ((__threadId_isset != other->__threadId_isset) ||
      (__threadId_isset && ((__threadId || other->__threadId) && ![__threadId isEqual:other->__threadId]))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && ((__error || other->__error) && ![__error isEqual:other->__error]))) {
    return NO;
  }
  if ((__extraList_isset != other->__extraList_isset) ||
      (__extraList_isset && ((__extraList || other->__extraList) && ![__extraList isEqual:other->__extraList]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__threadId release_stub];
  [__error release_stub];
  [__extraList release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (NSString *) threadId {
  return [[__threadId retain_stub] autorelease_stub];
}

- (void) setThreadId: (NSString *) threadId {
  [threadId retain_stub];
  [__threadId release_stub];
  __threadId = threadId;
  __threadId_isset = YES;
}

- (BOOL) threadIdIsSet {
  return __threadId_isset;
}

- (void) unsetThreadId {
  [__threadId release_stub];
  __threadId = nil;
  __threadId_isset = NO;
}

- (TimError *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (TimError *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (NSMutableArray *) extraList {
  return [[__extraList retain_stub] autorelease_stub];
}

- (void) setExtraList: (NSMutableArray *) extraList {
  [extraList retain_stub];
  [__extraList release_stub];
  __extraList = extraList;
  __extraList_isset = YES;
}

- (BOOL) extraListIsSet {
  return __extraList_isset;
}

- (void) unsetExtraList {
  [__extraList release_stub];
  __extraList = nil;
  __extraList_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setThreadId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TimError *fieldValue = [[TimError alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size132;
          [inProtocol readListBeginReturningElementType: NULL size: &_size132];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size132];
          int _i133;
          for (_i133 = 0; _i133 < _size132; ++_i133)
          {
            TimNode *_elem134 = [[TimNode alloc] init];
            [_elem134 read: inProtocol];
            [fieldValue addObject: _elem134];
            [_elem134 release_stub];
          }
          [inProtocol readListEnd];
          [self setExtraList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_MAP) {
          int _size135;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size135];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size135];
          int _i136;
          for (_i136 = 0; _i136 < _size135; ++_i136)
          {
            NSString * _key137 = [inProtocol readString];
            NSString * _val138 = [inProtocol readString];
            [fieldValue setObject: _val138 forKey: _key137];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimResponseBean"];
  if (__threadId_isset) {
    if (__threadId != nil) {
      [outProtocol writeFieldBeginWithName: @"threadId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __threadId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 2];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraList_isset) {
    if (__extraList != nil) {
      [outProtocol writeFieldBeginWithName: @"extraList" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__extraList count]];
        int idx140;
        for (idx140 = 0; idx140 < [__extraList count]; idx140++)
        {
          [[__extraList objectAtIndex: idx140] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 4];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter141 = [__extraMap keyEnumerator];
        id key142;
        while ((key142 = [_iter141 nextObject]))
        {
          [outProtocol writeString: key142];
          [outProtocol writeString: [__extraMap objectForKey: key142]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimResponseBean("];
  [ms appendString: @"threadId:"];
  [ms appendFormat: @"\"%@\"", __threadId];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @",extraList:"];
  [ms appendFormat: @"%@", __extraList];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimSock5Bean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFromTid: (Tid *) fromTid toTid: (Tid *) toTid addr: (NSString *) addr port: (int32_t) port transport: (int16_t) transport pubId: (NSString *) pubId extraMap: (NSMutableDictionary *) extraMap
{
  self = [super init];
  __fromTid = [fromTid retain_stub];
  __fromTid_isset = YES;
  __toTid = [toTid retain_stub];
  __toTid_isset = YES;
  __addr = [addr retain_stub];
  __addr_isset = YES;
  __port = port;
  __port_isset = YES;
  __transport = transport;
  __transport_isset = YES;
  __pubId = [pubId retain_stub];
  __pubId_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"fromTid"])
  {
    __fromTid = [[decoder decodeObjectForKey: @"fromTid"] retain_stub];
    __fromTid_isset = YES;
  }
  if ([decoder containsValueForKey: @"toTid"])
  {
    __toTid = [[decoder decodeObjectForKey: @"toTid"] retain_stub];
    __toTid_isset = YES;
  }
  if ([decoder containsValueForKey: @"addr"])
  {
    __addr = [[decoder decodeObjectForKey: @"addr"] retain_stub];
    __addr_isset = YES;
  }
  if ([decoder containsValueForKey: @"port"])
  {
    __port = [decoder decodeInt32ForKey: @"port"];
    __port_isset = YES;
  }
  if ([decoder containsValueForKey: @"transport"])
  {
    __transport = [decoder decodeIntForKey: @"transport"];
    __transport_isset = YES;
  }
  if ([decoder containsValueForKey: @"pubId"])
  {
    __pubId = [[decoder decodeObjectForKey: @"pubId"] retain_stub];
    __pubId_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__fromTid_isset)
  {
    [encoder encodeObject: __fromTid forKey: @"fromTid"];
  }
  if (__toTid_isset)
  {
    [encoder encodeObject: __toTid forKey: @"toTid"];
  }
  if (__addr_isset)
  {
    [encoder encodeObject: __addr forKey: @"addr"];
  }
  if (__port_isset)
  {
    [encoder encodeInt32: __port forKey: @"port"];
  }
  if (__transport_isset)
  {
    [encoder encodeInt: __transport forKey: @"transport"];
  }
  if (__pubId_isset)
  {
    [encoder encodeObject: __pubId forKey: @"pubId"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __fromTid_isset ? 2654435761 : 0;
  if (__fromTid_isset)
  {
    hash = (hash * 31) ^ [__fromTid hash];
  }
  hash = (hash * 31) ^ __toTid_isset ? 2654435761 : 0;
  if (__toTid_isset)
  {
    hash = (hash * 31) ^ [__toTid hash];
  }
  hash = (hash * 31) ^ __addr_isset ? 2654435761 : 0;
  if (__addr_isset)
  {
    hash = (hash * 31) ^ [__addr hash];
  }
  hash = (hash * 31) ^ __port_isset ? 2654435761 : 0;
  if (__port_isset)
  {
    hash = (hash * 31) ^ [@(__port) hash];
  }
  hash = (hash * 31) ^ __transport_isset ? 2654435761 : 0;
  if (__transport_isset)
  {
    hash = (hash * 31) ^ [@(__transport) hash];
  }
  hash = (hash * 31) ^ __pubId_isset ? 2654435761 : 0;
  if (__pubId_isset)
  {
    hash = (hash * 31) ^ [__pubId hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimSock5Bean class]]) {
    return NO;
  }
  TimSock5Bean *other = (TimSock5Bean *)anObject;
  if ((__fromTid_isset != other->__fromTid_isset) ||
      (__fromTid_isset && ((__fromTid || other->__fromTid) && ![__fromTid isEqual:other->__fromTid]))) {
    return NO;
  }
  if ((__toTid_isset != other->__toTid_isset) ||
      (__toTid_isset && ((__toTid || other->__toTid) && ![__toTid isEqual:other->__toTid]))) {
    return NO;
  }
  if ((__addr_isset != other->__addr_isset) ||
      (__addr_isset && ((__addr || other->__addr) && ![__addr isEqual:other->__addr]))) {
    return NO;
  }
  if ((__port_isset != other->__port_isset) ||
      (__port_isset && (__port != other->__port))) {
    return NO;
  }
  if ((__transport_isset != other->__transport_isset) ||
      (__transport_isset && (__transport != other->__transport))) {
    return NO;
  }
  if ((__pubId_isset != other->__pubId_isset) ||
      (__pubId_isset && ((__pubId || other->__pubId) && ![__pubId isEqual:other->__pubId]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__fromTid release_stub];
  [__toTid release_stub];
  [__addr release_stub];
  [__pubId release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (Tid *) fromTid {
  return [[__fromTid retain_stub] autorelease_stub];
}

- (void) setFromTid: (Tid *) fromTid {
  [fromTid retain_stub];
  [__fromTid release_stub];
  __fromTid = fromTid;
  __fromTid_isset = YES;
}

- (BOOL) fromTidIsSet {
  return __fromTid_isset;
}

- (void) unsetFromTid {
  [__fromTid release_stub];
  __fromTid = nil;
  __fromTid_isset = NO;
}

- (Tid *) toTid {
  return [[__toTid retain_stub] autorelease_stub];
}

- (void) setToTid: (Tid *) toTid {
  [toTid retain_stub];
  [__toTid release_stub];
  __toTid = toTid;
  __toTid_isset = YES;
}

- (BOOL) toTidIsSet {
  return __toTid_isset;
}

- (void) unsetToTid {
  [__toTid release_stub];
  __toTid = nil;
  __toTid_isset = NO;
}

- (NSString *) addr {
  return [[__addr retain_stub] autorelease_stub];
}

- (void) setAddr: (NSString *) addr {
  [addr retain_stub];
  [__addr release_stub];
  __addr = addr;
  __addr_isset = YES;
}

- (BOOL) addrIsSet {
  return __addr_isset;
}

- (void) unsetAddr {
  [__addr release_stub];
  __addr = nil;
  __addr_isset = NO;
}

- (int32_t) port {
  return __port;
}

- (void) setPort: (int32_t) port {
  __port = port;
  __port_isset = YES;
}

- (BOOL) portIsSet {
  return __port_isset;
}

- (void) unsetPort {
  __port_isset = NO;
}

- (int16_t) transport {
  return __transport;
}

- (void) setTransport: (int16_t) transport {
  __transport = transport;
  __transport_isset = YES;
}

- (BOOL) transportIsSet {
  return __transport_isset;
}

- (void) unsetTransport {
  __transport_isset = NO;
}

- (NSString *) pubId {
  return [[__pubId retain_stub] autorelease_stub];
}

- (void) setPubId: (NSString *) pubId {
  [pubId retain_stub];
  [__pubId release_stub];
  __pubId = pubId;
  __pubId_isset = YES;
}

- (BOOL) pubIdIsSet {
  return __pubId_isset;
}

- (void) unsetPubId {
  [__pubId release_stub];
  __pubId = nil;
  __pubId_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setFromTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setToTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddr: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPort: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setTransport: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPubId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_MAP) {
          int _size143;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size143];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size143];
          int _i144;
          for (_i144 = 0; _i144 < _size143; ++_i144)
          {
            NSString * _key145 = [inProtocol readString];
            NSString * _val146 = [inProtocol readString];
            [fieldValue setObject: _val146 forKey: _key145];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimSock5Bean"];
  if (__fromTid_isset) {
    if (__fromTid != nil) {
      [outProtocol writeFieldBeginWithName: @"fromTid" type: TType_STRUCT fieldID: 1];
      [__fromTid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__toTid_isset) {
    if (__toTid != nil) {
      [outProtocol writeFieldBeginWithName: @"toTid" type: TType_STRUCT fieldID: 2];
      [__toTid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__addr_isset) {
    if (__addr != nil) {
      [outProtocol writeFieldBeginWithName: @"addr" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __addr];
      [outProtocol writeFieldEnd];
    }
  }
  if (__port_isset) {
    [outProtocol writeFieldBeginWithName: @"port" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __port];
    [outProtocol writeFieldEnd];
  }
  if (__transport_isset) {
    [outProtocol writeFieldBeginWithName: @"transport" type: TType_I16 fieldID: 5];
    [outProtocol writeI16: __transport];
    [outProtocol writeFieldEnd];
  }
  if (__pubId_isset) {
    if (__pubId != nil) {
      [outProtocol writeFieldBeginWithName: @"pubId" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __pubId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 7];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter147 = [__extraMap keyEnumerator];
        id key148;
        while ((key148 = [_iter147 nextObject]))
        {
          [outProtocol writeString: key148];
          [outProtocol writeString: [__extraMap objectForKey: key148]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__fromTid_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'fromTid' is not set."];
  }
  if (!__toTid_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'toTid' is not set."];
  }
  if (!__addr_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'addr' is not set."];
  }
  if (!__port_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'port' is not set."];
  }
  if (!__transport_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'transport' is not set."];
  }
  if (!__pubId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'pubId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimSock5Bean("];
  [ms appendString: @"fromTid:"];
  [ms appendFormat: @"%@", __fromTid];
  [ms appendString: @",toTid:"];
  [ms appendFormat: @"%@", __toTid];
  [ms appendString: @",addr:"];
  [ms appendFormat: @"\"%@\"", __addr];
  [ms appendString: @",port:"];
  [ms appendFormat: @"%i", __port];
  [ms appendString: @",transport:"];
  [ms appendFormat: @"%hi", __transport];
  [ms appendString: @",pubId:"];
  [ms appendFormat: @"\"%@\"", __pubId];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimSock5Bytes

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPubId: (NSString *) pubId index: (int32_t) index bytes: (NSMutableArray *) bytes extraMap: (NSMutableDictionary *) extraMap
{
  self = [super init];
  __pubId = [pubId retain_stub];
  __pubId_isset = YES;
  __index = index;
  __index_isset = YES;
  __bytes = [bytes retain_stub];
  __bytes_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pubId"])
  {
    __pubId = [[decoder decodeObjectForKey: @"pubId"] retain_stub];
    __pubId_isset = YES;
  }
  if ([decoder containsValueForKey: @"index"])
  {
    __index = [decoder decodeInt32ForKey: @"index"];
    __index_isset = YES;
  }
  if ([decoder containsValueForKey: @"bytes"])
  {
    __bytes = [[decoder decodeObjectForKey: @"bytes"] retain_stub];
    __bytes_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pubId_isset)
  {
    [encoder encodeObject: __pubId forKey: @"pubId"];
  }
  if (__index_isset)
  {
    [encoder encodeInt32: __index forKey: @"index"];
  }
  if (__bytes_isset)
  {
    [encoder encodeObject: __bytes forKey: @"bytes"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __pubId_isset ? 2654435761 : 0;
  if (__pubId_isset)
  {
    hash = (hash * 31) ^ [__pubId hash];
  }
  hash = (hash * 31) ^ __index_isset ? 2654435761 : 0;
  if (__index_isset)
  {
    hash = (hash * 31) ^ [@(__index) hash];
  }
  hash = (hash * 31) ^ __bytes_isset ? 2654435761 : 0;
  if (__bytes_isset)
  {
    hash = (hash * 31) ^ [__bytes hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimSock5Bytes class]]) {
    return NO;
  }
  TimSock5Bytes *other = (TimSock5Bytes *)anObject;
  if ((__pubId_isset != other->__pubId_isset) ||
      (__pubId_isset && ((__pubId || other->__pubId) && ![__pubId isEqual:other->__pubId]))) {
    return NO;
  }
  if ((__index_isset != other->__index_isset) ||
      (__index_isset && (__index != other->__index))) {
    return NO;
  }
  if ((__bytes_isset != other->__bytes_isset) ||
      (__bytes_isset && ((__bytes || other->__bytes) && ![__bytes isEqual:other->__bytes]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__pubId release_stub];
  [__bytes release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (NSString *) pubId {
  return [[__pubId retain_stub] autorelease_stub];
}

- (void) setPubId: (NSString *) pubId {
  [pubId retain_stub];
  [__pubId release_stub];
  __pubId = pubId;
  __pubId_isset = YES;
}

- (BOOL) pubIdIsSet {
  return __pubId_isset;
}

- (void) unsetPubId {
  [__pubId release_stub];
  __pubId = nil;
  __pubId_isset = NO;
}

- (int32_t) index {
  return __index;
}

- (void) setIndex: (int32_t) index {
  __index = index;
  __index_isset = YES;
}

- (BOOL) indexIsSet {
  return __index_isset;
}

- (void) unsetIndex {
  __index_isset = NO;
}

- (NSMutableArray *) bytes {
  return [[__bytes retain_stub] autorelease_stub];
}

- (void) setBytes: (NSMutableArray *) bytes {
  [bytes retain_stub];
  [__bytes release_stub];
  __bytes = bytes;
  __bytes_isset = YES;
}

- (BOOL) bytesIsSet {
  return __bytes_isset;
}

- (void) unsetBytes {
  [__bytes release_stub];
  __bytes = nil;
  __bytes_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPubId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size149;
          [inProtocol readListBeginReturningElementType: NULL size: &_size149];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size149];
          int _i150;
          for (_i150 = 0; _i150 < _size149; ++_i150)
          {
            NSData * _elem151 = [inProtocol readBinary];
            [fieldValue addObject: _elem151];
          }
          [inProtocol readListEnd];
          [self setBytes: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_MAP) {
          int _size152;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size152];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size152];
          int _i153;
          for (_i153 = 0; _i153 < _size152; ++_i153)
          {
            NSString * _key154 = [inProtocol readString];
            NSString * _val155 = [inProtocol readString];
            [fieldValue setObject: _val155 forKey: _key154];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimSock5Bytes"];
  if (__pubId_isset) {
    if (__pubId != nil) {
      [outProtocol writeFieldBeginWithName: @"pubId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __pubId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__index_isset) {
    [outProtocol writeFieldBeginWithName: @"index" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __index];
    [outProtocol writeFieldEnd];
  }
  if (__bytes_isset) {
    if (__bytes != nil) {
      [outProtocol writeFieldBeginWithName: @"bytes" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__bytes count]];
        int idx157;
        for (idx157 = 0; idx157 < [__bytes count]; idx157++)
        {
          [outProtocol writeBinary: [__bytes objectAtIndex: idx157]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 4];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter158 = [__extraMap keyEnumerator];
        id key159;
        while ((key159 = [_iter158 nextObject]))
        {
          [outProtocol writeString: key159];
          [outProtocol writeString: [__extraMap objectForKey: key159]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__pubId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'pubId' is not set."];
  }
  if (!__index_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'index' is not set."];
  }
  if (!__bytes_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'bytes' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimSock5Bytes("];
  [ms appendString: @"pubId:"];
  [ms appendFormat: @"\"%@\"", __pubId];
  [ms appendString: @",index:"];
  [ms appendFormat: @"%i", __index];
  [ms appendString: @",bytes:"];
  [ms appendFormat: @"%@", __bytes];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimPage

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFromTimeStamp: (NSString *) fromTimeStamp toTimeStamp: (NSString *) toTimeStamp limitCount: (int32_t) limitCount extraMap: (NSMutableDictionary *) extraMap
{
  self = [super init];
  __fromTimeStamp = [fromTimeStamp retain_stub];
  __fromTimeStamp_isset = YES;
  __toTimeStamp = [toTimeStamp retain_stub];
  __toTimeStamp_isset = YES;
  __limitCount = limitCount;
  __limitCount_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"fromTimeStamp"])
  {
    __fromTimeStamp = [[decoder decodeObjectForKey: @"fromTimeStamp"] retain_stub];
    __fromTimeStamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"toTimeStamp"])
  {
    __toTimeStamp = [[decoder decodeObjectForKey: @"toTimeStamp"] retain_stub];
    __toTimeStamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"limitCount"])
  {
    __limitCount = [decoder decodeInt32ForKey: @"limitCount"];
    __limitCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__fromTimeStamp_isset)
  {
    [encoder encodeObject: __fromTimeStamp forKey: @"fromTimeStamp"];
  }
  if (__toTimeStamp_isset)
  {
    [encoder encodeObject: __toTimeStamp forKey: @"toTimeStamp"];
  }
  if (__limitCount_isset)
  {
    [encoder encodeInt32: __limitCount forKey: @"limitCount"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __fromTimeStamp_isset ? 2654435761 : 0;
  if (__fromTimeStamp_isset)
  {
    hash = (hash * 31) ^ [__fromTimeStamp hash];
  }
  hash = (hash * 31) ^ __toTimeStamp_isset ? 2654435761 : 0;
  if (__toTimeStamp_isset)
  {
    hash = (hash * 31) ^ [__toTimeStamp hash];
  }
  hash = (hash * 31) ^ __limitCount_isset ? 2654435761 : 0;
  if (__limitCount_isset)
  {
    hash = (hash * 31) ^ [@(__limitCount) hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimPage class]]) {
    return NO;
  }
  TimPage *other = (TimPage *)anObject;
  if ((__fromTimeStamp_isset != other->__fromTimeStamp_isset) ||
      (__fromTimeStamp_isset && ((__fromTimeStamp || other->__fromTimeStamp) && ![__fromTimeStamp isEqual:other->__fromTimeStamp]))) {
    return NO;
  }
  if ((__toTimeStamp_isset != other->__toTimeStamp_isset) ||
      (__toTimeStamp_isset && ((__toTimeStamp || other->__toTimeStamp) && ![__toTimeStamp isEqual:other->__toTimeStamp]))) {
    return NO;
  }
  if ((__limitCount_isset != other->__limitCount_isset) ||
      (__limitCount_isset && (__limitCount != other->__limitCount))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__fromTimeStamp release_stub];
  [__toTimeStamp release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (NSString *) fromTimeStamp {
  return [[__fromTimeStamp retain_stub] autorelease_stub];
}

- (void) setFromTimeStamp: (NSString *) fromTimeStamp {
  [fromTimeStamp retain_stub];
  [__fromTimeStamp release_stub];
  __fromTimeStamp = fromTimeStamp;
  __fromTimeStamp_isset = YES;
}

- (BOOL) fromTimeStampIsSet {
  return __fromTimeStamp_isset;
}

- (void) unsetFromTimeStamp {
  [__fromTimeStamp release_stub];
  __fromTimeStamp = nil;
  __fromTimeStamp_isset = NO;
}

- (NSString *) toTimeStamp {
  return [[__toTimeStamp retain_stub] autorelease_stub];
}

- (void) setToTimeStamp: (NSString *) toTimeStamp {
  [toTimeStamp retain_stub];
  [__toTimeStamp release_stub];
  __toTimeStamp = toTimeStamp;
  __toTimeStamp_isset = YES;
}

- (BOOL) toTimeStampIsSet {
  return __toTimeStamp_isset;
}

- (void) unsetToTimeStamp {
  [__toTimeStamp release_stub];
  __toTimeStamp = nil;
  __toTimeStamp_isset = NO;
}

- (int32_t) limitCount {
  return __limitCount;
}

- (void) setLimitCount: (int32_t) limitCount {
  __limitCount = limitCount;
  __limitCount_isset = YES;
}

- (BOOL) limitCountIsSet {
  return __limitCount_isset;
}

- (void) unsetLimitCount {
  __limitCount_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFromTimeStamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToTimeStamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLimitCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_MAP) {
          int _size160;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size160];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size160];
          int _i161;
          for (_i161 = 0; _i161 < _size160; ++_i161)
          {
            NSString * _key162 = [inProtocol readString];
            NSString * _val163 = [inProtocol readString];
            [fieldValue setObject: _val163 forKey: _key162];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimPage"];
  if (__fromTimeStamp_isset) {
    if (__fromTimeStamp != nil) {
      [outProtocol writeFieldBeginWithName: @"fromTimeStamp" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __fromTimeStamp];
      [outProtocol writeFieldEnd];
    }
  }
  if (__toTimeStamp_isset) {
    if (__toTimeStamp != nil) {
      [outProtocol writeFieldBeginWithName: @"toTimeStamp" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __toTimeStamp];
      [outProtocol writeFieldEnd];
    }
  }
  if (__limitCount_isset) {
    [outProtocol writeFieldBeginWithName: @"limitCount" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __limitCount];
    [outProtocol writeFieldEnd];
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 4];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter164 = [__extraMap keyEnumerator];
        id key165;
        while ((key165 = [_iter164 nextObject]))
        {
          [outProtocol writeString: key165];
          [outProtocol writeString: [__extraMap objectForKey: key165]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimPage("];
  [ms appendString: @"fromTimeStamp:"];
  [ms appendFormat: @"\"%@\"", __fromTimeStamp];
  [ms appendString: @",toTimeStamp:"];
  [ms appendFormat: @"\"%@\"", __toTimeStamp];
  [ms appendString: @",limitCount:"];
  [ms appendFormat: @"%i", __limitCount];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimMessageIq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTidlist: (NSMutableArray *) tidlist timPage: (TimPage *) timPage midlist: (NSMutableArray *) midlist extraMap: (NSMutableDictionary *) extraMap
{
  self = [super init];
  __tidlist = [tidlist retain_stub];
  __tidlist_isset = YES;
  __timPage = [timPage retain_stub];
  __timPage_isset = YES;
  __midlist = [midlist retain_stub];
  __midlist_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tidlist"])
  {
    __tidlist = [[decoder decodeObjectForKey: @"tidlist"] retain_stub];
    __tidlist_isset = YES;
  }
  if ([decoder containsValueForKey: @"timPage"])
  {
    __timPage = [[decoder decodeObjectForKey: @"timPage"] retain_stub];
    __timPage_isset = YES;
  }
  if ([decoder containsValueForKey: @"midlist"])
  {
    __midlist = [[decoder decodeObjectForKey: @"midlist"] retain_stub];
    __midlist_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tidlist_isset)
  {
    [encoder encodeObject: __tidlist forKey: @"tidlist"];
  }
  if (__timPage_isset)
  {
    [encoder encodeObject: __timPage forKey: @"timPage"];
  }
  if (__midlist_isset)
  {
    [encoder encodeObject: __midlist forKey: @"midlist"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __tidlist_isset ? 2654435761 : 0;
  if (__tidlist_isset)
  {
    hash = (hash * 31) ^ [__tidlist hash];
  }
  hash = (hash * 31) ^ __timPage_isset ? 2654435761 : 0;
  if (__timPage_isset)
  {
    hash = (hash * 31) ^ [__timPage hash];
  }
  hash = (hash * 31) ^ __midlist_isset ? 2654435761 : 0;
  if (__midlist_isset)
  {
    hash = (hash * 31) ^ [__midlist hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimMessageIq class]]) {
    return NO;
  }
  TimMessageIq *other = (TimMessageIq *)anObject;
  if ((__tidlist_isset != other->__tidlist_isset) ||
      (__tidlist_isset && ((__tidlist || other->__tidlist) && ![__tidlist isEqual:other->__tidlist]))) {
    return NO;
  }
  if ((__timPage_isset != other->__timPage_isset) ||
      (__timPage_isset && ((__timPage || other->__timPage) && ![__timPage isEqual:other->__timPage]))) {
    return NO;
  }
  if ((__midlist_isset != other->__midlist_isset) ||
      (__midlist_isset && ((__midlist || other->__midlist) && ![__midlist isEqual:other->__midlist]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__tidlist release_stub];
  [__timPage release_stub];
  [__midlist release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) tidlist {
  return [[__tidlist retain_stub] autorelease_stub];
}

- (void) setTidlist: (NSMutableArray *) tidlist {
  [tidlist retain_stub];
  [__tidlist release_stub];
  __tidlist = tidlist;
  __tidlist_isset = YES;
}

- (BOOL) tidlistIsSet {
  return __tidlist_isset;
}

- (void) unsetTidlist {
  [__tidlist release_stub];
  __tidlist = nil;
  __tidlist_isset = NO;
}

- (TimPage *) timPage {
  return [[__timPage retain_stub] autorelease_stub];
}

- (void) setTimPage: (TimPage *) timPage {
  [timPage retain_stub];
  [__timPage release_stub];
  __timPage = timPage;
  __timPage_isset = YES;
}

- (BOOL) timPageIsSet {
  return __timPage_isset;
}

- (void) unsetTimPage {
  [__timPage release_stub];
  __timPage = nil;
  __timPage_isset = NO;
}

- (NSMutableArray *) midlist {
  return [[__midlist retain_stub] autorelease_stub];
}

- (void) setMidlist: (NSMutableArray *) midlist {
  [midlist retain_stub];
  [__midlist release_stub];
  __midlist = midlist;
  __midlist_isset = YES;
}

- (BOOL) midlistIsSet {
  return __midlist_isset;
}

- (void) unsetMidlist {
  [__midlist release_stub];
  __midlist = nil;
  __midlist_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size166;
          [inProtocol readListBeginReturningElementType: NULL size: &_size166];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size166];
          int _i167;
          for (_i167 = 0; _i167 < _size166; ++_i167)
          {
            NSString * _elem168 = [inProtocol readString];
            [fieldValue addObject: _elem168];
          }
          [inProtocol readListEnd];
          [self setTidlist: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TimPage *fieldValue = [[TimPage alloc] init];
          [fieldValue read: inProtocol];
          [self setTimPage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size169;
          [inProtocol readListBeginReturningElementType: NULL size: &_size169];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size169];
          int _i170;
          for (_i170 = 0; _i170 < _size169; ++_i170)
          {
            NSString * _elem171 = [inProtocol readString];
            [fieldValue addObject: _elem171];
          }
          [inProtocol readListEnd];
          [self setMidlist: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_MAP) {
          int _size172;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size172];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size172];
          int _i173;
          for (_i173 = 0; _i173 < _size172; ++_i173)
          {
            NSString * _key174 = [inProtocol readString];
            NSString * _val175 = [inProtocol readString];
            [fieldValue setObject: _val175 forKey: _key174];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimMessageIq"];
  if (__tidlist_isset) {
    if (__tidlist != nil) {
      [outProtocol writeFieldBeginWithName: @"tidlist" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__tidlist count]];
        int idx177;
        for (idx177 = 0; idx177 < [__tidlist count]; idx177++)
        {
          [outProtocol writeString: [__tidlist objectAtIndex: idx177]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__timPage_isset) {
    if (__timPage != nil) {
      [outProtocol writeFieldBeginWithName: @"timPage" type: TType_STRUCT fieldID: 2];
      [__timPage write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__midlist_isset) {
    if (__midlist != nil) {
      [outProtocol writeFieldBeginWithName: @"midlist" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__midlist count]];
        int idx179;
        for (idx179 = 0; idx179 < [__midlist count]; idx179++)
        {
          [outProtocol writeString: [__midlist objectAtIndex: idx179]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 4];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter180 = [__extraMap keyEnumerator];
        id key181;
        while ((key181 = [_iter180 nextObject]))
        {
          [outProtocol writeString: key181];
          [outProtocol writeString: [__extraMap objectForKey: key181]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimMessageIq("];
  [ms appendString: @"tidlist:"];
  [ms appendFormat: @"%@", __tidlist];
  [ms appendString: @",timPage:"];
  [ms appendFormat: @"%@", __timPage];
  [ms appendString: @",midlist:"];
  [ms appendFormat: @"%@", __midlist];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimAuth

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDomain: (NSString *) domain username: (NSString *) username pwd: (NSString *) pwd
{
  self = [super init];
  __domain = [domain retain_stub];
  __domain_isset = YES;
  __username = [username retain_stub];
  __username_isset = YES;
  __pwd = [pwd retain_stub];
  __pwd_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"domain"])
  {
    __domain = [[decoder decodeObjectForKey: @"domain"] retain_stub];
    __domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"pwd"])
  {
    __pwd = [[decoder decodeObjectForKey: @"pwd"] retain_stub];
    __pwd_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__domain_isset)
  {
    [encoder encodeObject: __domain forKey: @"domain"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__pwd_isset)
  {
    [encoder encodeObject: __pwd forKey: @"pwd"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __domain_isset ? 2654435761 : 0;
  if (__domain_isset)
  {
    hash = (hash * 31) ^ [__domain hash];
  }
  hash = (hash * 31) ^ __username_isset ? 2654435761 : 0;
  if (__username_isset)
  {
    hash = (hash * 31) ^ [__username hash];
  }
  hash = (hash * 31) ^ __pwd_isset ? 2654435761 : 0;
  if (__pwd_isset)
  {
    hash = (hash * 31) ^ [__pwd hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimAuth class]]) {
    return NO;
  }
  TimAuth *other = (TimAuth *)anObject;
  if ((__domain_isset != other->__domain_isset) ||
      (__domain_isset && ((__domain || other->__domain) && ![__domain isEqual:other->__domain]))) {
    return NO;
  }
  if ((__username_isset != other->__username_isset) ||
      (__username_isset && ((__username || other->__username) && ![__username isEqual:other->__username]))) {
    return NO;
  }
  if ((__pwd_isset != other->__pwd_isset) ||
      (__pwd_isset && ((__pwd || other->__pwd) && ![__pwd isEqual:other->__pwd]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__domain release_stub];
  [__username release_stub];
  [__pwd release_stub];
  [super dealloc_stub];
}

- (NSString *) domain {
  return [[__domain retain_stub] autorelease_stub];
}

- (void) setDomain: (NSString *) domain {
  [domain retain_stub];
  [__domain release_stub];
  __domain = domain;
  __domain_isset = YES;
}

- (BOOL) domainIsSet {
  return __domain_isset;
}

- (void) unsetDomain {
  [__domain release_stub];
  __domain = nil;
  __domain_isset = NO;
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) pwd {
  return [[__pwd retain_stub] autorelease_stub];
}

- (void) setPwd: (NSString *) pwd {
  [pwd retain_stub];
  [__pwd release_stub];
  __pwd = pwd;
  __pwd_isset = YES;
}

- (BOOL) pwdIsSet {
  return __pwd_isset;
}

- (void) unsetPwd {
  [__pwd release_stub];
  __pwd = nil;
  __pwd_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDomain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimAuth"];
  if (__domain_isset) {
    if (__domain != nil) {
      [outProtocol writeFieldBeginWithName: @"domain" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pwd_isset) {
    if (__pwd != nil) {
      [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __pwd];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimAuth("];
  [ms appendString: @"domain:"];
  [ms appendFormat: @"\"%@\"", __domain];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",pwd:"];
  [ms appendFormat: @"\"%@\"", __pwd];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimMBeanList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThreadId: (NSString *) threadId timMBeanList: (NSMutableArray *) timMBeanList reqType: (NSString *) reqType extraMap: (NSMutableDictionary *) extraMap
{
  self = [super init];
  __threadId = [threadId retain_stub];
  __threadId_isset = YES;
  __timMBeanList = [timMBeanList retain_stub];
  __timMBeanList_isset = YES;
  __reqType = [reqType retain_stub];
  __reqType_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"threadId"])
  {
    __threadId = [[decoder decodeObjectForKey: @"threadId"] retain_stub];
    __threadId_isset = YES;
  }
  if ([decoder containsValueForKey: @"timMBeanList"])
  {
    __timMBeanList = [[decoder decodeObjectForKey: @"timMBeanList"] retain_stub];
    __timMBeanList_isset = YES;
  }
  if ([decoder containsValueForKey: @"reqType"])
  {
    __reqType = [[decoder decodeObjectForKey: @"reqType"] retain_stub];
    __reqType_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__threadId_isset)
  {
    [encoder encodeObject: __threadId forKey: @"threadId"];
  }
  if (__timMBeanList_isset)
  {
    [encoder encodeObject: __timMBeanList forKey: @"timMBeanList"];
  }
  if (__reqType_isset)
  {
    [encoder encodeObject: __reqType forKey: @"reqType"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __threadId_isset ? 2654435761 : 0;
  if (__threadId_isset)
  {
    hash = (hash * 31) ^ [__threadId hash];
  }
  hash = (hash * 31) ^ __timMBeanList_isset ? 2654435761 : 0;
  if (__timMBeanList_isset)
  {
    hash = (hash * 31) ^ [__timMBeanList hash];
  }
  hash = (hash * 31) ^ __reqType_isset ? 2654435761 : 0;
  if (__reqType_isset)
  {
    hash = (hash * 31) ^ [__reqType hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimMBeanList class]]) {
    return NO;
  }
  TimMBeanList *other = (TimMBeanList *)anObject;
  if ((__threadId_isset != other->__threadId_isset) ||
      (__threadId_isset && ((__threadId || other->__threadId) && ![__threadId isEqual:other->__threadId]))) {
    return NO;
  }
  if ((__timMBeanList_isset != other->__timMBeanList_isset) ||
      (__timMBeanList_isset && ((__timMBeanList || other->__timMBeanList) && ![__timMBeanList isEqual:other->__timMBeanList]))) {
    return NO;
  }
  if ((__reqType_isset != other->__reqType_isset) ||
      (__reqType_isset && ((__reqType || other->__reqType) && ![__reqType isEqual:other->__reqType]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__threadId release_stub];
  [__timMBeanList release_stub];
  [__reqType release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (NSString *) threadId {
  return [[__threadId retain_stub] autorelease_stub];
}

- (void) setThreadId: (NSString *) threadId {
  [threadId retain_stub];
  [__threadId release_stub];
  __threadId = threadId;
  __threadId_isset = YES;
}

- (BOOL) threadIdIsSet {
  return __threadId_isset;
}

- (void) unsetThreadId {
  [__threadId release_stub];
  __threadId = nil;
  __threadId_isset = NO;
}

- (NSMutableArray *) timMBeanList {
  return [[__timMBeanList retain_stub] autorelease_stub];
}

- (void) setTimMBeanList: (NSMutableArray *) timMBeanList {
  [timMBeanList retain_stub];
  [__timMBeanList release_stub];
  __timMBeanList = timMBeanList;
  __timMBeanList_isset = YES;
}

- (BOOL) timMBeanListIsSet {
  return __timMBeanList_isset;
}

- (void) unsetTimMBeanList {
  [__timMBeanList release_stub];
  __timMBeanList = nil;
  __timMBeanList_isset = NO;
}

- (NSString *) reqType {
  return [[__reqType retain_stub] autorelease_stub];
}

- (void) setReqType: (NSString *) reqType {
  [reqType retain_stub];
  [__reqType release_stub];
  __reqType = reqType;
  __reqType_isset = YES;
}

- (BOOL) reqTypeIsSet {
  return __reqType_isset;
}

- (void) unsetReqType {
  [__reqType release_stub];
  __reqType = nil;
  __reqType_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setThreadId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size182;
          [inProtocol readListBeginReturningElementType: NULL size: &_size182];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size182];
          int _i183;
          for (_i183 = 0; _i183 < _size182; ++_i183)
          {
            TimMBean *_elem184 = [[TimMBean alloc] init];
            [_elem184 read: inProtocol];
            [fieldValue addObject: _elem184];
            [_elem184 release_stub];
          }
          [inProtocol readListEnd];
          [self setTimMBeanList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReqType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_MAP) {
          int _size185;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size185];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size185];
          int _i186;
          for (_i186 = 0; _i186 < _size185; ++_i186)
          {
            NSString * _key187 = [inProtocol readString];
            NSString * _val188 = [inProtocol readString];
            [fieldValue setObject: _val188 forKey: _key187];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimMBeanList"];
  if (__threadId_isset) {
    if (__threadId != nil) {
      [outProtocol writeFieldBeginWithName: @"threadId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __threadId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timMBeanList_isset) {
    if (__timMBeanList != nil) {
      [outProtocol writeFieldBeginWithName: @"timMBeanList" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__timMBeanList count]];
        int idx190;
        for (idx190 = 0; idx190 < [__timMBeanList count]; idx190++)
        {
          [[__timMBeanList objectAtIndex: idx190] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__reqType_isset) {
    if (__reqType != nil) {
      [outProtocol writeFieldBeginWithName: @"reqType" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __reqType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 4];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter191 = [__extraMap keyEnumerator];
        id key192;
        while ((key192 = [_iter191 nextObject]))
        {
          [outProtocol writeString: key192];
          [outProtocol writeString: [__extraMap objectForKey: key192]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__threadId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'threadId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimMBeanList("];
  [ms appendString: @"threadId:"];
  [ms appendFormat: @"\"%@\"", __threadId];
  [ms appendString: @",timMBeanList:"];
  [ms appendFormat: @"%@", __timMBeanList];
  [ms appendString: @",reqType:"];
  [ms appendFormat: @"\"%@\"", __reqType];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimPBeanList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThreadId: (NSString *) threadId timPBeanList: (NSMutableArray *) timPBeanList reqType: (NSString *) reqType extraMap: (NSMutableDictionary *) extraMap
{
  self = [super init];
  __threadId = [threadId retain_stub];
  __threadId_isset = YES;
  __timPBeanList = [timPBeanList retain_stub];
  __timPBeanList_isset = YES;
  __reqType = [reqType retain_stub];
  __reqType_isset = YES;
  __extraMap = [extraMap retain_stub];
  __extraMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"threadId"])
  {
    __threadId = [[decoder decodeObjectForKey: @"threadId"] retain_stub];
    __threadId_isset = YES;
  }
  if ([decoder containsValueForKey: @"timPBeanList"])
  {
    __timPBeanList = [[decoder decodeObjectForKey: @"timPBeanList"] retain_stub];
    __timPBeanList_isset = YES;
  }
  if ([decoder containsValueForKey: @"reqType"])
  {
    __reqType = [[decoder decodeObjectForKey: @"reqType"] retain_stub];
    __reqType_isset = YES;
  }
  if ([decoder containsValueForKey: @"extraMap"])
  {
    __extraMap = [[decoder decodeObjectForKey: @"extraMap"] retain_stub];
    __extraMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__threadId_isset)
  {
    [encoder encodeObject: __threadId forKey: @"threadId"];
  }
  if (__timPBeanList_isset)
  {
    [encoder encodeObject: __timPBeanList forKey: @"timPBeanList"];
  }
  if (__reqType_isset)
  {
    [encoder encodeObject: __reqType forKey: @"reqType"];
  }
  if (__extraMap_isset)
  {
    [encoder encodeObject: __extraMap forKey: @"extraMap"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __threadId_isset ? 2654435761 : 0;
  if (__threadId_isset)
  {
    hash = (hash * 31) ^ [__threadId hash];
  }
  hash = (hash * 31) ^ __timPBeanList_isset ? 2654435761 : 0;
  if (__timPBeanList_isset)
  {
    hash = (hash * 31) ^ [__timPBeanList hash];
  }
  hash = (hash * 31) ^ __reqType_isset ? 2654435761 : 0;
  if (__reqType_isset)
  {
    hash = (hash * 31) ^ [__reqType hash];
  }
  hash = (hash * 31) ^ __extraMap_isset ? 2654435761 : 0;
  if (__extraMap_isset)
  {
    hash = (hash * 31) ^ [__extraMap hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimPBeanList class]]) {
    return NO;
  }
  TimPBeanList *other = (TimPBeanList *)anObject;
  if ((__threadId_isset != other->__threadId_isset) ||
      (__threadId_isset && ((__threadId || other->__threadId) && ![__threadId isEqual:other->__threadId]))) {
    return NO;
  }
  if ((__timPBeanList_isset != other->__timPBeanList_isset) ||
      (__timPBeanList_isset && ((__timPBeanList || other->__timPBeanList) && ![__timPBeanList isEqual:other->__timPBeanList]))) {
    return NO;
  }
  if ((__reqType_isset != other->__reqType_isset) ||
      (__reqType_isset && ((__reqType || other->__reqType) && ![__reqType isEqual:other->__reqType]))) {
    return NO;
  }
  if ((__extraMap_isset != other->__extraMap_isset) ||
      (__extraMap_isset && ((__extraMap || other->__extraMap) && ![__extraMap isEqual:other->__extraMap]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__threadId release_stub];
  [__timPBeanList release_stub];
  [__reqType release_stub];
  [__extraMap release_stub];
  [super dealloc_stub];
}

- (NSString *) threadId {
  return [[__threadId retain_stub] autorelease_stub];
}

- (void) setThreadId: (NSString *) threadId {
  [threadId retain_stub];
  [__threadId release_stub];
  __threadId = threadId;
  __threadId_isset = YES;
}

- (BOOL) threadIdIsSet {
  return __threadId_isset;
}

- (void) unsetThreadId {
  [__threadId release_stub];
  __threadId = nil;
  __threadId_isset = NO;
}

- (NSMutableArray *) timPBeanList {
  return [[__timPBeanList retain_stub] autorelease_stub];
}

- (void) setTimPBeanList: (NSMutableArray *) timPBeanList {
  [timPBeanList retain_stub];
  [__timPBeanList release_stub];
  __timPBeanList = timPBeanList;
  __timPBeanList_isset = YES;
}

- (BOOL) timPBeanListIsSet {
  return __timPBeanList_isset;
}

- (void) unsetTimPBeanList {
  [__timPBeanList release_stub];
  __timPBeanList = nil;
  __timPBeanList_isset = NO;
}

- (NSString *) reqType {
  return [[__reqType retain_stub] autorelease_stub];
}

- (void) setReqType: (NSString *) reqType {
  [reqType retain_stub];
  [__reqType release_stub];
  __reqType = reqType;
  __reqType_isset = YES;
}

- (BOOL) reqTypeIsSet {
  return __reqType_isset;
}

- (void) unsetReqType {
  [__reqType release_stub];
  __reqType = nil;
  __reqType_isset = NO;
}

- (NSMutableDictionary *) extraMap {
  return [[__extraMap retain_stub] autorelease_stub];
}

- (void) setExtraMap: (NSMutableDictionary *) extraMap {
  [extraMap retain_stub];
  [__extraMap release_stub];
  __extraMap = extraMap;
  __extraMap_isset = YES;
}

- (BOOL) extraMapIsSet {
  return __extraMap_isset;
}

- (void) unsetExtraMap {
  [__extraMap release_stub];
  __extraMap = nil;
  __extraMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setThreadId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size193;
          [inProtocol readListBeginReturningElementType: NULL size: &_size193];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size193];
          int _i194;
          for (_i194 = 0; _i194 < _size193; ++_i194)
          {
            TimPBean *_elem195 = [[TimPBean alloc] init];
            [_elem195 read: inProtocol];
            [fieldValue addObject: _elem195];
            [_elem195 release_stub];
          }
          [inProtocol readListEnd];
          [self setTimPBeanList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReqType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_MAP) {
          int _size196;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size196];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size196];
          int _i197;
          for (_i197 = 0; _i197 < _size196; ++_i197)
          {
            NSString * _key198 = [inProtocol readString];
            NSString * _val199 = [inProtocol readString];
            [fieldValue setObject: _val199 forKey: _key198];
          }
          [inProtocol readMapEnd];
          [self setExtraMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimPBeanList"];
  if (__threadId_isset) {
    if (__threadId != nil) {
      [outProtocol writeFieldBeginWithName: @"threadId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __threadId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timPBeanList_isset) {
    if (__timPBeanList != nil) {
      [outProtocol writeFieldBeginWithName: @"timPBeanList" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__timPBeanList count]];
        int idx201;
        for (idx201 = 0; idx201 < [__timPBeanList count]; idx201++)
        {
          [[__timPBeanList objectAtIndex: idx201] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__reqType_isset) {
    if (__reqType != nil) {
      [outProtocol writeFieldBeginWithName: @"reqType" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __reqType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__extraMap_isset) {
    if (__extraMap != nil) {
      [outProtocol writeFieldBeginWithName: @"extraMap" type: TType_MAP fieldID: 4];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__extraMap count]];
        NSEnumerator * _iter202 = [__extraMap keyEnumerator];
        id key203;
        while ((key203 = [_iter202 nextObject]))
        {
          [outProtocol writeString: key203];
          [outProtocol writeString: [__extraMap objectForKey: key203]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__threadId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'threadId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimPBeanList("];
  [ms appendString: @"threadId:"];
  [ms appendFormat: @"\"%@\"", __threadId];
  [ms appendString: @",timPBeanList:"];
  [ms appendFormat: @"%@", __timPBeanList];
  [ms appendString: @",reqType:"];
  [ms appendFormat: @"\"%@\"", __reqType];
  [ms appendString: @",extraMap:"];
  [ms appendFormat: @"%@", __extraMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TimPropertyBean

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThreadId: (NSString *) threadId interflow: (NSString *) interflow tls: (NSString *) tls
{
  self = [super init];
  __threadId = [threadId retain_stub];
  __threadId_isset = YES;
  __interflow = [interflow retain_stub];
  __interflow_isset = YES;
  __tls = [tls retain_stub];
  __tls_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"threadId"])
  {
    __threadId = [[decoder decodeObjectForKey: @"threadId"] retain_stub];
    __threadId_isset = YES;
  }
  if ([decoder containsValueForKey: @"interflow"])
  {
    __interflow = [[decoder decodeObjectForKey: @"interflow"] retain_stub];
    __interflow_isset = YES;
  }
  if ([decoder containsValueForKey: @"tls"])
  {
    __tls = [[decoder decodeObjectForKey: @"tls"] retain_stub];
    __tls_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__threadId_isset)
  {
    [encoder encodeObject: __threadId forKey: @"threadId"];
  }
  if (__interflow_isset)
  {
    [encoder encodeObject: __interflow forKey: @"interflow"];
  }
  if (__tls_isset)
  {
    [encoder encodeObject: __tls forKey: @"tls"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __threadId_isset ? 2654435761 : 0;
  if (__threadId_isset)
  {
    hash = (hash * 31) ^ [__threadId hash];
  }
  hash = (hash * 31) ^ __interflow_isset ? 2654435761 : 0;
  if (__interflow_isset)
  {
    hash = (hash * 31) ^ [__interflow hash];
  }
  hash = (hash * 31) ^ __tls_isset ? 2654435761 : 0;
  if (__tls_isset)
  {
    hash = (hash * 31) ^ [__tls hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimPropertyBean class]]) {
    return NO;
  }
  TimPropertyBean *other = (TimPropertyBean *)anObject;
  if ((__threadId_isset != other->__threadId_isset) ||
      (__threadId_isset && ((__threadId || other->__threadId) && ![__threadId isEqual:other->__threadId]))) {
    return NO;
  }
  if ((__interflow_isset != other->__interflow_isset) ||
      (__interflow_isset && ((__interflow || other->__interflow) && ![__interflow isEqual:other->__interflow]))) {
    return NO;
  }
  if ((__tls_isset != other->__tls_isset) ||
      (__tls_isset && ((__tls || other->__tls) && ![__tls isEqual:other->__tls]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__threadId release_stub];
  [__interflow release_stub];
  [__tls release_stub];
  [super dealloc_stub];
}

- (NSString *) threadId {
  return [[__threadId retain_stub] autorelease_stub];
}

- (void) setThreadId: (NSString *) threadId {
  [threadId retain_stub];
  [__threadId release_stub];
  __threadId = threadId;
  __threadId_isset = YES;
}

- (BOOL) threadIdIsSet {
  return __threadId_isset;
}

- (void) unsetThreadId {
  [__threadId release_stub];
  __threadId = nil;
  __threadId_isset = NO;
}

- (NSString *) interflow {
  return [[__interflow retain_stub] autorelease_stub];
}

- (void) setInterflow: (NSString *) interflow {
  [interflow retain_stub];
  [__interflow release_stub];
  __interflow = interflow;
  __interflow_isset = YES;
}

- (BOOL) interflowIsSet {
  return __interflow_isset;
}

- (void) unsetInterflow {
  [__interflow release_stub];
  __interflow = nil;
  __interflow_isset = NO;
}

- (NSString *) tls {
  return [[__tls retain_stub] autorelease_stub];
}

- (void) setTls: (NSString *) tls {
  [tls retain_stub];
  [__tls release_stub];
  __tls = tls;
  __tls_isset = YES;
}

- (BOOL) tlsIsSet {
  return __tls_isset;
}

- (void) unsetTls {
  [__tls release_stub];
  __tls = nil;
  __tls_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setThreadId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInterflow: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTls: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimPropertyBean"];
  if (__threadId_isset) {
    if (__threadId != nil) {
      [outProtocol writeFieldBeginWithName: @"threadId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __threadId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__interflow_isset) {
    if (__interflow != nil) {
      [outProtocol writeFieldBeginWithName: @"interflow" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __interflow];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tls_isset) {
    if (__tls != nil) {
      [outProtocol writeFieldBeginWithName: @"tls" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __tls];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimPropertyBean("];
  [ms appendString: @"threadId:"];
  [ms appendFormat: @"\"%@\"", __threadId];
  [ms appendString: @",interflow:"];
  [ms appendFormat: @"\"%@\"", __interflow];
  [ms appendString: @",tls:"];
  [ms appendFormat: @"\"%@\"", __tls];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static int32_t protocolversion = 4;
static NSString * protocolversionName = @"1.1.0";
static NSString * TIM_SC_SUCCESS = @"200";
static NSString * TIM_SC_FAILED = @"400";

@implementation timConstants
+ (void) initialize {
}
+ (int32_t) protocolversion{
  return protocolversion;
}
+ (NSString *) protocolversionName{
  return protocolversionName;
}
+ (NSString *) TIM_SC_SUCCESS{
  return TIM_SC_SUCCESS;
}
+ (NSString *) TIM_SC_FAILED{
  return TIM_SC_FAILED;
}
@end

@interface timStream_args : NSObject <TBase, NSCoding> {
  TimParam * __param;

  BOOL __param_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=param, setter=setParam:) TimParam * param;
#endif

- (id) init;
- (id) initWithParam: (TimParam *) param;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimParam *) param;
- (void) setParam: (TimParam *) param;
#endif
- (BOOL) paramIsSet;

@end

@implementation timStream_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithParam: (TimParam *) param
{
  self = [super init];
  __param = [param retain_stub];
  __param_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"param"])
  {
    __param = [[decoder decodeObjectForKey: @"param"] retain_stub];
    __param_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__param_isset)
  {
    [encoder encodeObject: __param forKey: @"param"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __param_isset ? 2654435761 : 0;
  if (__param_isset)
  {
    hash = (hash * 31) ^ [__param hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timStream_args class]]) {
    return NO;
  }
  timStream_args *other = (timStream_args *)anObject;
  if ((__param_isset != other->__param_isset) ||
      (__param_isset && ((__param || other->__param) && ![__param isEqual:other->__param]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__param release_stub];
  [super dealloc_stub];
}

- (TimParam *) param {
  return [[__param retain_stub] autorelease_stub];
}

- (void) setParam: (TimParam *) param {
  [param retain_stub];
  [__param release_stub];
  __param = param;
  __param_isset = YES;
}

- (BOOL) paramIsSet {
  return __param_isset;
}

- (void) unsetParam {
  [__param release_stub];
  __param = nil;
  __param_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimParam *fieldValue = [[TimParam alloc] init];
          [fieldValue read: inProtocol];
          [self setParam: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timStream_args"];
  if (__param_isset) {
    if (__param != nil) {
      [outProtocol writeFieldBeginWithName: @"param" type: TType_STRUCT fieldID: 1];
      [__param write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timStream_args("];
  [ms appendString: @"param:"];
  [ms appendFormat: @"%@", __param];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timStarttls_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation timStarttls_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timStarttls_args class]]) {
    return NO;
  }
  timStarttls_args *other = (timStarttls_args *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timStarttls_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timStarttls_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timLogin_args : NSObject <TBase, NSCoding> {
  Tid * __tid;
  NSString * __pwd;

  BOOL __tid_isset;
  BOOL __pwd_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=tid, setter=setTid:) Tid * tid;
@property (nonatomic, retain, getter=pwd, setter=setPwd:) NSString * pwd;
#endif

- (id) init;
- (id) initWithTid: (Tid *) tid pwd: (NSString *) pwd;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Tid *) tid;
- (void) setTid: (Tid *) tid;
#endif
- (BOOL) tidIsSet;

#if !__has_feature(objc_arc)
- (NSString *) pwd;
- (void) setPwd: (NSString *) pwd;
#endif
- (BOOL) pwdIsSet;

@end

@implementation timLogin_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTid: (Tid *) tid pwd: (NSString *) pwd
{
  self = [super init];
  __tid = [tid retain_stub];
  __tid_isset = YES;
  __pwd = [pwd retain_stub];
  __pwd_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tid"])
  {
    __tid = [[decoder decodeObjectForKey: @"tid"] retain_stub];
    __tid_isset = YES;
  }
  if ([decoder containsValueForKey: @"pwd"])
  {
    __pwd = [[decoder decodeObjectForKey: @"pwd"] retain_stub];
    __pwd_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tid_isset)
  {
    [encoder encodeObject: __tid forKey: @"tid"];
  }
  if (__pwd_isset)
  {
    [encoder encodeObject: __pwd forKey: @"pwd"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __tid_isset ? 2654435761 : 0;
  if (__tid_isset)
  {
    hash = (hash * 31) ^ [__tid hash];
  }
  hash = (hash * 31) ^ __pwd_isset ? 2654435761 : 0;
  if (__pwd_isset)
  {
    hash = (hash * 31) ^ [__pwd hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timLogin_args class]]) {
    return NO;
  }
  timLogin_args *other = (timLogin_args *)anObject;
  if ((__tid_isset != other->__tid_isset) ||
      (__tid_isset && ((__tid || other->__tid) && ![__tid isEqual:other->__tid]))) {
    return NO;
  }
  if ((__pwd_isset != other->__pwd_isset) ||
      (__pwd_isset && ((__pwd || other->__pwd) && ![__pwd isEqual:other->__pwd]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__tid release_stub];
  [__pwd release_stub];
  [super dealloc_stub];
}

- (Tid *) tid {
  return [[__tid retain_stub] autorelease_stub];
}

- (void) setTid: (Tid *) tid {
  [tid retain_stub];
  [__tid release_stub];
  __tid = tid;
  __tid_isset = YES;
}

- (BOOL) tidIsSet {
  return __tid_isset;
}

- (void) unsetTid {
  [__tid release_stub];
  __tid = nil;
  __tid_isset = NO;
}

- (NSString *) pwd {
  return [[__pwd retain_stub] autorelease_stub];
}

- (void) setPwd: (NSString *) pwd {
  [pwd retain_stub];
  [__pwd release_stub];
  __pwd = pwd;
  __pwd_isset = YES;
}

- (BOOL) pwdIsSet {
  return __pwd_isset;
}

- (void) unsetPwd {
  [__pwd release_stub];
  __pwd = nil;
  __pwd_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timLogin_args"];
  if (__tid_isset) {
    if (__tid != nil) {
      [outProtocol writeFieldBeginWithName: @"tid" type: TType_STRUCT fieldID: 1];
      [__tid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pwd_isset) {
    if (__pwd != nil) {
      [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pwd];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timLogin_args("];
  [ms appendString: @"tid:"];
  [ms appendFormat: @"%@", __tid];
  [ms appendString: @",pwd:"];
  [ms appendFormat: @"\"%@\"", __pwd];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timAck_args : NSObject <TBase, NSCoding> {
  TimAckBean * __ab;

  BOOL __ab_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ab, setter=setAb:) TimAckBean * ab;
#endif

- (id) init;
- (id) initWithAb: (TimAckBean *) ab;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimAckBean *) ab;
- (void) setAb: (TimAckBean *) ab;
#endif
- (BOOL) abIsSet;

@end

@implementation timAck_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAb: (TimAckBean *) ab
{
  self = [super init];
  __ab = [ab retain_stub];
  __ab_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ab"])
  {
    __ab = [[decoder decodeObjectForKey: @"ab"] retain_stub];
    __ab_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ab_isset)
  {
    [encoder encodeObject: __ab forKey: @"ab"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __ab_isset ? 2654435761 : 0;
  if (__ab_isset)
  {
    hash = (hash * 31) ^ [__ab hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timAck_args class]]) {
    return NO;
  }
  timAck_args *other = (timAck_args *)anObject;
  if ((__ab_isset != other->__ab_isset) ||
      (__ab_isset && ((__ab || other->__ab) && ![__ab isEqual:other->__ab]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__ab release_stub];
  [super dealloc_stub];
}

- (TimAckBean *) ab {
  return [[__ab retain_stub] autorelease_stub];
}

- (void) setAb: (TimAckBean *) ab {
  [ab retain_stub];
  [__ab release_stub];
  __ab = ab;
  __ab_isset = YES;
}

- (BOOL) abIsSet {
  return __ab_isset;
}

- (void) unsetAb {
  [__ab release_stub];
  __ab = nil;
  __ab_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimAckBean *fieldValue = [[TimAckBean alloc] init];
          [fieldValue read: inProtocol];
          [self setAb: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timAck_args"];
  if (__ab_isset) {
    if (__ab != nil) {
      [outProtocol writeFieldBeginWithName: @"ab" type: TType_STRUCT fieldID: 1];
      [__ab write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timAck_args("];
  [ms appendString: @"ab:"];
  [ms appendFormat: @"%@", __ab];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timPresence_args : NSObject <TBase, NSCoding> {
  TimPBean * __pbean;

  BOOL __pbean_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=pbean, setter=setPbean:) TimPBean * pbean;
#endif

- (id) init;
- (id) initWithPbean: (TimPBean *) pbean;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimPBean *) pbean;
- (void) setPbean: (TimPBean *) pbean;
#endif
- (BOOL) pbeanIsSet;

@end

@implementation timPresence_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPbean: (TimPBean *) pbean
{
  self = [super init];
  __pbean = [pbean retain_stub];
  __pbean_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pbean"])
  {
    __pbean = [[decoder decodeObjectForKey: @"pbean"] retain_stub];
    __pbean_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pbean_isset)
  {
    [encoder encodeObject: __pbean forKey: @"pbean"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __pbean_isset ? 2654435761 : 0;
  if (__pbean_isset)
  {
    hash = (hash * 31) ^ [__pbean hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timPresence_args class]]) {
    return NO;
  }
  timPresence_args *other = (timPresence_args *)anObject;
  if ((__pbean_isset != other->__pbean_isset) ||
      (__pbean_isset && ((__pbean || other->__pbean) && ![__pbean isEqual:other->__pbean]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__pbean release_stub];
  [super dealloc_stub];
}

- (TimPBean *) pbean {
  return [[__pbean retain_stub] autorelease_stub];
}

- (void) setPbean: (TimPBean *) pbean {
  [pbean retain_stub];
  [__pbean release_stub];
  __pbean = pbean;
  __pbean_isset = YES;
}

- (BOOL) pbeanIsSet {
  return __pbean_isset;
}

- (void) unsetPbean {
  [__pbean release_stub];
  __pbean = nil;
  __pbean_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimPBean *fieldValue = [[TimPBean alloc] init];
          [fieldValue read: inProtocol];
          [self setPbean: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timPresence_args"];
  if (__pbean_isset) {
    if (__pbean != nil) {
      [outProtocol writeFieldBeginWithName: @"pbean" type: TType_STRUCT fieldID: 1];
      [__pbean write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timPresence_args("];
  [ms appendString: @"pbean:"];
  [ms appendFormat: @"%@", __pbean];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timMessage_args : NSObject <TBase, NSCoding> {
  TimMBean * __mbean;

  BOOL __mbean_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=mbean, setter=setMbean:) TimMBean * mbean;
#endif

- (id) init;
- (id) initWithMbean: (TimMBean *) mbean;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimMBean *) mbean;
- (void) setMbean: (TimMBean *) mbean;
#endif
- (BOOL) mbeanIsSet;

@end

@implementation timMessage_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMbean: (TimMBean *) mbean
{
  self = [super init];
  __mbean = [mbean retain_stub];
  __mbean_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mbean"])
  {
    __mbean = [[decoder decodeObjectForKey: @"mbean"] retain_stub];
    __mbean_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mbean_isset)
  {
    [encoder encodeObject: __mbean forKey: @"mbean"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __mbean_isset ? 2654435761 : 0;
  if (__mbean_isset)
  {
    hash = (hash * 31) ^ [__mbean hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timMessage_args class]]) {
    return NO;
  }
  timMessage_args *other = (timMessage_args *)anObject;
  if ((__mbean_isset != other->__mbean_isset) ||
      (__mbean_isset && ((__mbean || other->__mbean) && ![__mbean isEqual:other->__mbean]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__mbean release_stub];
  [super dealloc_stub];
}

- (TimMBean *) mbean {
  return [[__mbean retain_stub] autorelease_stub];
}

- (void) setMbean: (TimMBean *) mbean {
  [mbean retain_stub];
  [__mbean release_stub];
  __mbean = mbean;
  __mbean_isset = YES;
}

- (BOOL) mbeanIsSet {
  return __mbean_isset;
}

- (void) unsetMbean {
  [__mbean release_stub];
  __mbean = nil;
  __mbean_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimMBean *fieldValue = [[TimMBean alloc] init];
          [fieldValue read: inProtocol];
          [self setMbean: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timMessage_args"];
  if (__mbean_isset) {
    if (__mbean != nil) {
      [outProtocol writeFieldBeginWithName: @"mbean" type: TType_STRUCT fieldID: 1];
      [__mbean write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timMessage_args("];
  [ms appendString: @"mbean:"];
  [ms appendFormat: @"%@", __mbean];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timPing_args : NSObject <TBase, NSCoding> {
  NSString * __threadId;

  BOOL __threadId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=threadId, setter=setThreadId:) NSString * threadId;
#endif

- (id) init;
- (id) initWithThreadId: (NSString *) threadId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) threadId;
- (void) setThreadId: (NSString *) threadId;
#endif
- (BOOL) threadIdIsSet;

@end

@implementation timPing_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThreadId: (NSString *) threadId
{
  self = [super init];
  __threadId = [threadId retain_stub];
  __threadId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"threadId"])
  {
    __threadId = [[decoder decodeObjectForKey: @"threadId"] retain_stub];
    __threadId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__threadId_isset)
  {
    [encoder encodeObject: __threadId forKey: @"threadId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __threadId_isset ? 2654435761 : 0;
  if (__threadId_isset)
  {
    hash = (hash * 31) ^ [__threadId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timPing_args class]]) {
    return NO;
  }
  timPing_args *other = (timPing_args *)anObject;
  if ((__threadId_isset != other->__threadId_isset) ||
      (__threadId_isset && ((__threadId || other->__threadId) && ![__threadId isEqual:other->__threadId]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__threadId release_stub];
  [super dealloc_stub];
}

- (NSString *) threadId {
  return [[__threadId retain_stub] autorelease_stub];
}

- (void) setThreadId: (NSString *) threadId {
  [threadId retain_stub];
  [__threadId release_stub];
  __threadId = threadId;
  __threadId_isset = YES;
}

- (BOOL) threadIdIsSet {
  return __threadId_isset;
}

- (void) unsetThreadId {
  [__threadId release_stub];
  __threadId = nil;
  __threadId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setThreadId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timPing_args"];
  if (__threadId_isset) {
    if (__threadId != nil) {
      [outProtocol writeFieldBeginWithName: @"threadId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __threadId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timPing_args("];
  [ms appendString: @"threadId:"];
  [ms appendFormat: @"\"%@\"", __threadId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timError_args : NSObject <TBase, NSCoding> {
  TimError * __e;

  BOOL __e_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=e, setter=setE:) TimError * e;
#endif

- (id) init;
- (id) initWithE: (TimError *) e;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimError *) e;
- (void) setE: (TimError *) e;
#endif
- (BOOL) eIsSet;

@end

@implementation timError_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithE: (TimError *) e
{
  self = [super init];
  __e = [e retain_stub];
  __e_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"e"])
  {
    __e = [[decoder decodeObjectForKey: @"e"] retain_stub];
    __e_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__e_isset)
  {
    [encoder encodeObject: __e forKey: @"e"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __e_isset ? 2654435761 : 0;
  if (__e_isset)
  {
    hash = (hash * 31) ^ [__e hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timError_args class]]) {
    return NO;
  }
  timError_args *other = (timError_args *)anObject;
  if ((__e_isset != other->__e_isset) ||
      (__e_isset && ((__e || other->__e) && ![__e isEqual:other->__e]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__e release_stub];
  [super dealloc_stub];
}

- (TimError *) e {
  return [[__e retain_stub] autorelease_stub];
}

- (void) setE: (TimError *) e {
  [e retain_stub];
  [__e release_stub];
  __e = e;
  __e_isset = YES;
}

- (BOOL) eIsSet {
  return __e_isset;
}

- (void) unsetE {
  [__e release_stub];
  __e = nil;
  __e_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimError *fieldValue = [[TimError alloc] init];
          [fieldValue read: inProtocol];
          [self setE: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timError_args"];
  if (__e_isset) {
    if (__e != nil) {
      [outProtocol writeFieldBeginWithName: @"e" type: TType_STRUCT fieldID: 1];
      [__e write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timError_args("];
  [ms appendString: @"e:"];
  [ms appendFormat: @"%@", __e];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timLogout_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation timLogout_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timLogout_args class]]) {
    return NO;
  }
  timLogout_args *other = (timLogout_args *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timLogout_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timLogout_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timRegist_args : NSObject <TBase, NSCoding> {
  Tid * __tid;
  NSString * __auth;

  BOOL __tid_isset;
  BOOL __auth_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=tid, setter=setTid:) Tid * tid;
@property (nonatomic, retain, getter=auth, setter=setAuth:) NSString * auth;
#endif

- (id) init;
- (id) initWithTid: (Tid *) tid auth: (NSString *) auth;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Tid *) tid;
- (void) setTid: (Tid *) tid;
#endif
- (BOOL) tidIsSet;

#if !__has_feature(objc_arc)
- (NSString *) auth;
- (void) setAuth: (NSString *) auth;
#endif
- (BOOL) authIsSet;

@end

@implementation timRegist_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTid: (Tid *) tid auth: (NSString *) auth
{
  self = [super init];
  __tid = [tid retain_stub];
  __tid_isset = YES;
  __auth = [auth retain_stub];
  __auth_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tid"])
  {
    __tid = [[decoder decodeObjectForKey: @"tid"] retain_stub];
    __tid_isset = YES;
  }
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tid_isset)
  {
    [encoder encodeObject: __tid forKey: @"tid"];
  }
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __tid_isset ? 2654435761 : 0;
  if (__tid_isset)
  {
    hash = (hash * 31) ^ [__tid hash];
  }
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timRegist_args class]]) {
    return NO;
  }
  timRegist_args *other = (timRegist_args *)anObject;
  if ((__tid_isset != other->__tid_isset) ||
      (__tid_isset && ((__tid || other->__tid) && ![__tid isEqual:other->__tid]))) {
    return NO;
  }
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__tid release_stub];
  [__auth release_stub];
  [super dealloc_stub];
}

- (Tid *) tid {
  return [[__tid retain_stub] autorelease_stub];
}

- (void) setTid: (Tid *) tid {
  [tid retain_stub];
  [__tid release_stub];
  __tid = tid;
  __tid_isset = YES;
}

- (BOOL) tidIsSet {
  return __tid_isset;
}

- (void) unsetTid {
  [__tid release_stub];
  __tid = nil;
  __tid_isset = NO;
}

- (NSString *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (NSString *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuth: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timRegist_args"];
  if (__tid_isset) {
    if (__tid != nil) {
      [outProtocol writeFieldBeginWithName: @"tid" type: TType_STRUCT fieldID: 1];
      [__tid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __auth];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timRegist_args("];
  [ms appendString: @"tid:"];
  [ms appendFormat: @"%@", __tid];
  [ms appendString: @",auth:"];
  [ms appendFormat: @"\"%@\"", __auth];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timRoser_args : NSObject <TBase, NSCoding> {
  TimRoster * __roster;

  BOOL __roster_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=roster, setter=setRoster:) TimRoster * roster;
#endif

- (id) init;
- (id) initWithRoster: (TimRoster *) roster;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimRoster *) roster;
- (void) setRoster: (TimRoster *) roster;
#endif
- (BOOL) rosterIsSet;

@end

@implementation timRoser_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRoster: (TimRoster *) roster
{
  self = [super init];
  __roster = [roster retain_stub];
  __roster_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"roster"])
  {
    __roster = [[decoder decodeObjectForKey: @"roster"] retain_stub];
    __roster_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__roster_isset)
  {
    [encoder encodeObject: __roster forKey: @"roster"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __roster_isset ? 2654435761 : 0;
  if (__roster_isset)
  {
    hash = (hash * 31) ^ [__roster hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timRoser_args class]]) {
    return NO;
  }
  timRoser_args *other = (timRoser_args *)anObject;
  if ((__roster_isset != other->__roster_isset) ||
      (__roster_isset && ((__roster || other->__roster) && ![__roster isEqual:other->__roster]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__roster release_stub];
  [super dealloc_stub];
}

- (TimRoster *) roster {
  return [[__roster retain_stub] autorelease_stub];
}

- (void) setRoster: (TimRoster *) roster {
  [roster retain_stub];
  [__roster release_stub];
  __roster = roster;
  __roster_isset = YES;
}

- (BOOL) rosterIsSet {
  return __roster_isset;
}

- (void) unsetRoster {
  [__roster release_stub];
  __roster = nil;
  __roster_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimRoster *fieldValue = [[TimRoster alloc] init];
          [fieldValue read: inProtocol];
          [self setRoster: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timRoser_args"];
  if (__roster_isset) {
    if (__roster != nil) {
      [outProtocol writeFieldBeginWithName: @"roster" type: TType_STRUCT fieldID: 1];
      [__roster write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timRoser_args("];
  [ms appendString: @"roster:"];
  [ms appendFormat: @"%@", __roster];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timMessageList_args : NSObject <TBase, NSCoding> {
  TimMBeanList * __mbeanList;

  BOOL __mbeanList_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=mbeanList, setter=setMbeanList:) TimMBeanList * mbeanList;
#endif

- (id) init;
- (id) initWithMbeanList: (TimMBeanList *) mbeanList;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimMBeanList *) mbeanList;
- (void) setMbeanList: (TimMBeanList *) mbeanList;
#endif
- (BOOL) mbeanListIsSet;

@end

@implementation timMessageList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMbeanList: (TimMBeanList *) mbeanList
{
  self = [super init];
  __mbeanList = [mbeanList retain_stub];
  __mbeanList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mbeanList"])
  {
    __mbeanList = [[decoder decodeObjectForKey: @"mbeanList"] retain_stub];
    __mbeanList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mbeanList_isset)
  {
    [encoder encodeObject: __mbeanList forKey: @"mbeanList"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __mbeanList_isset ? 2654435761 : 0;
  if (__mbeanList_isset)
  {
    hash = (hash * 31) ^ [__mbeanList hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timMessageList_args class]]) {
    return NO;
  }
  timMessageList_args *other = (timMessageList_args *)anObject;
  if ((__mbeanList_isset != other->__mbeanList_isset) ||
      (__mbeanList_isset && ((__mbeanList || other->__mbeanList) && ![__mbeanList isEqual:other->__mbeanList]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__mbeanList release_stub];
  [super dealloc_stub];
}

- (TimMBeanList *) mbeanList {
  return [[__mbeanList retain_stub] autorelease_stub];
}

- (void) setMbeanList: (TimMBeanList *) mbeanList {
  [mbeanList retain_stub];
  [__mbeanList release_stub];
  __mbeanList = mbeanList;
  __mbeanList_isset = YES;
}

- (BOOL) mbeanListIsSet {
  return __mbeanList_isset;
}

- (void) unsetMbeanList {
  [__mbeanList release_stub];
  __mbeanList = nil;
  __mbeanList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimMBeanList *fieldValue = [[TimMBeanList alloc] init];
          [fieldValue read: inProtocol];
          [self setMbeanList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timMessageList_args"];
  if (__mbeanList_isset) {
    if (__mbeanList != nil) {
      [outProtocol writeFieldBeginWithName: @"mbeanList" type: TType_STRUCT fieldID: 1];
      [__mbeanList write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timMessageList_args("];
  [ms appendString: @"mbeanList:"];
  [ms appendFormat: @"%@", __mbeanList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timPresenceList_args : NSObject <TBase, NSCoding> {
  TimPBeanList * __pbeanList;

  BOOL __pbeanList_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=pbeanList, setter=setPbeanList:) TimPBeanList * pbeanList;
#endif

- (id) init;
- (id) initWithPbeanList: (TimPBeanList *) pbeanList;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimPBeanList *) pbeanList;
- (void) setPbeanList: (TimPBeanList *) pbeanList;
#endif
- (BOOL) pbeanListIsSet;

@end

@implementation timPresenceList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPbeanList: (TimPBeanList *) pbeanList
{
  self = [super init];
  __pbeanList = [pbeanList retain_stub];
  __pbeanList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pbeanList"])
  {
    __pbeanList = [[decoder decodeObjectForKey: @"pbeanList"] retain_stub];
    __pbeanList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pbeanList_isset)
  {
    [encoder encodeObject: __pbeanList forKey: @"pbeanList"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __pbeanList_isset ? 2654435761 : 0;
  if (__pbeanList_isset)
  {
    hash = (hash * 31) ^ [__pbeanList hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timPresenceList_args class]]) {
    return NO;
  }
  timPresenceList_args *other = (timPresenceList_args *)anObject;
  if ((__pbeanList_isset != other->__pbeanList_isset) ||
      (__pbeanList_isset && ((__pbeanList || other->__pbeanList) && ![__pbeanList isEqual:other->__pbeanList]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__pbeanList release_stub];
  [super dealloc_stub];
}

- (TimPBeanList *) pbeanList {
  return [[__pbeanList retain_stub] autorelease_stub];
}

- (void) setPbeanList: (TimPBeanList *) pbeanList {
  [pbeanList retain_stub];
  [__pbeanList release_stub];
  __pbeanList = pbeanList;
  __pbeanList_isset = YES;
}

- (BOOL) pbeanListIsSet {
  return __pbeanList_isset;
}

- (void) unsetPbeanList {
  [__pbeanList release_stub];
  __pbeanList = nil;
  __pbeanList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimPBeanList *fieldValue = [[TimPBeanList alloc] init];
          [fieldValue read: inProtocol];
          [self setPbeanList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timPresenceList_args"];
  if (__pbeanList_isset) {
    if (__pbeanList != nil) {
      [outProtocol writeFieldBeginWithName: @"pbeanList" type: TType_STRUCT fieldID: 1];
      [__pbeanList write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timPresenceList_args("];
  [ms appendString: @"pbeanList:"];
  [ms appendFormat: @"%@", __pbeanList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timMessageIq_args : NSObject <TBase, NSCoding> {
  TimMessageIq * __timMsgIq;
  NSString * __iqType;

  BOOL __timMsgIq_isset;
  BOOL __iqType_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=timMsgIq, setter=setTimMsgIq:) TimMessageIq * timMsgIq;
@property (nonatomic, retain, getter=iqType, setter=setIqType:) NSString * iqType;
#endif

- (id) init;
- (id) initWithTimMsgIq: (TimMessageIq *) timMsgIq iqType: (NSString *) iqType;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimMessageIq *) timMsgIq;
- (void) setTimMsgIq: (TimMessageIq *) timMsgIq;
#endif
- (BOOL) timMsgIqIsSet;

#if !__has_feature(objc_arc)
- (NSString *) iqType;
- (void) setIqType: (NSString *) iqType;
#endif
- (BOOL) iqTypeIsSet;

@end

@implementation timMessageIq_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTimMsgIq: (TimMessageIq *) timMsgIq iqType: (NSString *) iqType
{
  self = [super init];
  __timMsgIq = [timMsgIq retain_stub];
  __timMsgIq_isset = YES;
  __iqType = [iqType retain_stub];
  __iqType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"timMsgIq"])
  {
    __timMsgIq = [[decoder decodeObjectForKey: @"timMsgIq"] retain_stub];
    __timMsgIq_isset = YES;
  }
  if ([decoder containsValueForKey: @"iqType"])
  {
    __iqType = [[decoder decodeObjectForKey: @"iqType"] retain_stub];
    __iqType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__timMsgIq_isset)
  {
    [encoder encodeObject: __timMsgIq forKey: @"timMsgIq"];
  }
  if (__iqType_isset)
  {
    [encoder encodeObject: __iqType forKey: @"iqType"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __timMsgIq_isset ? 2654435761 : 0;
  if (__timMsgIq_isset)
  {
    hash = (hash * 31) ^ [__timMsgIq hash];
  }
  hash = (hash * 31) ^ __iqType_isset ? 2654435761 : 0;
  if (__iqType_isset)
  {
    hash = (hash * 31) ^ [__iqType hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timMessageIq_args class]]) {
    return NO;
  }
  timMessageIq_args *other = (timMessageIq_args *)anObject;
  if ((__timMsgIq_isset != other->__timMsgIq_isset) ||
      (__timMsgIq_isset && ((__timMsgIq || other->__timMsgIq) && ![__timMsgIq isEqual:other->__timMsgIq]))) {
    return NO;
  }
  if ((__iqType_isset != other->__iqType_isset) ||
      (__iqType_isset && ((__iqType || other->__iqType) && ![__iqType isEqual:other->__iqType]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__timMsgIq release_stub];
  [__iqType release_stub];
  [super dealloc_stub];
}

- (TimMessageIq *) timMsgIq {
  return [[__timMsgIq retain_stub] autorelease_stub];
}

- (void) setTimMsgIq: (TimMessageIq *) timMsgIq {
  [timMsgIq retain_stub];
  [__timMsgIq release_stub];
  __timMsgIq = timMsgIq;
  __timMsgIq_isset = YES;
}

- (BOOL) timMsgIqIsSet {
  return __timMsgIq_isset;
}

- (void) unsetTimMsgIq {
  [__timMsgIq release_stub];
  __timMsgIq = nil;
  __timMsgIq_isset = NO;
}

- (NSString *) iqType {
  return [[__iqType retain_stub] autorelease_stub];
}

- (void) setIqType: (NSString *) iqType {
  [iqType retain_stub];
  [__iqType release_stub];
  __iqType = iqType;
  __iqType_isset = YES;
}

- (BOOL) iqTypeIsSet {
  return __iqType_isset;
}

- (void) unsetIqType {
  [__iqType release_stub];
  __iqType = nil;
  __iqType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimMessageIq *fieldValue = [[TimMessageIq alloc] init];
          [fieldValue read: inProtocol];
          [self setTimMsgIq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIqType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timMessageIq_args"];
  if (__timMsgIq_isset) {
    if (__timMsgIq != nil) {
      [outProtocol writeFieldBeginWithName: @"timMsgIq" type: TType_STRUCT fieldID: 1];
      [__timMsgIq write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iqType_isset) {
    if (__iqType != nil) {
      [outProtocol writeFieldBeginWithName: @"iqType" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iqType];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timMessageIq_args("];
  [ms appendString: @"timMsgIq:"];
  [ms appendFormat: @"%@", __timMsgIq];
  [ms appendString: @",iqType:"];
  [ms appendFormat: @"\"%@\"", __iqType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timMessageResult_args : NSObject <TBase, NSCoding> {
  TimMBean * __mbean;

  BOOL __mbean_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=mbean, setter=setMbean:) TimMBean * mbean;
#endif

- (id) init;
- (id) initWithMbean: (TimMBean *) mbean;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimMBean *) mbean;
- (void) setMbean: (TimMBean *) mbean;
#endif
- (BOOL) mbeanIsSet;

@end

@implementation timMessageResult_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMbean: (TimMBean *) mbean
{
  self = [super init];
  __mbean = [mbean retain_stub];
  __mbean_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mbean"])
  {
    __mbean = [[decoder decodeObjectForKey: @"mbean"] retain_stub];
    __mbean_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mbean_isset)
  {
    [encoder encodeObject: __mbean forKey: @"mbean"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __mbean_isset ? 2654435761 : 0;
  if (__mbean_isset)
  {
    hash = (hash * 31) ^ [__mbean hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timMessageResult_args class]]) {
    return NO;
  }
  timMessageResult_args *other = (timMessageResult_args *)anObject;
  if ((__mbean_isset != other->__mbean_isset) ||
      (__mbean_isset && ((__mbean || other->__mbean) && ![__mbean isEqual:other->__mbean]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__mbean release_stub];
  [super dealloc_stub];
}

- (TimMBean *) mbean {
  return [[__mbean retain_stub] autorelease_stub];
}

- (void) setMbean: (TimMBean *) mbean {
  [mbean retain_stub];
  [__mbean release_stub];
  __mbean = mbean;
  __mbean_isset = YES;
}

- (BOOL) mbeanIsSet {
  return __mbean_isset;
}

- (void) unsetMbean {
  [__mbean release_stub];
  __mbean = nil;
  __mbean_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimMBean *fieldValue = [[TimMBean alloc] init];
          [fieldValue read: inProtocol];
          [self setMbean: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timMessageResult_args"];
  if (__mbean_isset) {
    if (__mbean != nil) {
      [outProtocol writeFieldBeginWithName: @"mbean" type: TType_STRUCT fieldID: 1];
      [__mbean write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timMessageResult_args("];
  [ms appendString: @"mbean:"];
  [ms appendFormat: @"%@", __mbean];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timProperty_args : NSObject <TBase, NSCoding> {
  TimPropertyBean * __tpb;

  BOOL __tpb_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=tpb, setter=setTpb:) TimPropertyBean * tpb;
#endif

- (id) init;
- (id) initWithTpb: (TimPropertyBean *) tpb;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimPropertyBean *) tpb;
- (void) setTpb: (TimPropertyBean *) tpb;
#endif
- (BOOL) tpbIsSet;

@end

@implementation timProperty_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTpb: (TimPropertyBean *) tpb
{
  self = [super init];
  __tpb = [tpb retain_stub];
  __tpb_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tpb"])
  {
    __tpb = [[decoder decodeObjectForKey: @"tpb"] retain_stub];
    __tpb_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tpb_isset)
  {
    [encoder encodeObject: __tpb forKey: @"tpb"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __tpb_isset ? 2654435761 : 0;
  if (__tpb_isset)
  {
    hash = (hash * 31) ^ [__tpb hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timProperty_args class]]) {
    return NO;
  }
  timProperty_args *other = (timProperty_args *)anObject;
  if ((__tpb_isset != other->__tpb_isset) ||
      (__tpb_isset && ((__tpb || other->__tpb) && ![__tpb isEqual:other->__tpb]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__tpb release_stub];
  [super dealloc_stub];
}

- (TimPropertyBean *) tpb {
  return [[__tpb retain_stub] autorelease_stub];
}

- (void) setTpb: (TimPropertyBean *) tpb {
  [tpb retain_stub];
  [__tpb release_stub];
  __tpb = tpb;
  __tpb_isset = YES;
}

- (BOOL) tpbIsSet {
  return __tpb_isset;
}

- (void) unsetTpb {
  [__tpb release_stub];
  __tpb = nil;
  __tpb_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimPropertyBean *fieldValue = [[TimPropertyBean alloc] init];
          [fieldValue read: inProtocol];
          [self setTpb: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timProperty_args"];
  if (__tpb_isset) {
    if (__tpb != nil) {
      [outProtocol writeFieldBeginWithName: @"tpb" type: TType_STRUCT fieldID: 1];
      [__tpb write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timProperty_args("];
  [ms appendString: @"tpb:"];
  [ms appendFormat: @"%@", __tpb];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timRemoteUserAuth_args : NSObject <TBase, NSCoding> {
  Tid * __tid;
  NSString * __pwd;
  TimAuth * __auth;

  BOOL __tid_isset;
  BOOL __pwd_isset;
  BOOL __auth_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=tid, setter=setTid:) Tid * tid;
@property (nonatomic, retain, getter=pwd, setter=setPwd:) NSString * pwd;
@property (nonatomic, retain, getter=auth, setter=setAuth:) TimAuth * auth;
#endif

- (id) init;
- (id) initWithTid: (Tid *) tid pwd: (NSString *) pwd auth: (TimAuth *) auth;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Tid *) tid;
- (void) setTid: (Tid *) tid;
#endif
- (BOOL) tidIsSet;

#if !__has_feature(objc_arc)
- (NSString *) pwd;
- (void) setPwd: (NSString *) pwd;
#endif
- (BOOL) pwdIsSet;

#if !__has_feature(objc_arc)
- (TimAuth *) auth;
- (void) setAuth: (TimAuth *) auth;
#endif
- (BOOL) authIsSet;

@end

@implementation timRemoteUserAuth_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTid: (Tid *) tid pwd: (NSString *) pwd auth: (TimAuth *) auth
{
  self = [super init];
  __tid = [tid retain_stub];
  __tid_isset = YES;
  __pwd = [pwd retain_stub];
  __pwd_isset = YES;
  __auth = [auth retain_stub];
  __auth_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tid"])
  {
    __tid = [[decoder decodeObjectForKey: @"tid"] retain_stub];
    __tid_isset = YES;
  }
  if ([decoder containsValueForKey: @"pwd"])
  {
    __pwd = [[decoder decodeObjectForKey: @"pwd"] retain_stub];
    __pwd_isset = YES;
  }
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tid_isset)
  {
    [encoder encodeObject: __tid forKey: @"tid"];
  }
  if (__pwd_isset)
  {
    [encoder encodeObject: __pwd forKey: @"pwd"];
  }
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __tid_isset ? 2654435761 : 0;
  if (__tid_isset)
  {
    hash = (hash * 31) ^ [__tid hash];
  }
  hash = (hash * 31) ^ __pwd_isset ? 2654435761 : 0;
  if (__pwd_isset)
  {
    hash = (hash * 31) ^ [__pwd hash];
  }
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timRemoteUserAuth_args class]]) {
    return NO;
  }
  timRemoteUserAuth_args *other = (timRemoteUserAuth_args *)anObject;
  if ((__tid_isset != other->__tid_isset) ||
      (__tid_isset && ((__tid || other->__tid) && ![__tid isEqual:other->__tid]))) {
    return NO;
  }
  if ((__pwd_isset != other->__pwd_isset) ||
      (__pwd_isset && ((__pwd || other->__pwd) && ![__pwd isEqual:other->__pwd]))) {
    return NO;
  }
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__tid release_stub];
  [__pwd release_stub];
  [__auth release_stub];
  [super dealloc_stub];
}

- (Tid *) tid {
  return [[__tid retain_stub] autorelease_stub];
}

- (void) setTid: (Tid *) tid {
  [tid retain_stub];
  [__tid release_stub];
  __tid = tid;
  __tid_isset = YES;
}

- (BOOL) tidIsSet {
  return __tid_isset;
}

- (void) unsetTid {
  [__tid release_stub];
  __tid = nil;
  __tid_isset = NO;
}

- (NSString *) pwd {
  return [[__pwd retain_stub] autorelease_stub];
}

- (void) setPwd: (NSString *) pwd {
  [pwd retain_stub];
  [__pwd release_stub];
  __pwd = pwd;
  __pwd_isset = YES;
}

- (BOOL) pwdIsSet {
  return __pwd_isset;
}

- (void) unsetPwd {
  [__pwd release_stub];
  __pwd = nil;
  __pwd_isset = NO;
}

- (TimAuth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (TimAuth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          TimAuth *fieldValue = [[TimAuth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timRemoteUserAuth_args"];
  if (__tid_isset) {
    if (__tid != nil) {
      [outProtocol writeFieldBeginWithName: @"tid" type: TType_STRUCT fieldID: 1];
      [__tid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pwd_isset) {
    if (__pwd != nil) {
      [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pwd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 3];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timRemoteUserAuth_args("];
  [ms appendString: @"tid:"];
  [ms appendFormat: @"%@", __tid];
  [ms appendString: @",pwd:"];
  [ms appendFormat: @"\"%@\"", __pwd];
  [ms appendString: @",auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface TimRemoteUserAuth_result : NSObject <TBase, NSCoding> {
  TimRemoteUserBean * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TimRemoteUserBean * success;
#endif

- (id) init;
- (id) initWithSuccess: (TimRemoteUserBean *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimRemoteUserBean *) success;
- (void) setSuccess: (TimRemoteUserBean *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation TimRemoteUserAuth_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TimRemoteUserBean *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimRemoteUserAuth_result class]]) {
    return NO;
  }
  TimRemoteUserAuth_result *other = (TimRemoteUserAuth_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (TimRemoteUserBean *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TimRemoteUserBean *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TimRemoteUserBean *fieldValue = [[TimRemoteUserBean alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimRemoteUserAuth_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimRemoteUserAuth_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timRemoteUserGet_args : NSObject <TBase, NSCoding> {
  Tid * __tid;
  TimAuth * __auth;

  BOOL __tid_isset;
  BOOL __auth_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=tid, setter=setTid:) Tid * tid;
@property (nonatomic, retain, getter=auth, setter=setAuth:) TimAuth * auth;
#endif

- (id) init;
- (id) initWithTid: (Tid *) tid auth: (TimAuth *) auth;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Tid *) tid;
- (void) setTid: (Tid *) tid;
#endif
- (BOOL) tidIsSet;

#if !__has_feature(objc_arc)
- (TimAuth *) auth;
- (void) setAuth: (TimAuth *) auth;
#endif
- (BOOL) authIsSet;

@end

@implementation timRemoteUserGet_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTid: (Tid *) tid auth: (TimAuth *) auth
{
  self = [super init];
  __tid = [tid retain_stub];
  __tid_isset = YES;
  __auth = [auth retain_stub];
  __auth_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tid"])
  {
    __tid = [[decoder decodeObjectForKey: @"tid"] retain_stub];
    __tid_isset = YES;
  }
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tid_isset)
  {
    [encoder encodeObject: __tid forKey: @"tid"];
  }
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __tid_isset ? 2654435761 : 0;
  if (__tid_isset)
  {
    hash = (hash * 31) ^ [__tid hash];
  }
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timRemoteUserGet_args class]]) {
    return NO;
  }
  timRemoteUserGet_args *other = (timRemoteUserGet_args *)anObject;
  if ((__tid_isset != other->__tid_isset) ||
      (__tid_isset && ((__tid || other->__tid) && ![__tid isEqual:other->__tid]))) {
    return NO;
  }
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__tid release_stub];
  [__auth release_stub];
  [super dealloc_stub];
}

- (Tid *) tid {
  return [[__tid retain_stub] autorelease_stub];
}

- (void) setTid: (Tid *) tid {
  [tid retain_stub];
  [__tid release_stub];
  __tid = tid;
  __tid_isset = YES;
}

- (BOOL) tidIsSet {
  return __tid_isset;
}

- (void) unsetTid {
  [__tid release_stub];
  __tid = nil;
  __tid_isset = NO;
}

- (TimAuth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (TimAuth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TimAuth *fieldValue = [[TimAuth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timRemoteUserGet_args"];
  if (__tid_isset) {
    if (__tid != nil) {
      [outProtocol writeFieldBeginWithName: @"tid" type: TType_STRUCT fieldID: 1];
      [__tid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 2];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timRemoteUserGet_args("];
  [ms appendString: @"tid:"];
  [ms appendFormat: @"%@", __tid];
  [ms appendString: @",auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface TimRemoteUserGet_result : NSObject <TBase, NSCoding> {
  TimRemoteUserBean * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TimRemoteUserBean * success;
#endif

- (id) init;
- (id) initWithSuccess: (TimRemoteUserBean *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimRemoteUserBean *) success;
- (void) setSuccess: (TimRemoteUserBean *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation TimRemoteUserGet_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TimRemoteUserBean *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimRemoteUserGet_result class]]) {
    return NO;
  }
  TimRemoteUserGet_result *other = (TimRemoteUserGet_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (TimRemoteUserBean *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TimRemoteUserBean *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TimRemoteUserBean *fieldValue = [[TimRemoteUserBean alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimRemoteUserGet_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimRemoteUserGet_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timRemoteUserEdit_args : NSObject <TBase, NSCoding> {
  Tid * __tid;
  TimUserBean * __ub;
  TimAuth * __auth;

  BOOL __tid_isset;
  BOOL __ub_isset;
  BOOL __auth_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=tid, setter=setTid:) Tid * tid;
@property (nonatomic, retain, getter=ub, setter=setUb:) TimUserBean * ub;
@property (nonatomic, retain, getter=auth, setter=setAuth:) TimAuth * auth;
#endif

- (id) init;
- (id) initWithTid: (Tid *) tid ub: (TimUserBean *) ub auth: (TimAuth *) auth;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Tid *) tid;
- (void) setTid: (Tid *) tid;
#endif
- (BOOL) tidIsSet;

#if !__has_feature(objc_arc)
- (TimUserBean *) ub;
- (void) setUb: (TimUserBean *) ub;
#endif
- (BOOL) ubIsSet;

#if !__has_feature(objc_arc)
- (TimAuth *) auth;
- (void) setAuth: (TimAuth *) auth;
#endif
- (BOOL) authIsSet;

@end

@implementation timRemoteUserEdit_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTid: (Tid *) tid ub: (TimUserBean *) ub auth: (TimAuth *) auth
{
  self = [super init];
  __tid = [tid retain_stub];
  __tid_isset = YES;
  __ub = [ub retain_stub];
  __ub_isset = YES;
  __auth = [auth retain_stub];
  __auth_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tid"])
  {
    __tid = [[decoder decodeObjectForKey: @"tid"] retain_stub];
    __tid_isset = YES;
  }
  if ([decoder containsValueForKey: @"ub"])
  {
    __ub = [[decoder decodeObjectForKey: @"ub"] retain_stub];
    __ub_isset = YES;
  }
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tid_isset)
  {
    [encoder encodeObject: __tid forKey: @"tid"];
  }
  if (__ub_isset)
  {
    [encoder encodeObject: __ub forKey: @"ub"];
  }
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __tid_isset ? 2654435761 : 0;
  if (__tid_isset)
  {
    hash = (hash * 31) ^ [__tid hash];
  }
  hash = (hash * 31) ^ __ub_isset ? 2654435761 : 0;
  if (__ub_isset)
  {
    hash = (hash * 31) ^ [__ub hash];
  }
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timRemoteUserEdit_args class]]) {
    return NO;
  }
  timRemoteUserEdit_args *other = (timRemoteUserEdit_args *)anObject;
  if ((__tid_isset != other->__tid_isset) ||
      (__tid_isset && ((__tid || other->__tid) && ![__tid isEqual:other->__tid]))) {
    return NO;
  }
  if ((__ub_isset != other->__ub_isset) ||
      (__ub_isset && ((__ub || other->__ub) && ![__ub isEqual:other->__ub]))) {
    return NO;
  }
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__tid release_stub];
  [__ub release_stub];
  [__auth release_stub];
  [super dealloc_stub];
}

- (Tid *) tid {
  return [[__tid retain_stub] autorelease_stub];
}

- (void) setTid: (Tid *) tid {
  [tid retain_stub];
  [__tid release_stub];
  __tid = tid;
  __tid_isset = YES;
}

- (BOOL) tidIsSet {
  return __tid_isset;
}

- (void) unsetTid {
  [__tid release_stub];
  __tid = nil;
  __tid_isset = NO;
}

- (TimUserBean *) ub {
  return [[__ub retain_stub] autorelease_stub];
}

- (void) setUb: (TimUserBean *) ub {
  [ub retain_stub];
  [__ub release_stub];
  __ub = ub;
  __ub_isset = YES;
}

- (BOOL) ubIsSet {
  return __ub_isset;
}

- (void) unsetUb {
  [__ub release_stub];
  __ub = nil;
  __ub_isset = NO;
}

- (TimAuth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (TimAuth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Tid *fieldValue = [[Tid alloc] init];
          [fieldValue read: inProtocol];
          [self setTid: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TimUserBean *fieldValue = [[TimUserBean alloc] init];
          [fieldValue read: inProtocol];
          [self setUb: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          TimAuth *fieldValue = [[TimAuth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timRemoteUserEdit_args"];
  if (__tid_isset) {
    if (__tid != nil) {
      [outProtocol writeFieldBeginWithName: @"tid" type: TType_STRUCT fieldID: 1];
      [__tid write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ub_isset) {
    if (__ub != nil) {
      [outProtocol writeFieldBeginWithName: @"ub" type: TType_STRUCT fieldID: 2];
      [__ub write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 3];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timRemoteUserEdit_args("];
  [ms appendString: @"tid:"];
  [ms appendFormat: @"%@", __tid];
  [ms appendString: @",ub:"];
  [ms appendFormat: @"%@", __ub];
  [ms appendString: @",auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface TimRemoteUserEdit_result : NSObject <TBase, NSCoding> {
  TimRemoteUserBean * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TimRemoteUserBean * success;
#endif

- (id) init;
- (id) initWithSuccess: (TimRemoteUserBean *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimRemoteUserBean *) success;
- (void) setSuccess: (TimRemoteUserBean *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation TimRemoteUserEdit_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TimRemoteUserBean *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimRemoteUserEdit_result class]]) {
    return NO;
  }
  TimRemoteUserEdit_result *other = (TimRemoteUserEdit_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (TimRemoteUserBean *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TimRemoteUserBean *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TimRemoteUserBean *fieldValue = [[TimRemoteUserBean alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimRemoteUserEdit_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimRemoteUserEdit_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timResponsePresence_args : NSObject <TBase, NSCoding> {
  TimPBean * __pbean;
  TimAuth * __auth;

  BOOL __pbean_isset;
  BOOL __auth_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=pbean, setter=setPbean:) TimPBean * pbean;
@property (nonatomic, retain, getter=auth, setter=setAuth:) TimAuth * auth;
#endif

- (id) init;
- (id) initWithPbean: (TimPBean *) pbean auth: (TimAuth *) auth;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimPBean *) pbean;
- (void) setPbean: (TimPBean *) pbean;
#endif
- (BOOL) pbeanIsSet;

#if !__has_feature(objc_arc)
- (TimAuth *) auth;
- (void) setAuth: (TimAuth *) auth;
#endif
- (BOOL) authIsSet;

@end

@implementation timResponsePresence_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPbean: (TimPBean *) pbean auth: (TimAuth *) auth
{
  self = [super init];
  __pbean = [pbean retain_stub];
  __pbean_isset = YES;
  __auth = [auth retain_stub];
  __auth_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pbean"])
  {
    __pbean = [[decoder decodeObjectForKey: @"pbean"] retain_stub];
    __pbean_isset = YES;
  }
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pbean_isset)
  {
    [encoder encodeObject: __pbean forKey: @"pbean"];
  }
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __pbean_isset ? 2654435761 : 0;
  if (__pbean_isset)
  {
    hash = (hash * 31) ^ [__pbean hash];
  }
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timResponsePresence_args class]]) {
    return NO;
  }
  timResponsePresence_args *other = (timResponsePresence_args *)anObject;
  if ((__pbean_isset != other->__pbean_isset) ||
      (__pbean_isset && ((__pbean || other->__pbean) && ![__pbean isEqual:other->__pbean]))) {
    return NO;
  }
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__pbean release_stub];
  [__auth release_stub];
  [super dealloc_stub];
}

- (TimPBean *) pbean {
  return [[__pbean retain_stub] autorelease_stub];
}

- (void) setPbean: (TimPBean *) pbean {
  [pbean retain_stub];
  [__pbean release_stub];
  __pbean = pbean;
  __pbean_isset = YES;
}

- (BOOL) pbeanIsSet {
  return __pbean_isset;
}

- (void) unsetPbean {
  [__pbean release_stub];
  __pbean = nil;
  __pbean_isset = NO;
}

- (TimAuth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (TimAuth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimPBean *fieldValue = [[TimPBean alloc] init];
          [fieldValue read: inProtocol];
          [self setPbean: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TimAuth *fieldValue = [[TimAuth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timResponsePresence_args"];
  if (__pbean_isset) {
    if (__pbean != nil) {
      [outProtocol writeFieldBeginWithName: @"pbean" type: TType_STRUCT fieldID: 1];
      [__pbean write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 2];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timResponsePresence_args("];
  [ms appendString: @"pbean:"];
  [ms appendFormat: @"%@", __pbean];
  [ms appendString: @",auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface TimResponsePresence_result : NSObject <TBase, NSCoding> {
  TimResponseBean * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TimResponseBean * success;
#endif

- (id) init;
- (id) initWithSuccess: (TimResponseBean *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimResponseBean *) success;
- (void) setSuccess: (TimResponseBean *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation TimResponsePresence_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TimResponseBean *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimResponsePresence_result class]]) {
    return NO;
  }
  TimResponsePresence_result *other = (TimResponsePresence_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (TimResponseBean *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TimResponseBean *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TimResponseBean *fieldValue = [[TimResponseBean alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimResponsePresence_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimResponsePresence_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timResponseMessage_args : NSObject <TBase, NSCoding> {
  TimMBean * __mbean;
  TimAuth * __auth;

  BOOL __mbean_isset;
  BOOL __auth_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=mbean, setter=setMbean:) TimMBean * mbean;
@property (nonatomic, retain, getter=auth, setter=setAuth:) TimAuth * auth;
#endif

- (id) init;
- (id) initWithMbean: (TimMBean *) mbean auth: (TimAuth *) auth;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimMBean *) mbean;
- (void) setMbean: (TimMBean *) mbean;
#endif
- (BOOL) mbeanIsSet;

#if !__has_feature(objc_arc)
- (TimAuth *) auth;
- (void) setAuth: (TimAuth *) auth;
#endif
- (BOOL) authIsSet;

@end

@implementation timResponseMessage_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMbean: (TimMBean *) mbean auth: (TimAuth *) auth
{
  self = [super init];
  __mbean = [mbean retain_stub];
  __mbean_isset = YES;
  __auth = [auth retain_stub];
  __auth_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mbean"])
  {
    __mbean = [[decoder decodeObjectForKey: @"mbean"] retain_stub];
    __mbean_isset = YES;
  }
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mbean_isset)
  {
    [encoder encodeObject: __mbean forKey: @"mbean"];
  }
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __mbean_isset ? 2654435761 : 0;
  if (__mbean_isset)
  {
    hash = (hash * 31) ^ [__mbean hash];
  }
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timResponseMessage_args class]]) {
    return NO;
  }
  timResponseMessage_args *other = (timResponseMessage_args *)anObject;
  if ((__mbean_isset != other->__mbean_isset) ||
      (__mbean_isset && ((__mbean || other->__mbean) && ![__mbean isEqual:other->__mbean]))) {
    return NO;
  }
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__mbean release_stub];
  [__auth release_stub];
  [super dealloc_stub];
}

- (TimMBean *) mbean {
  return [[__mbean retain_stub] autorelease_stub];
}

- (void) setMbean: (TimMBean *) mbean {
  [mbean retain_stub];
  [__mbean release_stub];
  __mbean = mbean;
  __mbean_isset = YES;
}

- (BOOL) mbeanIsSet {
  return __mbean_isset;
}

- (void) unsetMbean {
  [__mbean release_stub];
  __mbean = nil;
  __mbean_isset = NO;
}

- (TimAuth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (TimAuth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimMBean *fieldValue = [[TimMBean alloc] init];
          [fieldValue read: inProtocol];
          [self setMbean: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TimAuth *fieldValue = [[TimAuth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timResponseMessage_args"];
  if (__mbean_isset) {
    if (__mbean != nil) {
      [outProtocol writeFieldBeginWithName: @"mbean" type: TType_STRUCT fieldID: 1];
      [__mbean write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 2];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timResponseMessage_args("];
  [ms appendString: @"mbean:"];
  [ms appendFormat: @"%@", __mbean];
  [ms appendString: @",auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface TimResponseMessage_result : NSObject <TBase, NSCoding> {
  TimResponseBean * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TimResponseBean * success;
#endif

- (id) init;
- (id) initWithSuccess: (TimResponseBean *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimResponseBean *) success;
- (void) setSuccess: (TimResponseBean *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation TimResponseMessage_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TimResponseBean *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimResponseMessage_result class]]) {
    return NO;
  }
  TimResponseMessage_result *other = (TimResponseMessage_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (TimResponseBean *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TimResponseBean *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TimResponseBean *fieldValue = [[TimResponseBean alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimResponseMessage_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimResponseMessage_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timResponseMessageIq_args : NSObject <TBase, NSCoding> {
  TimMessageIq * __timMsgIq;
  NSString * __iqType;
  TimAuth * __auth;

  BOOL __timMsgIq_isset;
  BOOL __iqType_isset;
  BOOL __auth_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=timMsgIq, setter=setTimMsgIq:) TimMessageIq * timMsgIq;
@property (nonatomic, retain, getter=iqType, setter=setIqType:) NSString * iqType;
@property (nonatomic, retain, getter=auth, setter=setAuth:) TimAuth * auth;
#endif

- (id) init;
- (id) initWithTimMsgIq: (TimMessageIq *) timMsgIq iqType: (NSString *) iqType auth: (TimAuth *) auth;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimMessageIq *) timMsgIq;
- (void) setTimMsgIq: (TimMessageIq *) timMsgIq;
#endif
- (BOOL) timMsgIqIsSet;

#if !__has_feature(objc_arc)
- (NSString *) iqType;
- (void) setIqType: (NSString *) iqType;
#endif
- (BOOL) iqTypeIsSet;

#if !__has_feature(objc_arc)
- (TimAuth *) auth;
- (void) setAuth: (TimAuth *) auth;
#endif
- (BOOL) authIsSet;

@end

@implementation timResponseMessageIq_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTimMsgIq: (TimMessageIq *) timMsgIq iqType: (NSString *) iqType auth: (TimAuth *) auth
{
  self = [super init];
  __timMsgIq = [timMsgIq retain_stub];
  __timMsgIq_isset = YES;
  __iqType = [iqType retain_stub];
  __iqType_isset = YES;
  __auth = [auth retain_stub];
  __auth_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"timMsgIq"])
  {
    __timMsgIq = [[decoder decodeObjectForKey: @"timMsgIq"] retain_stub];
    __timMsgIq_isset = YES;
  }
  if ([decoder containsValueForKey: @"iqType"])
  {
    __iqType = [[decoder decodeObjectForKey: @"iqType"] retain_stub];
    __iqType_isset = YES;
  }
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__timMsgIq_isset)
  {
    [encoder encodeObject: __timMsgIq forKey: @"timMsgIq"];
  }
  if (__iqType_isset)
  {
    [encoder encodeObject: __iqType forKey: @"iqType"];
  }
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __timMsgIq_isset ? 2654435761 : 0;
  if (__timMsgIq_isset)
  {
    hash = (hash * 31) ^ [__timMsgIq hash];
  }
  hash = (hash * 31) ^ __iqType_isset ? 2654435761 : 0;
  if (__iqType_isset)
  {
    hash = (hash * 31) ^ [__iqType hash];
  }
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timResponseMessageIq_args class]]) {
    return NO;
  }
  timResponseMessageIq_args *other = (timResponseMessageIq_args *)anObject;
  if ((__timMsgIq_isset != other->__timMsgIq_isset) ||
      (__timMsgIq_isset && ((__timMsgIq || other->__timMsgIq) && ![__timMsgIq isEqual:other->__timMsgIq]))) {
    return NO;
  }
  if ((__iqType_isset != other->__iqType_isset) ||
      (__iqType_isset && ((__iqType || other->__iqType) && ![__iqType isEqual:other->__iqType]))) {
    return NO;
  }
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__timMsgIq release_stub];
  [__iqType release_stub];
  [__auth release_stub];
  [super dealloc_stub];
}

- (TimMessageIq *) timMsgIq {
  return [[__timMsgIq retain_stub] autorelease_stub];
}

- (void) setTimMsgIq: (TimMessageIq *) timMsgIq {
  [timMsgIq retain_stub];
  [__timMsgIq release_stub];
  __timMsgIq = timMsgIq;
  __timMsgIq_isset = YES;
}

- (BOOL) timMsgIqIsSet {
  return __timMsgIq_isset;
}

- (void) unsetTimMsgIq {
  [__timMsgIq release_stub];
  __timMsgIq = nil;
  __timMsgIq_isset = NO;
}

- (NSString *) iqType {
  return [[__iqType retain_stub] autorelease_stub];
}

- (void) setIqType: (NSString *) iqType {
  [iqType retain_stub];
  [__iqType release_stub];
  __iqType = iqType;
  __iqType_isset = YES;
}

- (BOOL) iqTypeIsSet {
  return __iqType_isset;
}

- (void) unsetIqType {
  [__iqType release_stub];
  __iqType = nil;
  __iqType_isset = NO;
}

- (TimAuth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (TimAuth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimMessageIq *fieldValue = [[TimMessageIq alloc] init];
          [fieldValue read: inProtocol];
          [self setTimMsgIq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIqType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          TimAuth *fieldValue = [[TimAuth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timResponseMessageIq_args"];
  if (__timMsgIq_isset) {
    if (__timMsgIq != nil) {
      [outProtocol writeFieldBeginWithName: @"timMsgIq" type: TType_STRUCT fieldID: 1];
      [__timMsgIq write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iqType_isset) {
    if (__iqType != nil) {
      [outProtocol writeFieldBeginWithName: @"iqType" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __iqType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 3];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timResponseMessageIq_args("];
  [ms appendString: @"timMsgIq:"];
  [ms appendFormat: @"%@", __timMsgIq];
  [ms appendString: @",iqType:"];
  [ms appendFormat: @"\"%@\"", __iqType];
  [ms appendString: @",auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface TimResponseMessageIq_result : NSObject <TBase, NSCoding> {
  TimMBeanList * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TimMBeanList * success;
#endif

- (id) init;
- (id) initWithSuccess: (TimMBeanList *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimMBeanList *) success;
- (void) setSuccess: (TimMBeanList *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation TimResponseMessageIq_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TimMBeanList *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimResponseMessageIq_result class]]) {
    return NO;
  }
  TimResponseMessageIq_result *other = (TimResponseMessageIq_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (TimMBeanList *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TimMBeanList *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TimMBeanList *fieldValue = [[TimMBeanList alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimResponseMessageIq_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimResponseMessageIq_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timResponsePresenceList_args : NSObject <TBase, NSCoding> {
  TimPBeanList * __pbeanList;
  TimAuth * __auth;

  BOOL __pbeanList_isset;
  BOOL __auth_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=pbeanList, setter=setPbeanList:) TimPBeanList * pbeanList;
@property (nonatomic, retain, getter=auth, setter=setAuth:) TimAuth * auth;
#endif

- (id) init;
- (id) initWithPbeanList: (TimPBeanList *) pbeanList auth: (TimAuth *) auth;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimPBeanList *) pbeanList;
- (void) setPbeanList: (TimPBeanList *) pbeanList;
#endif
- (BOOL) pbeanListIsSet;

#if !__has_feature(objc_arc)
- (TimAuth *) auth;
- (void) setAuth: (TimAuth *) auth;
#endif
- (BOOL) authIsSet;

@end

@implementation timResponsePresenceList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPbeanList: (TimPBeanList *) pbeanList auth: (TimAuth *) auth
{
  self = [super init];
  __pbeanList = [pbeanList retain_stub];
  __pbeanList_isset = YES;
  __auth = [auth retain_stub];
  __auth_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pbeanList"])
  {
    __pbeanList = [[decoder decodeObjectForKey: @"pbeanList"] retain_stub];
    __pbeanList_isset = YES;
  }
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pbeanList_isset)
  {
    [encoder encodeObject: __pbeanList forKey: @"pbeanList"];
  }
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __pbeanList_isset ? 2654435761 : 0;
  if (__pbeanList_isset)
  {
    hash = (hash * 31) ^ [__pbeanList hash];
  }
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timResponsePresenceList_args class]]) {
    return NO;
  }
  timResponsePresenceList_args *other = (timResponsePresenceList_args *)anObject;
  if ((__pbeanList_isset != other->__pbeanList_isset) ||
      (__pbeanList_isset && ((__pbeanList || other->__pbeanList) && ![__pbeanList isEqual:other->__pbeanList]))) {
    return NO;
  }
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__pbeanList release_stub];
  [__auth release_stub];
  [super dealloc_stub];
}

- (TimPBeanList *) pbeanList {
  return [[__pbeanList retain_stub] autorelease_stub];
}

- (void) setPbeanList: (TimPBeanList *) pbeanList {
  [pbeanList retain_stub];
  [__pbeanList release_stub];
  __pbeanList = pbeanList;
  __pbeanList_isset = YES;
}

- (BOOL) pbeanListIsSet {
  return __pbeanList_isset;
}

- (void) unsetPbeanList {
  [__pbeanList release_stub];
  __pbeanList = nil;
  __pbeanList_isset = NO;
}

- (TimAuth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (TimAuth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimPBeanList *fieldValue = [[TimPBeanList alloc] init];
          [fieldValue read: inProtocol];
          [self setPbeanList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TimAuth *fieldValue = [[TimAuth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timResponsePresenceList_args"];
  if (__pbeanList_isset) {
    if (__pbeanList != nil) {
      [outProtocol writeFieldBeginWithName: @"pbeanList" type: TType_STRUCT fieldID: 1];
      [__pbeanList write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 2];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timResponsePresenceList_args("];
  [ms appendString: @"pbeanList:"];
  [ms appendFormat: @"%@", __pbeanList];
  [ms appendString: @",auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface TimResponsePresenceList_result : NSObject <TBase, NSCoding> {
  TimResponseBean * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TimResponseBean * success;
#endif

- (id) init;
- (id) initWithSuccess: (TimResponseBean *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimResponseBean *) success;
- (void) setSuccess: (TimResponseBean *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation TimResponsePresenceList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TimResponseBean *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimResponsePresenceList_result class]]) {
    return NO;
  }
  TimResponsePresenceList_result *other = (TimResponsePresenceList_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (TimResponseBean *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TimResponseBean *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TimResponseBean *fieldValue = [[TimResponseBean alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimResponsePresenceList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimResponsePresenceList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface timResponseMessageList_args : NSObject <TBase, NSCoding> {
  TimMBeanList * __mbeanList;
  TimAuth * __auth;

  BOOL __mbeanList_isset;
  BOOL __auth_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=mbeanList, setter=setMbeanList:) TimMBeanList * mbeanList;
@property (nonatomic, retain, getter=auth, setter=setAuth:) TimAuth * auth;
#endif

- (id) init;
- (id) initWithMbeanList: (TimMBeanList *) mbeanList auth: (TimAuth *) auth;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimMBeanList *) mbeanList;
- (void) setMbeanList: (TimMBeanList *) mbeanList;
#endif
- (BOOL) mbeanListIsSet;

#if !__has_feature(objc_arc)
- (TimAuth *) auth;
- (void) setAuth: (TimAuth *) auth;
#endif
- (BOOL) authIsSet;

@end

@implementation timResponseMessageList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMbeanList: (TimMBeanList *) mbeanList auth: (TimAuth *) auth
{
  self = [super init];
  __mbeanList = [mbeanList retain_stub];
  __mbeanList_isset = YES;
  __auth = [auth retain_stub];
  __auth_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mbeanList"])
  {
    __mbeanList = [[decoder decodeObjectForKey: @"mbeanList"] retain_stub];
    __mbeanList_isset = YES;
  }
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mbeanList_isset)
  {
    [encoder encodeObject: __mbeanList forKey: @"mbeanList"];
  }
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __mbeanList_isset ? 2654435761 : 0;
  if (__mbeanList_isset)
  {
    hash = (hash * 31) ^ [__mbeanList hash];
  }
  hash = (hash * 31) ^ __auth_isset ? 2654435761 : 0;
  if (__auth_isset)
  {
    hash = (hash * 31) ^ [__auth hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[timResponseMessageList_args class]]) {
    return NO;
  }
  timResponseMessageList_args *other = (timResponseMessageList_args *)anObject;
  if ((__mbeanList_isset != other->__mbeanList_isset) ||
      (__mbeanList_isset && ((__mbeanList || other->__mbeanList) && ![__mbeanList isEqual:other->__mbeanList]))) {
    return NO;
  }
  if ((__auth_isset != other->__auth_isset) ||
      (__auth_isset && ((__auth || other->__auth) && ![__auth isEqual:other->__auth]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__mbeanList release_stub];
  [__auth release_stub];
  [super dealloc_stub];
}

- (TimMBeanList *) mbeanList {
  return [[__mbeanList retain_stub] autorelease_stub];
}

- (void) setMbeanList: (TimMBeanList *) mbeanList {
  [mbeanList retain_stub];
  [__mbeanList release_stub];
  __mbeanList = mbeanList;
  __mbeanList_isset = YES;
}

- (BOOL) mbeanListIsSet {
  return __mbeanList_isset;
}

- (void) unsetMbeanList {
  [__mbeanList release_stub];
  __mbeanList = nil;
  __mbeanList_isset = NO;
}

- (TimAuth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (TimAuth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TimMBeanList *fieldValue = [[TimMBeanList alloc] init];
          [fieldValue read: inProtocol];
          [self setMbeanList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TimAuth *fieldValue = [[TimAuth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"timResponseMessageList_args"];
  if (__mbeanList_isset) {
    if (__mbeanList != nil) {
      [outProtocol writeFieldBeginWithName: @"mbeanList" type: TType_STRUCT fieldID: 1];
      [__mbeanList write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 2];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"timResponseMessageList_args("];
  [ms appendString: @"mbeanList:"];
  [ms appendFormat: @"%@", __mbeanList];
  [ms appendString: @",auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface TimResponseMessageList_result : NSObject <TBase, NSCoding> {
  TimResponseBean * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TimResponseBean * success;
#endif

- (id) init;
- (id) initWithSuccess: (TimResponseBean *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TimResponseBean *) success;
- (void) setSuccess: (TimResponseBean *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation TimResponseMessageList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TimResponseBean *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[TimResponseMessageList_result class]]) {
    return NO;
  }
  TimResponseMessageList_result *other = (TimResponseMessageList_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (TimResponseBean *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TimResponseBean *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TimResponseBean *fieldValue = [[TimResponseBean alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TimResponseMessageList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TimResponseMessageList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ITimClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_timStream: (TimParam *) param
{
  [outProtocol writeMessageBeginWithName: @"timStream" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timStream_args"];
  if (param != nil)  {
    [outProtocol writeFieldBeginWithName: @"param" type: TType_STRUCT fieldID: 1];
    [param write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) timStream: (TimParam *) param
{
  [self send_timStream : param];
  [[outProtocol transport] flush];
}

- (void) send_timStarttls
{
  [outProtocol writeMessageBeginWithName: @"timStarttls" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timStarttls_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) timStarttls
{
  [self send_timStarttls];
  [[outProtocol transport] flush];
}

- (void) send_timLogin: (Tid *) tid pwd: (NSString *) pwd
{
  [outProtocol writeMessageBeginWithName: @"timLogin" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timLogin_args"];
  if (tid != nil)  {
    [outProtocol writeFieldBeginWithName: @"tid" type: TType_STRUCT fieldID: 1];
    [tid write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (pwd != nil)  {
    [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 2];
    [outProtocol writeString: pwd];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) timLogin: (Tid *) tid pwd: (NSString *) pwd
{
  [self send_timLogin : tid pwd: pwd];
  [[outProtocol transport] flush];
}

- (void) send_timAck: (TimAckBean *) ab
{
  [outProtocol writeMessageBeginWithName: @"timAck" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timAck_args"];
  if (ab != nil)  {
    [outProtocol writeFieldBeginWithName: @"ab" type: TType_STRUCT fieldID: 1];
    [ab write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) timAck: (TimAckBean *) ab
{
  [self send_timAck : ab];
  [[outProtocol transport] flush];
}

- (void) send_timPresence: (TimPBean *) pbean
{
  [outProtocol writeMessageBeginWithName: @"timPresence" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timPresence_args"];
  if (pbean != nil)  {
    [outProtocol writeFieldBeginWithName: @"pbean" type: TType_STRUCT fieldID: 1];
    [pbean write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) timPresence: (TimPBean *) pbean
{
  [self send_timPresence : pbean];
  [[outProtocol transport] flush];
}

- (void) send_timMessage: (TimMBean *) mbean
{
  [outProtocol writeMessageBeginWithName: @"timMessage" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timMessage_args"];
  if (mbean != nil)  {
    [outProtocol writeFieldBeginWithName: @"mbean" type: TType_STRUCT fieldID: 1];
    [mbean write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) timMessage: (TimMBean *) mbean
{
  [self send_timMessage : mbean];
  [[outProtocol transport] flush];
}

- (void) send_timPing: (NSString *) threadId
{
  [outProtocol writeMessageBeginWithName: @"timPing" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timPing_args"];
  if (threadId != nil)  {
    [outProtocol writeFieldBeginWithName: @"threadId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: threadId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) timPing: (NSString *) threadId
{
  [self send_timPing : threadId];
  [[outProtocol transport] flush];
}

- (void) send_timError: (TimError *) e
{
  [outProtocol writeMessageBeginWithName: @"timError" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timError_args"];
  if (e != nil)  {
    [outProtocol writeFieldBeginWithName: @"e" type: TType_STRUCT fieldID: 1];
    [e write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) timError: (TimError *) e
{
  [self send_timError : e];
  [[outProtocol transport] flush];
}

- (void) send_timLogout
{
  [outProtocol writeMessageBeginWithName: @"timLogout" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timLogout_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) timLogout
{
  [self send_timLogout];
  [[outProtocol transport] flush];
}

- (void) send_timRegist: (Tid *) tid auth: (NSString *) auth
{
  [outProtocol writeMessageBeginWithName: @"timRegist" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timRegist_args"];
  if (tid != nil)  {
    [outProtocol writeFieldBeginWithName: @"tid" type: TType_STRUCT fieldID: 1];
    [tid write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRING fieldID: 2];
    [outProtocol writeString: auth];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) timRegist: (Tid *) tid auth: (NSString *) auth
{
  [self send_timRegist : tid auth: auth];
  [[outProtocol transport] flush];
}

- (void) send_timRoser: (TimRoster *) roster
{
  [outProtocol writeMessageBeginWithName: @"timRoser" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timRoser_args"];
  if (roster != nil)  {
    [outProtocol writeFieldBeginWithName: @"roster" type: TType_STRUCT fieldID: 1];
    [roster write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) timRoser: (TimRoster *) roster
{
  [self send_timRoser : roster];
  [[outProtocol transport] flush];
}

- (void) send_timMessageList: (TimMBeanList *) mbeanList
{
  [outProtocol writeMessageBeginWithName: @"timMessageList" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timMessageList_args"];
  if (mbeanList != nil)  {
    [outProtocol writeFieldBeginWithName: @"mbeanList" type: TType_STRUCT fieldID: 1];
    [mbeanList write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) timMessageList: (TimMBeanList *) mbeanList
{
  [self send_timMessageList : mbeanList];
  [[outProtocol transport] flush];
}

- (void) send_timPresenceList: (TimPBeanList *) pbeanList
{
  [outProtocol writeMessageBeginWithName: @"timPresenceList" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timPresenceList_args"];
  if (pbeanList != nil)  {
    [outProtocol writeFieldBeginWithName: @"pbeanList" type: TType_STRUCT fieldID: 1];
    [pbeanList write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) timPresenceList: (TimPBeanList *) pbeanList
{
  [self send_timPresenceList : pbeanList];
  [[outProtocol transport] flush];
}

- (void) send_timMessageIq: (TimMessageIq *) timMsgIq iqType: (NSString *) iqType
{
  [outProtocol writeMessageBeginWithName: @"timMessageIq" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timMessageIq_args"];
  if (timMsgIq != nil)  {
    [outProtocol writeFieldBeginWithName: @"timMsgIq" type: TType_STRUCT fieldID: 1];
    [timMsgIq write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (iqType != nil)  {
    [outProtocol writeFieldBeginWithName: @"iqType" type: TType_STRING fieldID: 2];
    [outProtocol writeString: iqType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) timMessageIq: (TimMessageIq *) timMsgIq iqType: (NSString *) iqType
{
  [self send_timMessageIq : timMsgIq iqType: iqType];
  [[outProtocol transport] flush];
}

- (void) send_timMessageResult: (TimMBean *) mbean
{
  [outProtocol writeMessageBeginWithName: @"timMessageResult" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timMessageResult_args"];
  if (mbean != nil)  {
    [outProtocol writeFieldBeginWithName: @"mbean" type: TType_STRUCT fieldID: 1];
    [mbean write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) timMessageResult: (TimMBean *) mbean
{
  [self send_timMessageResult : mbean];
  [[outProtocol transport] flush];
}

- (void) send_timProperty: (TimPropertyBean *) tpb
{
  [outProtocol writeMessageBeginWithName: @"timProperty" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timProperty_args"];
  if (tpb != nil)  {
    [outProtocol writeFieldBeginWithName: @"tpb" type: TType_STRUCT fieldID: 1];
    [tpb write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) timProperty: (TimPropertyBean *) tpb
{
  [self send_timProperty : tpb];
  [[outProtocol transport] flush];
}

- (void) send_timRemoteUserAuth: (Tid *) tid pwd: (NSString *) pwd auth: (TimAuth *) auth
{
  [outProtocol writeMessageBeginWithName: @"timRemoteUserAuth" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timRemoteUserAuth_args"];
  if (tid != nil)  {
    [outProtocol writeFieldBeginWithName: @"tid" type: TType_STRUCT fieldID: 1];
    [tid write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (pwd != nil)  {
    [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 2];
    [outProtocol writeString: pwd];
    [outProtocol writeFieldEnd];
  }
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 3];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (TimRemoteUserBean *) recv_timRemoteUserAuth
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  TimRemoteUserAuth_result * result = [[[TimRemoteUserAuth_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"timRemoteUserAuth failed: unknown result"];
}

- (TimRemoteUserBean *) timRemoteUserAuth: (Tid *) tid pwd: (NSString *) pwd auth: (TimAuth *) auth
{
  [self send_timRemoteUserAuth : tid pwd: pwd auth: auth];
  [[outProtocol transport] flush];
  return [self recv_timRemoteUserAuth];
}

- (void) send_timRemoteUserGet: (Tid *) tid auth: (TimAuth *) auth
{
  [outProtocol writeMessageBeginWithName: @"timRemoteUserGet" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timRemoteUserGet_args"];
  if (tid != nil)  {
    [outProtocol writeFieldBeginWithName: @"tid" type: TType_STRUCT fieldID: 1];
    [tid write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 2];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (TimRemoteUserBean *) recv_timRemoteUserGet
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  TimRemoteUserGet_result * result = [[[TimRemoteUserGet_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"timRemoteUserGet failed: unknown result"];
}

- (TimRemoteUserBean *) timRemoteUserGet: (Tid *) tid auth: (TimAuth *) auth
{
  [self send_timRemoteUserGet : tid auth: auth];
  [[outProtocol transport] flush];
  return [self recv_timRemoteUserGet];
}

- (void) send_timRemoteUserEdit: (Tid *) tid ub: (TimUserBean *) ub auth: (TimAuth *) auth
{
  [outProtocol writeMessageBeginWithName: @"timRemoteUserEdit" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timRemoteUserEdit_args"];
  if (tid != nil)  {
    [outProtocol writeFieldBeginWithName: @"tid" type: TType_STRUCT fieldID: 1];
    [tid write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (ub != nil)  {
    [outProtocol writeFieldBeginWithName: @"ub" type: TType_STRUCT fieldID: 2];
    [ub write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 3];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (TimRemoteUserBean *) recv_timRemoteUserEdit
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  TimRemoteUserEdit_result * result = [[[TimRemoteUserEdit_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"timRemoteUserEdit failed: unknown result"];
}

- (TimRemoteUserBean *) timRemoteUserEdit: (Tid *) tid ub: (TimUserBean *) ub auth: (TimAuth *) auth
{
  [self send_timRemoteUserEdit : tid ub: ub auth: auth];
  [[outProtocol transport] flush];
  return [self recv_timRemoteUserEdit];
}

- (void) send_timResponsePresence: (TimPBean *) pbean auth: (TimAuth *) auth
{
  [outProtocol writeMessageBeginWithName: @"timResponsePresence" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timResponsePresence_args"];
  if (pbean != nil)  {
    [outProtocol writeFieldBeginWithName: @"pbean" type: TType_STRUCT fieldID: 1];
    [pbean write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 2];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (TimResponseBean *) recv_timResponsePresence
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  TimResponsePresence_result * result = [[[TimResponsePresence_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"timResponsePresence failed: unknown result"];
}

- (TimResponseBean *) timResponsePresence: (TimPBean *) pbean auth: (TimAuth *) auth
{
  [self send_timResponsePresence : pbean auth: auth];
  [[outProtocol transport] flush];
  return [self recv_timResponsePresence];
}

- (void) send_timResponseMessage: (TimMBean *) mbean auth: (TimAuth *) auth
{
  [outProtocol writeMessageBeginWithName: @"timResponseMessage" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timResponseMessage_args"];
  if (mbean != nil)  {
    [outProtocol writeFieldBeginWithName: @"mbean" type: TType_STRUCT fieldID: 1];
    [mbean write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 2];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (TimResponseBean *) recv_timResponseMessage
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  TimResponseMessage_result * result = [[[TimResponseMessage_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"timResponseMessage failed: unknown result"];
}

- (TimResponseBean *) timResponseMessage: (TimMBean *) mbean auth: (TimAuth *) auth
{
  [self send_timResponseMessage : mbean auth: auth];
  [[outProtocol transport] flush];
  return [self recv_timResponseMessage];
}

- (void) send_timResponseMessageIq: (TimMessageIq *) timMsgIq iqType: (NSString *) iqType auth: (TimAuth *) auth
{
  [outProtocol writeMessageBeginWithName: @"timResponseMessageIq" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timResponseMessageIq_args"];
  if (timMsgIq != nil)  {
    [outProtocol writeFieldBeginWithName: @"timMsgIq" type: TType_STRUCT fieldID: 1];
    [timMsgIq write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (iqType != nil)  {
    [outProtocol writeFieldBeginWithName: @"iqType" type: TType_STRING fieldID: 2];
    [outProtocol writeString: iqType];
    [outProtocol writeFieldEnd];
  }
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 3];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (TimMBeanList *) recv_timResponseMessageIq
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  TimResponseMessageIq_result * result = [[[TimResponseMessageIq_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"timResponseMessageIq failed: unknown result"];
}

- (TimMBeanList *) timResponseMessageIq: (TimMessageIq *) timMsgIq iqType: (NSString *) iqType auth: (TimAuth *) auth
{
  [self send_timResponseMessageIq : timMsgIq iqType: iqType auth: auth];
  [[outProtocol transport] flush];
  return [self recv_timResponseMessageIq];
}

- (void) send_timResponsePresenceList: (TimPBeanList *) pbeanList auth: (TimAuth *) auth
{
  [outProtocol writeMessageBeginWithName: @"timResponsePresenceList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timResponsePresenceList_args"];
  if (pbeanList != nil)  {
    [outProtocol writeFieldBeginWithName: @"pbeanList" type: TType_STRUCT fieldID: 1];
    [pbeanList write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 2];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (TimResponseBean *) recv_timResponsePresenceList
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  TimResponsePresenceList_result * result = [[[TimResponsePresenceList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"timResponsePresenceList failed: unknown result"];
}

- (TimResponseBean *) timResponsePresenceList: (TimPBeanList *) pbeanList auth: (TimAuth *) auth
{
  [self send_timResponsePresenceList : pbeanList auth: auth];
  [[outProtocol transport] flush];
  return [self recv_timResponsePresenceList];
}

- (void) send_timResponseMessageList: (TimMBeanList *) mbeanList auth: (TimAuth *) auth
{
  [outProtocol writeMessageBeginWithName: @"timResponseMessageList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"timResponseMessageList_args"];
  if (mbeanList != nil)  {
    [outProtocol writeFieldBeginWithName: @"mbeanList" type: TType_STRUCT fieldID: 1];
    [mbeanList write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 2];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (TimResponseBean *) recv_timResponseMessageList
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  TimResponseMessageList_result * result = [[[TimResponseMessageList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"timResponseMessageList failed: unknown result"];
}

- (TimResponseBean *) timResponseMessageList: (TimMBeanList *) mbeanList auth: (TimAuth *) auth
{
  [self send_timResponseMessageList : mbeanList auth: auth];
  [[outProtocol transport] flush];
  return [self recv_timResponseMessageList];
}

@end

@implementation ITimProcessor

- (id) initWithITim: (id <ITim>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_timStream_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timStream"];
}
{
  SEL s = @selector(process_timStarttls_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timStarttls"];
}
{
  SEL s = @selector(process_timLogin_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timLogin"];
}
{
  SEL s = @selector(process_timAck_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timAck"];
}
{
  SEL s = @selector(process_timPresence_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timPresence"];
}
{
  SEL s = @selector(process_timMessage_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timMessage"];
}
{
  SEL s = @selector(process_timPing_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timPing"];
}
{
  SEL s = @selector(process_timError_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timError"];
}
{
  SEL s = @selector(process_timLogout_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timLogout"];
}
{
  SEL s = @selector(process_timRegist_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timRegist"];
}
{
  SEL s = @selector(process_timRoser_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timRoser"];
}
{
  SEL s = @selector(process_timMessageList_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timMessageList"];
}
{
  SEL s = @selector(process_timPresenceList_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timPresenceList"];
}
{
  SEL s = @selector(process_timMessageIq_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timMessageIq"];
}
{
  SEL s = @selector(process_timMessageResult_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timMessageResult"];
}
{
  SEL s = @selector(process_timProperty_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timProperty"];
}
{
  SEL s = @selector(process_timRemoteUserAuth_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timRemoteUserAuth"];
}
{
  SEL s = @selector(process_timRemoteUserGet_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timRemoteUserGet"];
}
{
  SEL s = @selector(process_timRemoteUserEdit_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timRemoteUserEdit"];
}
{
  SEL s = @selector(process_timResponsePresence_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timResponsePresence"];
}
{
  SEL s = @selector(process_timResponseMessage_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timResponseMessage"];
}
{
  SEL s = @selector(process_timResponseMessageIq_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timResponseMessageIq"];
}
{
  SEL s = @selector(process_timResponsePresenceList_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timResponsePresenceList"];
}
{
  SEL s = @selector(process_timResponseMessageList_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"timResponseMessageList"];
}
return self;
}

- (id<ITim>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_timStream_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timStream_args * args = [[timStream_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService timStream: [args param]];
[args release_stub];
}

- (void) process_timStarttls_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timStarttls_args * args = [[timStarttls_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService timStarttls];
[args release_stub];
}

- (void) process_timLogin_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timLogin_args * args = [[timLogin_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService timLogin: [args tid] pwd: [args pwd]];
[args release_stub];
}

- (void) process_timAck_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timAck_args * args = [[timAck_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService timAck: [args ab]];
[args release_stub];
}

- (void) process_timPresence_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timPresence_args * args = [[timPresence_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService timPresence: [args pbean]];
[args release_stub];
}

- (void) process_timMessage_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timMessage_args * args = [[timMessage_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService timMessage: [args mbean]];
[args release_stub];
}

- (void) process_timPing_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timPing_args * args = [[timPing_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService timPing: [args threadId]];
[args release_stub];
}

- (void) process_timError_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timError_args * args = [[timError_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService timError: [args e]];
[args release_stub];
}

- (void) process_timLogout_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timLogout_args * args = [[timLogout_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService timLogout];
[args release_stub];
}

- (void) process_timRegist_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timRegist_args * args = [[timRegist_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService timRegist: [args tid] auth: [args auth]];
[args release_stub];
}

- (void) process_timRoser_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timRoser_args * args = [[timRoser_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService timRoser: [args roster]];
[args release_stub];
}

- (void) process_timMessageList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timMessageList_args * args = [[timMessageList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService timMessageList: [args mbeanList]];
[args release_stub];
}

- (void) process_timPresenceList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timPresenceList_args * args = [[timPresenceList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService timPresenceList: [args pbeanList]];
[args release_stub];
}

- (void) process_timMessageIq_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timMessageIq_args * args = [[timMessageIq_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService timMessageIq: [args timMsgIq] iqType: [args iqType]];
[args release_stub];
}

- (void) process_timMessageResult_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timMessageResult_args * args = [[timMessageResult_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService timMessageResult: [args mbean]];
[args release_stub];
}

- (void) process_timProperty_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timProperty_args * args = [[timProperty_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService timProperty: [args tpb]];
[args release_stub];
}

- (void) process_timRemoteUserAuth_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timRemoteUserAuth_args * args = [[timRemoteUserAuth_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
TimRemoteUserAuth_result * result = [[TimRemoteUserAuth_result alloc] init];
[result setSuccess: [mService timRemoteUserAuth: [args tid] pwd: [args pwd] auth: [args auth]]];
[outProtocol writeMessageBeginWithName: @"timRemoteUserAuth"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_timRemoteUserGet_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timRemoteUserGet_args * args = [[timRemoteUserGet_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
TimRemoteUserGet_result * result = [[TimRemoteUserGet_result alloc] init];
[result setSuccess: [mService timRemoteUserGet: [args tid] auth: [args auth]]];
[outProtocol writeMessageBeginWithName: @"timRemoteUserGet"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_timRemoteUserEdit_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timRemoteUserEdit_args * args = [[timRemoteUserEdit_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
TimRemoteUserEdit_result * result = [[TimRemoteUserEdit_result alloc] init];
[result setSuccess: [mService timRemoteUserEdit: [args tid] ub: [args ub] auth: [args auth]]];
[outProtocol writeMessageBeginWithName: @"timRemoteUserEdit"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_timResponsePresence_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timResponsePresence_args * args = [[timResponsePresence_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
TimResponsePresence_result * result = [[TimResponsePresence_result alloc] init];
[result setSuccess: [mService timResponsePresence: [args pbean] auth: [args auth]]];
[outProtocol writeMessageBeginWithName: @"timResponsePresence"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_timResponseMessage_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timResponseMessage_args * args = [[timResponseMessage_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
TimResponseMessage_result * result = [[TimResponseMessage_result alloc] init];
[result setSuccess: [mService timResponseMessage: [args mbean] auth: [args auth]]];
[outProtocol writeMessageBeginWithName: @"timResponseMessage"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_timResponseMessageIq_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timResponseMessageIq_args * args = [[timResponseMessageIq_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
TimResponseMessageIq_result * result = [[TimResponseMessageIq_result alloc] init];
[result setSuccess: [mService timResponseMessageIq: [args timMsgIq] iqType: [args iqType] auth: [args auth]]];
[outProtocol writeMessageBeginWithName: @"timResponseMessageIq"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_timResponsePresenceList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timResponsePresenceList_args * args = [[timResponsePresenceList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
TimResponsePresenceList_result * result = [[TimResponsePresenceList_result alloc] init];
[result setSuccess: [mService timResponsePresenceList: [args pbeanList] auth: [args auth]]];
[outProtocol writeMessageBeginWithName: @"timResponsePresenceList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_timResponseMessageList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
timResponseMessageList_args * args = [[timResponseMessageList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
TimResponseMessageList_result * result = [[TimResponseMessageList_result alloc] init];
[result setSuccess: [mService timResponseMessageList: [args mbeanList] auth: [args auth]]];
[outProtocol writeMessageBeginWithName: @"timResponseMessageList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

